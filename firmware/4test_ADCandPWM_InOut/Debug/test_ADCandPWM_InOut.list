
test_ADCandPWM_InOut.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a70  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  08003b30  08003b30  00013b30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003c0c  08003c0c  00020018  2**0
                  CONTENTS
  4 .ARM          00000008  08003c0c  08003c0c  00013c0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003c14  08003c14  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003c14  08003c14  00013c14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003c18  08003c18  00013c18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08003c1c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c4  20000018  08003c34  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000dc  08003c34  000200dc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008590  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000016be  00000000  00000000  000285d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008d0  00000000  00000000  00029c90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000818  00000000  00000000  0002a560  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001066e  00000000  00000000  0002ad78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000936a  00000000  00000000  0003b3e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00067086  00000000  00000000  00044750  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ab7d6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002170  00000000  00000000  000ab828  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000018 	.word	0x20000018
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003b18 	.word	0x08003b18

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000001c 	.word	0x2000001c
 8000104:	08003b18 	.word	0x08003b18

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_cfrcmple>:
 8000220:	4684      	mov	ip, r0
 8000222:	0008      	movs	r0, r1
 8000224:	4661      	mov	r1, ip
 8000226:	e7ff      	b.n	8000228 <__aeabi_cfcmpeq>

08000228 <__aeabi_cfcmpeq>:
 8000228:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800022a:	f000 fc87 	bl	8000b3c <__lesf2>
 800022e:	2800      	cmp	r0, #0
 8000230:	d401      	bmi.n	8000236 <__aeabi_cfcmpeq+0xe>
 8000232:	2100      	movs	r1, #0
 8000234:	42c8      	cmn	r0, r1
 8000236:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000238 <__aeabi_fcmpeq>:
 8000238:	b510      	push	{r4, lr}
 800023a:	f000 fc13 	bl	8000a64 <__eqsf2>
 800023e:	4240      	negs	r0, r0
 8000240:	3001      	adds	r0, #1
 8000242:	bd10      	pop	{r4, pc}

08000244 <__aeabi_fcmplt>:
 8000244:	b510      	push	{r4, lr}
 8000246:	f000 fc79 	bl	8000b3c <__lesf2>
 800024a:	2800      	cmp	r0, #0
 800024c:	db01      	blt.n	8000252 <__aeabi_fcmplt+0xe>
 800024e:	2000      	movs	r0, #0
 8000250:	bd10      	pop	{r4, pc}
 8000252:	2001      	movs	r0, #1
 8000254:	bd10      	pop	{r4, pc}
 8000256:	46c0      	nop			; (mov r8, r8)

08000258 <__aeabi_fcmple>:
 8000258:	b510      	push	{r4, lr}
 800025a:	f000 fc6f 	bl	8000b3c <__lesf2>
 800025e:	2800      	cmp	r0, #0
 8000260:	dd01      	ble.n	8000266 <__aeabi_fcmple+0xe>
 8000262:	2000      	movs	r0, #0
 8000264:	bd10      	pop	{r4, pc}
 8000266:	2001      	movs	r0, #1
 8000268:	bd10      	pop	{r4, pc}
 800026a:	46c0      	nop			; (mov r8, r8)

0800026c <__aeabi_fcmpgt>:
 800026c:	b510      	push	{r4, lr}
 800026e:	f000 fc1f 	bl	8000ab0 <__gesf2>
 8000272:	2800      	cmp	r0, #0
 8000274:	dc01      	bgt.n	800027a <__aeabi_fcmpgt+0xe>
 8000276:	2000      	movs	r0, #0
 8000278:	bd10      	pop	{r4, pc}
 800027a:	2001      	movs	r0, #1
 800027c:	bd10      	pop	{r4, pc}
 800027e:	46c0      	nop			; (mov r8, r8)

08000280 <__aeabi_fcmpge>:
 8000280:	b510      	push	{r4, lr}
 8000282:	f000 fc15 	bl	8000ab0 <__gesf2>
 8000286:	2800      	cmp	r0, #0
 8000288:	da01      	bge.n	800028e <__aeabi_fcmpge+0xe>
 800028a:	2000      	movs	r0, #0
 800028c:	bd10      	pop	{r4, pc}
 800028e:	2001      	movs	r0, #1
 8000290:	bd10      	pop	{r4, pc}
 8000292:	46c0      	nop			; (mov r8, r8)

08000294 <__aeabi_uldivmod>:
 8000294:	2b00      	cmp	r3, #0
 8000296:	d111      	bne.n	80002bc <__aeabi_uldivmod+0x28>
 8000298:	2a00      	cmp	r2, #0
 800029a:	d10f      	bne.n	80002bc <__aeabi_uldivmod+0x28>
 800029c:	2900      	cmp	r1, #0
 800029e:	d100      	bne.n	80002a2 <__aeabi_uldivmod+0xe>
 80002a0:	2800      	cmp	r0, #0
 80002a2:	d002      	beq.n	80002aa <__aeabi_uldivmod+0x16>
 80002a4:	2100      	movs	r1, #0
 80002a6:	43c9      	mvns	r1, r1
 80002a8:	0008      	movs	r0, r1
 80002aa:	b407      	push	{r0, r1, r2}
 80002ac:	4802      	ldr	r0, [pc, #8]	; (80002b8 <__aeabi_uldivmod+0x24>)
 80002ae:	a102      	add	r1, pc, #8	; (adr r1, 80002b8 <__aeabi_uldivmod+0x24>)
 80002b0:	1840      	adds	r0, r0, r1
 80002b2:	9002      	str	r0, [sp, #8]
 80002b4:	bd03      	pop	{r0, r1, pc}
 80002b6:	46c0      	nop			; (mov r8, r8)
 80002b8:	ffffff65 	.word	0xffffff65
 80002bc:	b403      	push	{r0, r1}
 80002be:	4668      	mov	r0, sp
 80002c0:	b501      	push	{r0, lr}
 80002c2:	9802      	ldr	r0, [sp, #8]
 80002c4:	f000 f84c 	bl	8000360 <__udivmoddi4>
 80002c8:	9b01      	ldr	r3, [sp, #4]
 80002ca:	469e      	mov	lr, r3
 80002cc:	b002      	add	sp, #8
 80002ce:	bc0c      	pop	{r2, r3}
 80002d0:	4770      	bx	lr
 80002d2:	46c0      	nop			; (mov r8, r8)

080002d4 <__aeabi_lmul>:
 80002d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002d6:	46ce      	mov	lr, r9
 80002d8:	4647      	mov	r7, r8
 80002da:	b580      	push	{r7, lr}
 80002dc:	0007      	movs	r7, r0
 80002de:	4699      	mov	r9, r3
 80002e0:	0c3b      	lsrs	r3, r7, #16
 80002e2:	469c      	mov	ip, r3
 80002e4:	0413      	lsls	r3, r2, #16
 80002e6:	0c1b      	lsrs	r3, r3, #16
 80002e8:	001d      	movs	r5, r3
 80002ea:	000e      	movs	r6, r1
 80002ec:	4661      	mov	r1, ip
 80002ee:	0400      	lsls	r0, r0, #16
 80002f0:	0c14      	lsrs	r4, r2, #16
 80002f2:	0c00      	lsrs	r0, r0, #16
 80002f4:	4345      	muls	r5, r0
 80002f6:	434b      	muls	r3, r1
 80002f8:	4360      	muls	r0, r4
 80002fa:	4361      	muls	r1, r4
 80002fc:	18c0      	adds	r0, r0, r3
 80002fe:	0c2c      	lsrs	r4, r5, #16
 8000300:	1820      	adds	r0, r4, r0
 8000302:	468c      	mov	ip, r1
 8000304:	4283      	cmp	r3, r0
 8000306:	d903      	bls.n	8000310 <__aeabi_lmul+0x3c>
 8000308:	2380      	movs	r3, #128	; 0x80
 800030a:	025b      	lsls	r3, r3, #9
 800030c:	4698      	mov	r8, r3
 800030e:	44c4      	add	ip, r8
 8000310:	4649      	mov	r1, r9
 8000312:	4379      	muls	r1, r7
 8000314:	4372      	muls	r2, r6
 8000316:	0c03      	lsrs	r3, r0, #16
 8000318:	4463      	add	r3, ip
 800031a:	042d      	lsls	r5, r5, #16
 800031c:	0c2d      	lsrs	r5, r5, #16
 800031e:	18c9      	adds	r1, r1, r3
 8000320:	0400      	lsls	r0, r0, #16
 8000322:	1940      	adds	r0, r0, r5
 8000324:	1889      	adds	r1, r1, r2
 8000326:	bcc0      	pop	{r6, r7}
 8000328:	46b9      	mov	r9, r7
 800032a:	46b0      	mov	r8, r6
 800032c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800032e:	46c0      	nop			; (mov r8, r8)

08000330 <__aeabi_f2uiz>:
 8000330:	219e      	movs	r1, #158	; 0x9e
 8000332:	b510      	push	{r4, lr}
 8000334:	05c9      	lsls	r1, r1, #23
 8000336:	1c04      	adds	r4, r0, #0
 8000338:	f7ff ffa2 	bl	8000280 <__aeabi_fcmpge>
 800033c:	2800      	cmp	r0, #0
 800033e:	d103      	bne.n	8000348 <__aeabi_f2uiz+0x18>
 8000340:	1c20      	adds	r0, r4, #0
 8000342:	f000 ff13 	bl	800116c <__aeabi_f2iz>
 8000346:	bd10      	pop	{r4, pc}
 8000348:	219e      	movs	r1, #158	; 0x9e
 800034a:	1c20      	adds	r0, r4, #0
 800034c:	05c9      	lsls	r1, r1, #23
 800034e:	f000 fd5f 	bl	8000e10 <__aeabi_fsub>
 8000352:	f000 ff0b 	bl	800116c <__aeabi_f2iz>
 8000356:	2380      	movs	r3, #128	; 0x80
 8000358:	061b      	lsls	r3, r3, #24
 800035a:	469c      	mov	ip, r3
 800035c:	4460      	add	r0, ip
 800035e:	e7f2      	b.n	8000346 <__aeabi_f2uiz+0x16>

08000360 <__udivmoddi4>:
 8000360:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000362:	4657      	mov	r7, sl
 8000364:	464e      	mov	r6, r9
 8000366:	4645      	mov	r5, r8
 8000368:	46de      	mov	lr, fp
 800036a:	b5e0      	push	{r5, r6, r7, lr}
 800036c:	0004      	movs	r4, r0
 800036e:	000d      	movs	r5, r1
 8000370:	4692      	mov	sl, r2
 8000372:	4699      	mov	r9, r3
 8000374:	b083      	sub	sp, #12
 8000376:	428b      	cmp	r3, r1
 8000378:	d830      	bhi.n	80003dc <__udivmoddi4+0x7c>
 800037a:	d02d      	beq.n	80003d8 <__udivmoddi4+0x78>
 800037c:	4649      	mov	r1, r9
 800037e:	4650      	mov	r0, sl
 8000380:	f000 ff74 	bl	800126c <__clzdi2>
 8000384:	0029      	movs	r1, r5
 8000386:	0006      	movs	r6, r0
 8000388:	0020      	movs	r0, r4
 800038a:	f000 ff6f 	bl	800126c <__clzdi2>
 800038e:	1a33      	subs	r3, r6, r0
 8000390:	4698      	mov	r8, r3
 8000392:	3b20      	subs	r3, #32
 8000394:	469b      	mov	fp, r3
 8000396:	d433      	bmi.n	8000400 <__udivmoddi4+0xa0>
 8000398:	465a      	mov	r2, fp
 800039a:	4653      	mov	r3, sl
 800039c:	4093      	lsls	r3, r2
 800039e:	4642      	mov	r2, r8
 80003a0:	001f      	movs	r7, r3
 80003a2:	4653      	mov	r3, sl
 80003a4:	4093      	lsls	r3, r2
 80003a6:	001e      	movs	r6, r3
 80003a8:	42af      	cmp	r7, r5
 80003aa:	d83a      	bhi.n	8000422 <__udivmoddi4+0xc2>
 80003ac:	42af      	cmp	r7, r5
 80003ae:	d100      	bne.n	80003b2 <__udivmoddi4+0x52>
 80003b0:	e078      	b.n	80004a4 <__udivmoddi4+0x144>
 80003b2:	465b      	mov	r3, fp
 80003b4:	1ba4      	subs	r4, r4, r6
 80003b6:	41bd      	sbcs	r5, r7
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	da00      	bge.n	80003be <__udivmoddi4+0x5e>
 80003bc:	e075      	b.n	80004aa <__udivmoddi4+0x14a>
 80003be:	2200      	movs	r2, #0
 80003c0:	2300      	movs	r3, #0
 80003c2:	9200      	str	r2, [sp, #0]
 80003c4:	9301      	str	r3, [sp, #4]
 80003c6:	2301      	movs	r3, #1
 80003c8:	465a      	mov	r2, fp
 80003ca:	4093      	lsls	r3, r2
 80003cc:	9301      	str	r3, [sp, #4]
 80003ce:	2301      	movs	r3, #1
 80003d0:	4642      	mov	r2, r8
 80003d2:	4093      	lsls	r3, r2
 80003d4:	9300      	str	r3, [sp, #0]
 80003d6:	e028      	b.n	800042a <__udivmoddi4+0xca>
 80003d8:	4282      	cmp	r2, r0
 80003da:	d9cf      	bls.n	800037c <__udivmoddi4+0x1c>
 80003dc:	2200      	movs	r2, #0
 80003de:	2300      	movs	r3, #0
 80003e0:	9200      	str	r2, [sp, #0]
 80003e2:	9301      	str	r3, [sp, #4]
 80003e4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	d001      	beq.n	80003ee <__udivmoddi4+0x8e>
 80003ea:	601c      	str	r4, [r3, #0]
 80003ec:	605d      	str	r5, [r3, #4]
 80003ee:	9800      	ldr	r0, [sp, #0]
 80003f0:	9901      	ldr	r1, [sp, #4]
 80003f2:	b003      	add	sp, #12
 80003f4:	bcf0      	pop	{r4, r5, r6, r7}
 80003f6:	46bb      	mov	fp, r7
 80003f8:	46b2      	mov	sl, r6
 80003fa:	46a9      	mov	r9, r5
 80003fc:	46a0      	mov	r8, r4
 80003fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000400:	4642      	mov	r2, r8
 8000402:	2320      	movs	r3, #32
 8000404:	1a9b      	subs	r3, r3, r2
 8000406:	4652      	mov	r2, sl
 8000408:	40da      	lsrs	r2, r3
 800040a:	4641      	mov	r1, r8
 800040c:	0013      	movs	r3, r2
 800040e:	464a      	mov	r2, r9
 8000410:	408a      	lsls	r2, r1
 8000412:	0017      	movs	r7, r2
 8000414:	4642      	mov	r2, r8
 8000416:	431f      	orrs	r7, r3
 8000418:	4653      	mov	r3, sl
 800041a:	4093      	lsls	r3, r2
 800041c:	001e      	movs	r6, r3
 800041e:	42af      	cmp	r7, r5
 8000420:	d9c4      	bls.n	80003ac <__udivmoddi4+0x4c>
 8000422:	2200      	movs	r2, #0
 8000424:	2300      	movs	r3, #0
 8000426:	9200      	str	r2, [sp, #0]
 8000428:	9301      	str	r3, [sp, #4]
 800042a:	4643      	mov	r3, r8
 800042c:	2b00      	cmp	r3, #0
 800042e:	d0d9      	beq.n	80003e4 <__udivmoddi4+0x84>
 8000430:	07fb      	lsls	r3, r7, #31
 8000432:	0872      	lsrs	r2, r6, #1
 8000434:	431a      	orrs	r2, r3
 8000436:	4646      	mov	r6, r8
 8000438:	087b      	lsrs	r3, r7, #1
 800043a:	e00e      	b.n	800045a <__udivmoddi4+0xfa>
 800043c:	42ab      	cmp	r3, r5
 800043e:	d101      	bne.n	8000444 <__udivmoddi4+0xe4>
 8000440:	42a2      	cmp	r2, r4
 8000442:	d80c      	bhi.n	800045e <__udivmoddi4+0xfe>
 8000444:	1aa4      	subs	r4, r4, r2
 8000446:	419d      	sbcs	r5, r3
 8000448:	2001      	movs	r0, #1
 800044a:	1924      	adds	r4, r4, r4
 800044c:	416d      	adcs	r5, r5
 800044e:	2100      	movs	r1, #0
 8000450:	3e01      	subs	r6, #1
 8000452:	1824      	adds	r4, r4, r0
 8000454:	414d      	adcs	r5, r1
 8000456:	2e00      	cmp	r6, #0
 8000458:	d006      	beq.n	8000468 <__udivmoddi4+0x108>
 800045a:	42ab      	cmp	r3, r5
 800045c:	d9ee      	bls.n	800043c <__udivmoddi4+0xdc>
 800045e:	3e01      	subs	r6, #1
 8000460:	1924      	adds	r4, r4, r4
 8000462:	416d      	adcs	r5, r5
 8000464:	2e00      	cmp	r6, #0
 8000466:	d1f8      	bne.n	800045a <__udivmoddi4+0xfa>
 8000468:	9800      	ldr	r0, [sp, #0]
 800046a:	9901      	ldr	r1, [sp, #4]
 800046c:	465b      	mov	r3, fp
 800046e:	1900      	adds	r0, r0, r4
 8000470:	4169      	adcs	r1, r5
 8000472:	2b00      	cmp	r3, #0
 8000474:	db24      	blt.n	80004c0 <__udivmoddi4+0x160>
 8000476:	002b      	movs	r3, r5
 8000478:	465a      	mov	r2, fp
 800047a:	4644      	mov	r4, r8
 800047c:	40d3      	lsrs	r3, r2
 800047e:	002a      	movs	r2, r5
 8000480:	40e2      	lsrs	r2, r4
 8000482:	001c      	movs	r4, r3
 8000484:	465b      	mov	r3, fp
 8000486:	0015      	movs	r5, r2
 8000488:	2b00      	cmp	r3, #0
 800048a:	db2a      	blt.n	80004e2 <__udivmoddi4+0x182>
 800048c:	0026      	movs	r6, r4
 800048e:	409e      	lsls	r6, r3
 8000490:	0033      	movs	r3, r6
 8000492:	0026      	movs	r6, r4
 8000494:	4647      	mov	r7, r8
 8000496:	40be      	lsls	r6, r7
 8000498:	0032      	movs	r2, r6
 800049a:	1a80      	subs	r0, r0, r2
 800049c:	4199      	sbcs	r1, r3
 800049e:	9000      	str	r0, [sp, #0]
 80004a0:	9101      	str	r1, [sp, #4]
 80004a2:	e79f      	b.n	80003e4 <__udivmoddi4+0x84>
 80004a4:	42a3      	cmp	r3, r4
 80004a6:	d8bc      	bhi.n	8000422 <__udivmoddi4+0xc2>
 80004a8:	e783      	b.n	80003b2 <__udivmoddi4+0x52>
 80004aa:	4642      	mov	r2, r8
 80004ac:	2320      	movs	r3, #32
 80004ae:	2100      	movs	r1, #0
 80004b0:	1a9b      	subs	r3, r3, r2
 80004b2:	2200      	movs	r2, #0
 80004b4:	9100      	str	r1, [sp, #0]
 80004b6:	9201      	str	r2, [sp, #4]
 80004b8:	2201      	movs	r2, #1
 80004ba:	40da      	lsrs	r2, r3
 80004bc:	9201      	str	r2, [sp, #4]
 80004be:	e786      	b.n	80003ce <__udivmoddi4+0x6e>
 80004c0:	4642      	mov	r2, r8
 80004c2:	2320      	movs	r3, #32
 80004c4:	1a9b      	subs	r3, r3, r2
 80004c6:	002a      	movs	r2, r5
 80004c8:	4646      	mov	r6, r8
 80004ca:	409a      	lsls	r2, r3
 80004cc:	0023      	movs	r3, r4
 80004ce:	40f3      	lsrs	r3, r6
 80004d0:	4644      	mov	r4, r8
 80004d2:	4313      	orrs	r3, r2
 80004d4:	002a      	movs	r2, r5
 80004d6:	40e2      	lsrs	r2, r4
 80004d8:	001c      	movs	r4, r3
 80004da:	465b      	mov	r3, fp
 80004dc:	0015      	movs	r5, r2
 80004de:	2b00      	cmp	r3, #0
 80004e0:	dad4      	bge.n	800048c <__udivmoddi4+0x12c>
 80004e2:	4642      	mov	r2, r8
 80004e4:	002f      	movs	r7, r5
 80004e6:	2320      	movs	r3, #32
 80004e8:	0026      	movs	r6, r4
 80004ea:	4097      	lsls	r7, r2
 80004ec:	1a9b      	subs	r3, r3, r2
 80004ee:	40de      	lsrs	r6, r3
 80004f0:	003b      	movs	r3, r7
 80004f2:	4333      	orrs	r3, r6
 80004f4:	e7cd      	b.n	8000492 <__udivmoddi4+0x132>
 80004f6:	46c0      	nop			; (mov r8, r8)

080004f8 <__aeabi_fadd>:
 80004f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004fa:	46c6      	mov	lr, r8
 80004fc:	0243      	lsls	r3, r0, #9
 80004fe:	0a5b      	lsrs	r3, r3, #9
 8000500:	024e      	lsls	r6, r1, #9
 8000502:	0045      	lsls	r5, r0, #1
 8000504:	004f      	lsls	r7, r1, #1
 8000506:	00da      	lsls	r2, r3, #3
 8000508:	0fc4      	lsrs	r4, r0, #31
 800050a:	469c      	mov	ip, r3
 800050c:	0a70      	lsrs	r0, r6, #9
 800050e:	4690      	mov	r8, r2
 8000510:	b500      	push	{lr}
 8000512:	0e2d      	lsrs	r5, r5, #24
 8000514:	0e3f      	lsrs	r7, r7, #24
 8000516:	0fc9      	lsrs	r1, r1, #31
 8000518:	09b6      	lsrs	r6, r6, #6
 800051a:	428c      	cmp	r4, r1
 800051c:	d04b      	beq.n	80005b6 <__aeabi_fadd+0xbe>
 800051e:	1bea      	subs	r2, r5, r7
 8000520:	2a00      	cmp	r2, #0
 8000522:	dd36      	ble.n	8000592 <__aeabi_fadd+0x9a>
 8000524:	2f00      	cmp	r7, #0
 8000526:	d061      	beq.n	80005ec <__aeabi_fadd+0xf4>
 8000528:	2dff      	cmp	r5, #255	; 0xff
 800052a:	d100      	bne.n	800052e <__aeabi_fadd+0x36>
 800052c:	e0ad      	b.n	800068a <__aeabi_fadd+0x192>
 800052e:	2380      	movs	r3, #128	; 0x80
 8000530:	04db      	lsls	r3, r3, #19
 8000532:	431e      	orrs	r6, r3
 8000534:	2a1b      	cmp	r2, #27
 8000536:	dc00      	bgt.n	800053a <__aeabi_fadd+0x42>
 8000538:	e0d3      	b.n	80006e2 <__aeabi_fadd+0x1ea>
 800053a:	2001      	movs	r0, #1
 800053c:	4643      	mov	r3, r8
 800053e:	1a18      	subs	r0, r3, r0
 8000540:	0143      	lsls	r3, r0, #5
 8000542:	d400      	bmi.n	8000546 <__aeabi_fadd+0x4e>
 8000544:	e08c      	b.n	8000660 <__aeabi_fadd+0x168>
 8000546:	0180      	lsls	r0, r0, #6
 8000548:	0987      	lsrs	r7, r0, #6
 800054a:	0038      	movs	r0, r7
 800054c:	f000 fe70 	bl	8001230 <__clzsi2>
 8000550:	3805      	subs	r0, #5
 8000552:	4087      	lsls	r7, r0
 8000554:	4285      	cmp	r5, r0
 8000556:	dc00      	bgt.n	800055a <__aeabi_fadd+0x62>
 8000558:	e0b6      	b.n	80006c8 <__aeabi_fadd+0x1d0>
 800055a:	1a2d      	subs	r5, r5, r0
 800055c:	48b3      	ldr	r0, [pc, #716]	; (800082c <__aeabi_fadd+0x334>)
 800055e:	4038      	ands	r0, r7
 8000560:	0743      	lsls	r3, r0, #29
 8000562:	d004      	beq.n	800056e <__aeabi_fadd+0x76>
 8000564:	230f      	movs	r3, #15
 8000566:	4003      	ands	r3, r0
 8000568:	2b04      	cmp	r3, #4
 800056a:	d000      	beq.n	800056e <__aeabi_fadd+0x76>
 800056c:	3004      	adds	r0, #4
 800056e:	0143      	lsls	r3, r0, #5
 8000570:	d400      	bmi.n	8000574 <__aeabi_fadd+0x7c>
 8000572:	e078      	b.n	8000666 <__aeabi_fadd+0x16e>
 8000574:	1c6a      	adds	r2, r5, #1
 8000576:	2dfe      	cmp	r5, #254	; 0xfe
 8000578:	d065      	beq.n	8000646 <__aeabi_fadd+0x14e>
 800057a:	0180      	lsls	r0, r0, #6
 800057c:	0a43      	lsrs	r3, r0, #9
 800057e:	469c      	mov	ip, r3
 8000580:	b2d2      	uxtb	r2, r2
 8000582:	4663      	mov	r3, ip
 8000584:	05d0      	lsls	r0, r2, #23
 8000586:	4318      	orrs	r0, r3
 8000588:	07e4      	lsls	r4, r4, #31
 800058a:	4320      	orrs	r0, r4
 800058c:	bc80      	pop	{r7}
 800058e:	46b8      	mov	r8, r7
 8000590:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000592:	2a00      	cmp	r2, #0
 8000594:	d035      	beq.n	8000602 <__aeabi_fadd+0x10a>
 8000596:	1b7a      	subs	r2, r7, r5
 8000598:	2d00      	cmp	r5, #0
 800059a:	d000      	beq.n	800059e <__aeabi_fadd+0xa6>
 800059c:	e0af      	b.n	80006fe <__aeabi_fadd+0x206>
 800059e:	4643      	mov	r3, r8
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d100      	bne.n	80005a6 <__aeabi_fadd+0xae>
 80005a4:	e0a7      	b.n	80006f6 <__aeabi_fadd+0x1fe>
 80005a6:	1e53      	subs	r3, r2, #1
 80005a8:	2a01      	cmp	r2, #1
 80005aa:	d100      	bne.n	80005ae <__aeabi_fadd+0xb6>
 80005ac:	e12f      	b.n	800080e <__aeabi_fadd+0x316>
 80005ae:	2aff      	cmp	r2, #255	; 0xff
 80005b0:	d069      	beq.n	8000686 <__aeabi_fadd+0x18e>
 80005b2:	001a      	movs	r2, r3
 80005b4:	e0aa      	b.n	800070c <__aeabi_fadd+0x214>
 80005b6:	1be9      	subs	r1, r5, r7
 80005b8:	2900      	cmp	r1, #0
 80005ba:	dd70      	ble.n	800069e <__aeabi_fadd+0x1a6>
 80005bc:	2f00      	cmp	r7, #0
 80005be:	d037      	beq.n	8000630 <__aeabi_fadd+0x138>
 80005c0:	2dff      	cmp	r5, #255	; 0xff
 80005c2:	d062      	beq.n	800068a <__aeabi_fadd+0x192>
 80005c4:	2380      	movs	r3, #128	; 0x80
 80005c6:	04db      	lsls	r3, r3, #19
 80005c8:	431e      	orrs	r6, r3
 80005ca:	291b      	cmp	r1, #27
 80005cc:	dc00      	bgt.n	80005d0 <__aeabi_fadd+0xd8>
 80005ce:	e0b0      	b.n	8000732 <__aeabi_fadd+0x23a>
 80005d0:	2001      	movs	r0, #1
 80005d2:	4440      	add	r0, r8
 80005d4:	0143      	lsls	r3, r0, #5
 80005d6:	d543      	bpl.n	8000660 <__aeabi_fadd+0x168>
 80005d8:	3501      	adds	r5, #1
 80005da:	2dff      	cmp	r5, #255	; 0xff
 80005dc:	d033      	beq.n	8000646 <__aeabi_fadd+0x14e>
 80005de:	2301      	movs	r3, #1
 80005e0:	4a93      	ldr	r2, [pc, #588]	; (8000830 <__aeabi_fadd+0x338>)
 80005e2:	4003      	ands	r3, r0
 80005e4:	0840      	lsrs	r0, r0, #1
 80005e6:	4010      	ands	r0, r2
 80005e8:	4318      	orrs	r0, r3
 80005ea:	e7b9      	b.n	8000560 <__aeabi_fadd+0x68>
 80005ec:	2e00      	cmp	r6, #0
 80005ee:	d100      	bne.n	80005f2 <__aeabi_fadd+0xfa>
 80005f0:	e083      	b.n	80006fa <__aeabi_fadd+0x202>
 80005f2:	1e51      	subs	r1, r2, #1
 80005f4:	2a01      	cmp	r2, #1
 80005f6:	d100      	bne.n	80005fa <__aeabi_fadd+0x102>
 80005f8:	e0d8      	b.n	80007ac <__aeabi_fadd+0x2b4>
 80005fa:	2aff      	cmp	r2, #255	; 0xff
 80005fc:	d045      	beq.n	800068a <__aeabi_fadd+0x192>
 80005fe:	000a      	movs	r2, r1
 8000600:	e798      	b.n	8000534 <__aeabi_fadd+0x3c>
 8000602:	27fe      	movs	r7, #254	; 0xfe
 8000604:	1c6a      	adds	r2, r5, #1
 8000606:	4217      	tst	r7, r2
 8000608:	d000      	beq.n	800060c <__aeabi_fadd+0x114>
 800060a:	e086      	b.n	800071a <__aeabi_fadd+0x222>
 800060c:	2d00      	cmp	r5, #0
 800060e:	d000      	beq.n	8000612 <__aeabi_fadd+0x11a>
 8000610:	e0b7      	b.n	8000782 <__aeabi_fadd+0x28a>
 8000612:	4643      	mov	r3, r8
 8000614:	2b00      	cmp	r3, #0
 8000616:	d100      	bne.n	800061a <__aeabi_fadd+0x122>
 8000618:	e0f3      	b.n	8000802 <__aeabi_fadd+0x30a>
 800061a:	2200      	movs	r2, #0
 800061c:	2e00      	cmp	r6, #0
 800061e:	d0b0      	beq.n	8000582 <__aeabi_fadd+0x8a>
 8000620:	1b98      	subs	r0, r3, r6
 8000622:	0143      	lsls	r3, r0, #5
 8000624:	d400      	bmi.n	8000628 <__aeabi_fadd+0x130>
 8000626:	e0fa      	b.n	800081e <__aeabi_fadd+0x326>
 8000628:	4643      	mov	r3, r8
 800062a:	000c      	movs	r4, r1
 800062c:	1af0      	subs	r0, r6, r3
 800062e:	e797      	b.n	8000560 <__aeabi_fadd+0x68>
 8000630:	2e00      	cmp	r6, #0
 8000632:	d100      	bne.n	8000636 <__aeabi_fadd+0x13e>
 8000634:	e0c8      	b.n	80007c8 <__aeabi_fadd+0x2d0>
 8000636:	1e4a      	subs	r2, r1, #1
 8000638:	2901      	cmp	r1, #1
 800063a:	d100      	bne.n	800063e <__aeabi_fadd+0x146>
 800063c:	e0ae      	b.n	800079c <__aeabi_fadd+0x2a4>
 800063e:	29ff      	cmp	r1, #255	; 0xff
 8000640:	d023      	beq.n	800068a <__aeabi_fadd+0x192>
 8000642:	0011      	movs	r1, r2
 8000644:	e7c1      	b.n	80005ca <__aeabi_fadd+0xd2>
 8000646:	2300      	movs	r3, #0
 8000648:	22ff      	movs	r2, #255	; 0xff
 800064a:	469c      	mov	ip, r3
 800064c:	e799      	b.n	8000582 <__aeabi_fadd+0x8a>
 800064e:	21fe      	movs	r1, #254	; 0xfe
 8000650:	1c6a      	adds	r2, r5, #1
 8000652:	4211      	tst	r1, r2
 8000654:	d077      	beq.n	8000746 <__aeabi_fadd+0x24e>
 8000656:	2aff      	cmp	r2, #255	; 0xff
 8000658:	d0f5      	beq.n	8000646 <__aeabi_fadd+0x14e>
 800065a:	0015      	movs	r5, r2
 800065c:	4446      	add	r6, r8
 800065e:	0870      	lsrs	r0, r6, #1
 8000660:	0743      	lsls	r3, r0, #29
 8000662:	d000      	beq.n	8000666 <__aeabi_fadd+0x16e>
 8000664:	e77e      	b.n	8000564 <__aeabi_fadd+0x6c>
 8000666:	08c3      	lsrs	r3, r0, #3
 8000668:	2dff      	cmp	r5, #255	; 0xff
 800066a:	d00e      	beq.n	800068a <__aeabi_fadd+0x192>
 800066c:	025b      	lsls	r3, r3, #9
 800066e:	0a5b      	lsrs	r3, r3, #9
 8000670:	469c      	mov	ip, r3
 8000672:	b2ea      	uxtb	r2, r5
 8000674:	e785      	b.n	8000582 <__aeabi_fadd+0x8a>
 8000676:	2e00      	cmp	r6, #0
 8000678:	d007      	beq.n	800068a <__aeabi_fadd+0x192>
 800067a:	2280      	movs	r2, #128	; 0x80
 800067c:	03d2      	lsls	r2, r2, #15
 800067e:	4213      	tst	r3, r2
 8000680:	d003      	beq.n	800068a <__aeabi_fadd+0x192>
 8000682:	4210      	tst	r0, r2
 8000684:	d101      	bne.n	800068a <__aeabi_fadd+0x192>
 8000686:	000c      	movs	r4, r1
 8000688:	0003      	movs	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d0db      	beq.n	8000646 <__aeabi_fadd+0x14e>
 800068e:	2080      	movs	r0, #128	; 0x80
 8000690:	03c0      	lsls	r0, r0, #15
 8000692:	4318      	orrs	r0, r3
 8000694:	0240      	lsls	r0, r0, #9
 8000696:	0a43      	lsrs	r3, r0, #9
 8000698:	469c      	mov	ip, r3
 800069a:	22ff      	movs	r2, #255	; 0xff
 800069c:	e771      	b.n	8000582 <__aeabi_fadd+0x8a>
 800069e:	2900      	cmp	r1, #0
 80006a0:	d0d5      	beq.n	800064e <__aeabi_fadd+0x156>
 80006a2:	1b7a      	subs	r2, r7, r5
 80006a4:	2d00      	cmp	r5, #0
 80006a6:	d160      	bne.n	800076a <__aeabi_fadd+0x272>
 80006a8:	4643      	mov	r3, r8
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d024      	beq.n	80006f8 <__aeabi_fadd+0x200>
 80006ae:	1e53      	subs	r3, r2, #1
 80006b0:	2a01      	cmp	r2, #1
 80006b2:	d073      	beq.n	800079c <__aeabi_fadd+0x2a4>
 80006b4:	2aff      	cmp	r2, #255	; 0xff
 80006b6:	d0e7      	beq.n	8000688 <__aeabi_fadd+0x190>
 80006b8:	001a      	movs	r2, r3
 80006ba:	2a1b      	cmp	r2, #27
 80006bc:	dc00      	bgt.n	80006c0 <__aeabi_fadd+0x1c8>
 80006be:	e085      	b.n	80007cc <__aeabi_fadd+0x2d4>
 80006c0:	2001      	movs	r0, #1
 80006c2:	003d      	movs	r5, r7
 80006c4:	1980      	adds	r0, r0, r6
 80006c6:	e785      	b.n	80005d4 <__aeabi_fadd+0xdc>
 80006c8:	2320      	movs	r3, #32
 80006ca:	003a      	movs	r2, r7
 80006cc:	1b45      	subs	r5, r0, r5
 80006ce:	0038      	movs	r0, r7
 80006d0:	3501      	adds	r5, #1
 80006d2:	40ea      	lsrs	r2, r5
 80006d4:	1b5d      	subs	r5, r3, r5
 80006d6:	40a8      	lsls	r0, r5
 80006d8:	1e43      	subs	r3, r0, #1
 80006da:	4198      	sbcs	r0, r3
 80006dc:	2500      	movs	r5, #0
 80006de:	4310      	orrs	r0, r2
 80006e0:	e73e      	b.n	8000560 <__aeabi_fadd+0x68>
 80006e2:	2320      	movs	r3, #32
 80006e4:	0030      	movs	r0, r6
 80006e6:	1a9b      	subs	r3, r3, r2
 80006e8:	0031      	movs	r1, r6
 80006ea:	4098      	lsls	r0, r3
 80006ec:	40d1      	lsrs	r1, r2
 80006ee:	1e43      	subs	r3, r0, #1
 80006f0:	4198      	sbcs	r0, r3
 80006f2:	4308      	orrs	r0, r1
 80006f4:	e722      	b.n	800053c <__aeabi_fadd+0x44>
 80006f6:	000c      	movs	r4, r1
 80006f8:	0003      	movs	r3, r0
 80006fa:	0015      	movs	r5, r2
 80006fc:	e7b4      	b.n	8000668 <__aeabi_fadd+0x170>
 80006fe:	2fff      	cmp	r7, #255	; 0xff
 8000700:	d0c1      	beq.n	8000686 <__aeabi_fadd+0x18e>
 8000702:	2380      	movs	r3, #128	; 0x80
 8000704:	4640      	mov	r0, r8
 8000706:	04db      	lsls	r3, r3, #19
 8000708:	4318      	orrs	r0, r3
 800070a:	4680      	mov	r8, r0
 800070c:	2a1b      	cmp	r2, #27
 800070e:	dd51      	ble.n	80007b4 <__aeabi_fadd+0x2bc>
 8000710:	2001      	movs	r0, #1
 8000712:	000c      	movs	r4, r1
 8000714:	003d      	movs	r5, r7
 8000716:	1a30      	subs	r0, r6, r0
 8000718:	e712      	b.n	8000540 <__aeabi_fadd+0x48>
 800071a:	4643      	mov	r3, r8
 800071c:	1b9f      	subs	r7, r3, r6
 800071e:	017b      	lsls	r3, r7, #5
 8000720:	d42b      	bmi.n	800077a <__aeabi_fadd+0x282>
 8000722:	2f00      	cmp	r7, #0
 8000724:	d000      	beq.n	8000728 <__aeabi_fadd+0x230>
 8000726:	e710      	b.n	800054a <__aeabi_fadd+0x52>
 8000728:	2300      	movs	r3, #0
 800072a:	2400      	movs	r4, #0
 800072c:	2200      	movs	r2, #0
 800072e:	469c      	mov	ip, r3
 8000730:	e727      	b.n	8000582 <__aeabi_fadd+0x8a>
 8000732:	2320      	movs	r3, #32
 8000734:	0032      	movs	r2, r6
 8000736:	0030      	movs	r0, r6
 8000738:	40ca      	lsrs	r2, r1
 800073a:	1a59      	subs	r1, r3, r1
 800073c:	4088      	lsls	r0, r1
 800073e:	1e43      	subs	r3, r0, #1
 8000740:	4198      	sbcs	r0, r3
 8000742:	4310      	orrs	r0, r2
 8000744:	e745      	b.n	80005d2 <__aeabi_fadd+0xda>
 8000746:	2d00      	cmp	r5, #0
 8000748:	d14a      	bne.n	80007e0 <__aeabi_fadd+0x2e8>
 800074a:	4643      	mov	r3, r8
 800074c:	2b00      	cmp	r3, #0
 800074e:	d063      	beq.n	8000818 <__aeabi_fadd+0x320>
 8000750:	2200      	movs	r2, #0
 8000752:	2e00      	cmp	r6, #0
 8000754:	d100      	bne.n	8000758 <__aeabi_fadd+0x260>
 8000756:	e714      	b.n	8000582 <__aeabi_fadd+0x8a>
 8000758:	0030      	movs	r0, r6
 800075a:	4440      	add	r0, r8
 800075c:	0143      	lsls	r3, r0, #5
 800075e:	d400      	bmi.n	8000762 <__aeabi_fadd+0x26a>
 8000760:	e77e      	b.n	8000660 <__aeabi_fadd+0x168>
 8000762:	4b32      	ldr	r3, [pc, #200]	; (800082c <__aeabi_fadd+0x334>)
 8000764:	3501      	adds	r5, #1
 8000766:	4018      	ands	r0, r3
 8000768:	e77a      	b.n	8000660 <__aeabi_fadd+0x168>
 800076a:	2fff      	cmp	r7, #255	; 0xff
 800076c:	d08c      	beq.n	8000688 <__aeabi_fadd+0x190>
 800076e:	2380      	movs	r3, #128	; 0x80
 8000770:	4641      	mov	r1, r8
 8000772:	04db      	lsls	r3, r3, #19
 8000774:	4319      	orrs	r1, r3
 8000776:	4688      	mov	r8, r1
 8000778:	e79f      	b.n	80006ba <__aeabi_fadd+0x1c2>
 800077a:	4643      	mov	r3, r8
 800077c:	000c      	movs	r4, r1
 800077e:	1af7      	subs	r7, r6, r3
 8000780:	e6e3      	b.n	800054a <__aeabi_fadd+0x52>
 8000782:	4642      	mov	r2, r8
 8000784:	2a00      	cmp	r2, #0
 8000786:	d000      	beq.n	800078a <__aeabi_fadd+0x292>
 8000788:	e775      	b.n	8000676 <__aeabi_fadd+0x17e>
 800078a:	2e00      	cmp	r6, #0
 800078c:	d000      	beq.n	8000790 <__aeabi_fadd+0x298>
 800078e:	e77a      	b.n	8000686 <__aeabi_fadd+0x18e>
 8000790:	2380      	movs	r3, #128	; 0x80
 8000792:	03db      	lsls	r3, r3, #15
 8000794:	2400      	movs	r4, #0
 8000796:	469c      	mov	ip, r3
 8000798:	22ff      	movs	r2, #255	; 0xff
 800079a:	e6f2      	b.n	8000582 <__aeabi_fadd+0x8a>
 800079c:	0030      	movs	r0, r6
 800079e:	4440      	add	r0, r8
 80007a0:	2501      	movs	r5, #1
 80007a2:	0143      	lsls	r3, r0, #5
 80007a4:	d400      	bmi.n	80007a8 <__aeabi_fadd+0x2b0>
 80007a6:	e75b      	b.n	8000660 <__aeabi_fadd+0x168>
 80007a8:	2502      	movs	r5, #2
 80007aa:	e718      	b.n	80005de <__aeabi_fadd+0xe6>
 80007ac:	4643      	mov	r3, r8
 80007ae:	2501      	movs	r5, #1
 80007b0:	1b98      	subs	r0, r3, r6
 80007b2:	e6c5      	b.n	8000540 <__aeabi_fadd+0x48>
 80007b4:	2320      	movs	r3, #32
 80007b6:	4644      	mov	r4, r8
 80007b8:	4640      	mov	r0, r8
 80007ba:	40d4      	lsrs	r4, r2
 80007bc:	1a9a      	subs	r2, r3, r2
 80007be:	4090      	lsls	r0, r2
 80007c0:	1e43      	subs	r3, r0, #1
 80007c2:	4198      	sbcs	r0, r3
 80007c4:	4320      	orrs	r0, r4
 80007c6:	e7a4      	b.n	8000712 <__aeabi_fadd+0x21a>
 80007c8:	000d      	movs	r5, r1
 80007ca:	e74d      	b.n	8000668 <__aeabi_fadd+0x170>
 80007cc:	2320      	movs	r3, #32
 80007ce:	4641      	mov	r1, r8
 80007d0:	4640      	mov	r0, r8
 80007d2:	40d1      	lsrs	r1, r2
 80007d4:	1a9a      	subs	r2, r3, r2
 80007d6:	4090      	lsls	r0, r2
 80007d8:	1e43      	subs	r3, r0, #1
 80007da:	4198      	sbcs	r0, r3
 80007dc:	4308      	orrs	r0, r1
 80007de:	e770      	b.n	80006c2 <__aeabi_fadd+0x1ca>
 80007e0:	4642      	mov	r2, r8
 80007e2:	2a00      	cmp	r2, #0
 80007e4:	d100      	bne.n	80007e8 <__aeabi_fadd+0x2f0>
 80007e6:	e74f      	b.n	8000688 <__aeabi_fadd+0x190>
 80007e8:	2e00      	cmp	r6, #0
 80007ea:	d100      	bne.n	80007ee <__aeabi_fadd+0x2f6>
 80007ec:	e74d      	b.n	800068a <__aeabi_fadd+0x192>
 80007ee:	2280      	movs	r2, #128	; 0x80
 80007f0:	03d2      	lsls	r2, r2, #15
 80007f2:	4213      	tst	r3, r2
 80007f4:	d100      	bne.n	80007f8 <__aeabi_fadd+0x300>
 80007f6:	e748      	b.n	800068a <__aeabi_fadd+0x192>
 80007f8:	4210      	tst	r0, r2
 80007fa:	d000      	beq.n	80007fe <__aeabi_fadd+0x306>
 80007fc:	e745      	b.n	800068a <__aeabi_fadd+0x192>
 80007fe:	0003      	movs	r3, r0
 8000800:	e743      	b.n	800068a <__aeabi_fadd+0x192>
 8000802:	2e00      	cmp	r6, #0
 8000804:	d090      	beq.n	8000728 <__aeabi_fadd+0x230>
 8000806:	000c      	movs	r4, r1
 8000808:	4684      	mov	ip, r0
 800080a:	2200      	movs	r2, #0
 800080c:	e6b9      	b.n	8000582 <__aeabi_fadd+0x8a>
 800080e:	4643      	mov	r3, r8
 8000810:	000c      	movs	r4, r1
 8000812:	1af0      	subs	r0, r6, r3
 8000814:	3501      	adds	r5, #1
 8000816:	e693      	b.n	8000540 <__aeabi_fadd+0x48>
 8000818:	4684      	mov	ip, r0
 800081a:	2200      	movs	r2, #0
 800081c:	e6b1      	b.n	8000582 <__aeabi_fadd+0x8a>
 800081e:	2800      	cmp	r0, #0
 8000820:	d000      	beq.n	8000824 <__aeabi_fadd+0x32c>
 8000822:	e71d      	b.n	8000660 <__aeabi_fadd+0x168>
 8000824:	2300      	movs	r3, #0
 8000826:	2400      	movs	r4, #0
 8000828:	469c      	mov	ip, r3
 800082a:	e6aa      	b.n	8000582 <__aeabi_fadd+0x8a>
 800082c:	fbffffff 	.word	0xfbffffff
 8000830:	7dffffff 	.word	0x7dffffff

08000834 <__aeabi_fdiv>:
 8000834:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000836:	464f      	mov	r7, r9
 8000838:	4646      	mov	r6, r8
 800083a:	46d6      	mov	lr, sl
 800083c:	0245      	lsls	r5, r0, #9
 800083e:	b5c0      	push	{r6, r7, lr}
 8000840:	0047      	lsls	r7, r0, #1
 8000842:	1c0c      	adds	r4, r1, #0
 8000844:	0a6d      	lsrs	r5, r5, #9
 8000846:	0e3f      	lsrs	r7, r7, #24
 8000848:	0fc6      	lsrs	r6, r0, #31
 800084a:	2f00      	cmp	r7, #0
 800084c:	d100      	bne.n	8000850 <__aeabi_fdiv+0x1c>
 800084e:	e070      	b.n	8000932 <__aeabi_fdiv+0xfe>
 8000850:	2fff      	cmp	r7, #255	; 0xff
 8000852:	d100      	bne.n	8000856 <__aeabi_fdiv+0x22>
 8000854:	e075      	b.n	8000942 <__aeabi_fdiv+0x10e>
 8000856:	00eb      	lsls	r3, r5, #3
 8000858:	2580      	movs	r5, #128	; 0x80
 800085a:	04ed      	lsls	r5, r5, #19
 800085c:	431d      	orrs	r5, r3
 800085e:	2300      	movs	r3, #0
 8000860:	4699      	mov	r9, r3
 8000862:	469a      	mov	sl, r3
 8000864:	3f7f      	subs	r7, #127	; 0x7f
 8000866:	0260      	lsls	r0, r4, #9
 8000868:	0a43      	lsrs	r3, r0, #9
 800086a:	4698      	mov	r8, r3
 800086c:	0063      	lsls	r3, r4, #1
 800086e:	0e1b      	lsrs	r3, r3, #24
 8000870:	0fe4      	lsrs	r4, r4, #31
 8000872:	2b00      	cmp	r3, #0
 8000874:	d04e      	beq.n	8000914 <__aeabi_fdiv+0xe0>
 8000876:	2bff      	cmp	r3, #255	; 0xff
 8000878:	d046      	beq.n	8000908 <__aeabi_fdiv+0xd4>
 800087a:	4642      	mov	r2, r8
 800087c:	00d0      	lsls	r0, r2, #3
 800087e:	2280      	movs	r2, #128	; 0x80
 8000880:	04d2      	lsls	r2, r2, #19
 8000882:	4302      	orrs	r2, r0
 8000884:	4690      	mov	r8, r2
 8000886:	2200      	movs	r2, #0
 8000888:	3b7f      	subs	r3, #127	; 0x7f
 800088a:	0031      	movs	r1, r6
 800088c:	1aff      	subs	r7, r7, r3
 800088e:	464b      	mov	r3, r9
 8000890:	4061      	eors	r1, r4
 8000892:	b2c9      	uxtb	r1, r1
 8000894:	4313      	orrs	r3, r2
 8000896:	2b0f      	cmp	r3, #15
 8000898:	d900      	bls.n	800089c <__aeabi_fdiv+0x68>
 800089a:	e0b5      	b.n	8000a08 <__aeabi_fdiv+0x1d4>
 800089c:	486e      	ldr	r0, [pc, #440]	; (8000a58 <__aeabi_fdiv+0x224>)
 800089e:	009b      	lsls	r3, r3, #2
 80008a0:	58c3      	ldr	r3, [r0, r3]
 80008a2:	469f      	mov	pc, r3
 80008a4:	2300      	movs	r3, #0
 80008a6:	4698      	mov	r8, r3
 80008a8:	0026      	movs	r6, r4
 80008aa:	4645      	mov	r5, r8
 80008ac:	4692      	mov	sl, r2
 80008ae:	4653      	mov	r3, sl
 80008b0:	2b02      	cmp	r3, #2
 80008b2:	d100      	bne.n	80008b6 <__aeabi_fdiv+0x82>
 80008b4:	e089      	b.n	80009ca <__aeabi_fdiv+0x196>
 80008b6:	2b03      	cmp	r3, #3
 80008b8:	d100      	bne.n	80008bc <__aeabi_fdiv+0x88>
 80008ba:	e09e      	b.n	80009fa <__aeabi_fdiv+0x1c6>
 80008bc:	2b01      	cmp	r3, #1
 80008be:	d018      	beq.n	80008f2 <__aeabi_fdiv+0xbe>
 80008c0:	003b      	movs	r3, r7
 80008c2:	337f      	adds	r3, #127	; 0x7f
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	dd69      	ble.n	800099c <__aeabi_fdiv+0x168>
 80008c8:	076a      	lsls	r2, r5, #29
 80008ca:	d004      	beq.n	80008d6 <__aeabi_fdiv+0xa2>
 80008cc:	220f      	movs	r2, #15
 80008ce:	402a      	ands	r2, r5
 80008d0:	2a04      	cmp	r2, #4
 80008d2:	d000      	beq.n	80008d6 <__aeabi_fdiv+0xa2>
 80008d4:	3504      	adds	r5, #4
 80008d6:	012a      	lsls	r2, r5, #4
 80008d8:	d503      	bpl.n	80008e2 <__aeabi_fdiv+0xae>
 80008da:	4b60      	ldr	r3, [pc, #384]	; (8000a5c <__aeabi_fdiv+0x228>)
 80008dc:	401d      	ands	r5, r3
 80008de:	003b      	movs	r3, r7
 80008e0:	3380      	adds	r3, #128	; 0x80
 80008e2:	2bfe      	cmp	r3, #254	; 0xfe
 80008e4:	dd00      	ble.n	80008e8 <__aeabi_fdiv+0xb4>
 80008e6:	e070      	b.n	80009ca <__aeabi_fdiv+0x196>
 80008e8:	01ad      	lsls	r5, r5, #6
 80008ea:	0a6d      	lsrs	r5, r5, #9
 80008ec:	b2d8      	uxtb	r0, r3
 80008ee:	e002      	b.n	80008f6 <__aeabi_fdiv+0xc2>
 80008f0:	000e      	movs	r6, r1
 80008f2:	2000      	movs	r0, #0
 80008f4:	2500      	movs	r5, #0
 80008f6:	05c0      	lsls	r0, r0, #23
 80008f8:	4328      	orrs	r0, r5
 80008fa:	07f6      	lsls	r6, r6, #31
 80008fc:	4330      	orrs	r0, r6
 80008fe:	bce0      	pop	{r5, r6, r7}
 8000900:	46ba      	mov	sl, r7
 8000902:	46b1      	mov	r9, r6
 8000904:	46a8      	mov	r8, r5
 8000906:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000908:	4643      	mov	r3, r8
 800090a:	2b00      	cmp	r3, #0
 800090c:	d13f      	bne.n	800098e <__aeabi_fdiv+0x15a>
 800090e:	2202      	movs	r2, #2
 8000910:	3fff      	subs	r7, #255	; 0xff
 8000912:	e003      	b.n	800091c <__aeabi_fdiv+0xe8>
 8000914:	4643      	mov	r3, r8
 8000916:	2b00      	cmp	r3, #0
 8000918:	d12d      	bne.n	8000976 <__aeabi_fdiv+0x142>
 800091a:	2201      	movs	r2, #1
 800091c:	0031      	movs	r1, r6
 800091e:	464b      	mov	r3, r9
 8000920:	4061      	eors	r1, r4
 8000922:	b2c9      	uxtb	r1, r1
 8000924:	4313      	orrs	r3, r2
 8000926:	2b0f      	cmp	r3, #15
 8000928:	d834      	bhi.n	8000994 <__aeabi_fdiv+0x160>
 800092a:	484d      	ldr	r0, [pc, #308]	; (8000a60 <__aeabi_fdiv+0x22c>)
 800092c:	009b      	lsls	r3, r3, #2
 800092e:	58c3      	ldr	r3, [r0, r3]
 8000930:	469f      	mov	pc, r3
 8000932:	2d00      	cmp	r5, #0
 8000934:	d113      	bne.n	800095e <__aeabi_fdiv+0x12a>
 8000936:	2304      	movs	r3, #4
 8000938:	4699      	mov	r9, r3
 800093a:	3b03      	subs	r3, #3
 800093c:	2700      	movs	r7, #0
 800093e:	469a      	mov	sl, r3
 8000940:	e791      	b.n	8000866 <__aeabi_fdiv+0x32>
 8000942:	2d00      	cmp	r5, #0
 8000944:	d105      	bne.n	8000952 <__aeabi_fdiv+0x11e>
 8000946:	2308      	movs	r3, #8
 8000948:	4699      	mov	r9, r3
 800094a:	3b06      	subs	r3, #6
 800094c:	27ff      	movs	r7, #255	; 0xff
 800094e:	469a      	mov	sl, r3
 8000950:	e789      	b.n	8000866 <__aeabi_fdiv+0x32>
 8000952:	230c      	movs	r3, #12
 8000954:	4699      	mov	r9, r3
 8000956:	3b09      	subs	r3, #9
 8000958:	27ff      	movs	r7, #255	; 0xff
 800095a:	469a      	mov	sl, r3
 800095c:	e783      	b.n	8000866 <__aeabi_fdiv+0x32>
 800095e:	0028      	movs	r0, r5
 8000960:	f000 fc66 	bl	8001230 <__clzsi2>
 8000964:	2776      	movs	r7, #118	; 0x76
 8000966:	1f43      	subs	r3, r0, #5
 8000968:	409d      	lsls	r5, r3
 800096a:	2300      	movs	r3, #0
 800096c:	427f      	negs	r7, r7
 800096e:	4699      	mov	r9, r3
 8000970:	469a      	mov	sl, r3
 8000972:	1a3f      	subs	r7, r7, r0
 8000974:	e777      	b.n	8000866 <__aeabi_fdiv+0x32>
 8000976:	4640      	mov	r0, r8
 8000978:	f000 fc5a 	bl	8001230 <__clzsi2>
 800097c:	4642      	mov	r2, r8
 800097e:	1f43      	subs	r3, r0, #5
 8000980:	409a      	lsls	r2, r3
 8000982:	2376      	movs	r3, #118	; 0x76
 8000984:	425b      	negs	r3, r3
 8000986:	4690      	mov	r8, r2
 8000988:	1a1b      	subs	r3, r3, r0
 800098a:	2200      	movs	r2, #0
 800098c:	e77d      	b.n	800088a <__aeabi_fdiv+0x56>
 800098e:	23ff      	movs	r3, #255	; 0xff
 8000990:	2203      	movs	r2, #3
 8000992:	e77a      	b.n	800088a <__aeabi_fdiv+0x56>
 8000994:	000e      	movs	r6, r1
 8000996:	20ff      	movs	r0, #255	; 0xff
 8000998:	2500      	movs	r5, #0
 800099a:	e7ac      	b.n	80008f6 <__aeabi_fdiv+0xc2>
 800099c:	2001      	movs	r0, #1
 800099e:	1ac0      	subs	r0, r0, r3
 80009a0:	281b      	cmp	r0, #27
 80009a2:	dca6      	bgt.n	80008f2 <__aeabi_fdiv+0xbe>
 80009a4:	379e      	adds	r7, #158	; 0x9e
 80009a6:	002a      	movs	r2, r5
 80009a8:	40bd      	lsls	r5, r7
 80009aa:	40c2      	lsrs	r2, r0
 80009ac:	1e6b      	subs	r3, r5, #1
 80009ae:	419d      	sbcs	r5, r3
 80009b0:	4315      	orrs	r5, r2
 80009b2:	076b      	lsls	r3, r5, #29
 80009b4:	d004      	beq.n	80009c0 <__aeabi_fdiv+0x18c>
 80009b6:	230f      	movs	r3, #15
 80009b8:	402b      	ands	r3, r5
 80009ba:	2b04      	cmp	r3, #4
 80009bc:	d000      	beq.n	80009c0 <__aeabi_fdiv+0x18c>
 80009be:	3504      	adds	r5, #4
 80009c0:	016b      	lsls	r3, r5, #5
 80009c2:	d544      	bpl.n	8000a4e <__aeabi_fdiv+0x21a>
 80009c4:	2001      	movs	r0, #1
 80009c6:	2500      	movs	r5, #0
 80009c8:	e795      	b.n	80008f6 <__aeabi_fdiv+0xc2>
 80009ca:	20ff      	movs	r0, #255	; 0xff
 80009cc:	2500      	movs	r5, #0
 80009ce:	e792      	b.n	80008f6 <__aeabi_fdiv+0xc2>
 80009d0:	2580      	movs	r5, #128	; 0x80
 80009d2:	2600      	movs	r6, #0
 80009d4:	20ff      	movs	r0, #255	; 0xff
 80009d6:	03ed      	lsls	r5, r5, #15
 80009d8:	e78d      	b.n	80008f6 <__aeabi_fdiv+0xc2>
 80009da:	2300      	movs	r3, #0
 80009dc:	4698      	mov	r8, r3
 80009de:	2080      	movs	r0, #128	; 0x80
 80009e0:	03c0      	lsls	r0, r0, #15
 80009e2:	4205      	tst	r5, r0
 80009e4:	d009      	beq.n	80009fa <__aeabi_fdiv+0x1c6>
 80009e6:	4643      	mov	r3, r8
 80009e8:	4203      	tst	r3, r0
 80009ea:	d106      	bne.n	80009fa <__aeabi_fdiv+0x1c6>
 80009ec:	4645      	mov	r5, r8
 80009ee:	4305      	orrs	r5, r0
 80009f0:	026d      	lsls	r5, r5, #9
 80009f2:	0026      	movs	r6, r4
 80009f4:	20ff      	movs	r0, #255	; 0xff
 80009f6:	0a6d      	lsrs	r5, r5, #9
 80009f8:	e77d      	b.n	80008f6 <__aeabi_fdiv+0xc2>
 80009fa:	2080      	movs	r0, #128	; 0x80
 80009fc:	03c0      	lsls	r0, r0, #15
 80009fe:	4305      	orrs	r5, r0
 8000a00:	026d      	lsls	r5, r5, #9
 8000a02:	20ff      	movs	r0, #255	; 0xff
 8000a04:	0a6d      	lsrs	r5, r5, #9
 8000a06:	e776      	b.n	80008f6 <__aeabi_fdiv+0xc2>
 8000a08:	4642      	mov	r2, r8
 8000a0a:	016b      	lsls	r3, r5, #5
 8000a0c:	0150      	lsls	r0, r2, #5
 8000a0e:	4283      	cmp	r3, r0
 8000a10:	d219      	bcs.n	8000a46 <__aeabi_fdiv+0x212>
 8000a12:	221b      	movs	r2, #27
 8000a14:	2500      	movs	r5, #0
 8000a16:	3f01      	subs	r7, #1
 8000a18:	2601      	movs	r6, #1
 8000a1a:	001c      	movs	r4, r3
 8000a1c:	006d      	lsls	r5, r5, #1
 8000a1e:	005b      	lsls	r3, r3, #1
 8000a20:	2c00      	cmp	r4, #0
 8000a22:	db01      	blt.n	8000a28 <__aeabi_fdiv+0x1f4>
 8000a24:	4298      	cmp	r0, r3
 8000a26:	d801      	bhi.n	8000a2c <__aeabi_fdiv+0x1f8>
 8000a28:	1a1b      	subs	r3, r3, r0
 8000a2a:	4335      	orrs	r5, r6
 8000a2c:	3a01      	subs	r2, #1
 8000a2e:	2a00      	cmp	r2, #0
 8000a30:	d1f3      	bne.n	8000a1a <__aeabi_fdiv+0x1e6>
 8000a32:	1e5a      	subs	r2, r3, #1
 8000a34:	4193      	sbcs	r3, r2
 8000a36:	431d      	orrs	r5, r3
 8000a38:	003b      	movs	r3, r7
 8000a3a:	337f      	adds	r3, #127	; 0x7f
 8000a3c:	000e      	movs	r6, r1
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	dd00      	ble.n	8000a44 <__aeabi_fdiv+0x210>
 8000a42:	e741      	b.n	80008c8 <__aeabi_fdiv+0x94>
 8000a44:	e7aa      	b.n	800099c <__aeabi_fdiv+0x168>
 8000a46:	221a      	movs	r2, #26
 8000a48:	2501      	movs	r5, #1
 8000a4a:	1a1b      	subs	r3, r3, r0
 8000a4c:	e7e4      	b.n	8000a18 <__aeabi_fdiv+0x1e4>
 8000a4e:	01ad      	lsls	r5, r5, #6
 8000a50:	2000      	movs	r0, #0
 8000a52:	0a6d      	lsrs	r5, r5, #9
 8000a54:	e74f      	b.n	80008f6 <__aeabi_fdiv+0xc2>
 8000a56:	46c0      	nop			; (mov r8, r8)
 8000a58:	08003b30 	.word	0x08003b30
 8000a5c:	f7ffffff 	.word	0xf7ffffff
 8000a60:	08003b70 	.word	0x08003b70

08000a64 <__eqsf2>:
 8000a64:	b570      	push	{r4, r5, r6, lr}
 8000a66:	0042      	lsls	r2, r0, #1
 8000a68:	0245      	lsls	r5, r0, #9
 8000a6a:	024e      	lsls	r6, r1, #9
 8000a6c:	004c      	lsls	r4, r1, #1
 8000a6e:	0fc3      	lsrs	r3, r0, #31
 8000a70:	0a6d      	lsrs	r5, r5, #9
 8000a72:	2001      	movs	r0, #1
 8000a74:	0e12      	lsrs	r2, r2, #24
 8000a76:	0a76      	lsrs	r6, r6, #9
 8000a78:	0e24      	lsrs	r4, r4, #24
 8000a7a:	0fc9      	lsrs	r1, r1, #31
 8000a7c:	2aff      	cmp	r2, #255	; 0xff
 8000a7e:	d006      	beq.n	8000a8e <__eqsf2+0x2a>
 8000a80:	2cff      	cmp	r4, #255	; 0xff
 8000a82:	d003      	beq.n	8000a8c <__eqsf2+0x28>
 8000a84:	42a2      	cmp	r2, r4
 8000a86:	d101      	bne.n	8000a8c <__eqsf2+0x28>
 8000a88:	42b5      	cmp	r5, r6
 8000a8a:	d006      	beq.n	8000a9a <__eqsf2+0x36>
 8000a8c:	bd70      	pop	{r4, r5, r6, pc}
 8000a8e:	2d00      	cmp	r5, #0
 8000a90:	d1fc      	bne.n	8000a8c <__eqsf2+0x28>
 8000a92:	2cff      	cmp	r4, #255	; 0xff
 8000a94:	d1fa      	bne.n	8000a8c <__eqsf2+0x28>
 8000a96:	2e00      	cmp	r6, #0
 8000a98:	d1f8      	bne.n	8000a8c <__eqsf2+0x28>
 8000a9a:	428b      	cmp	r3, r1
 8000a9c:	d006      	beq.n	8000aac <__eqsf2+0x48>
 8000a9e:	2001      	movs	r0, #1
 8000aa0:	2a00      	cmp	r2, #0
 8000aa2:	d1f3      	bne.n	8000a8c <__eqsf2+0x28>
 8000aa4:	0028      	movs	r0, r5
 8000aa6:	1e43      	subs	r3, r0, #1
 8000aa8:	4198      	sbcs	r0, r3
 8000aaa:	e7ef      	b.n	8000a8c <__eqsf2+0x28>
 8000aac:	2000      	movs	r0, #0
 8000aae:	e7ed      	b.n	8000a8c <__eqsf2+0x28>

08000ab0 <__gesf2>:
 8000ab0:	b570      	push	{r4, r5, r6, lr}
 8000ab2:	0042      	lsls	r2, r0, #1
 8000ab4:	0245      	lsls	r5, r0, #9
 8000ab6:	024e      	lsls	r6, r1, #9
 8000ab8:	004c      	lsls	r4, r1, #1
 8000aba:	0fc3      	lsrs	r3, r0, #31
 8000abc:	0a6d      	lsrs	r5, r5, #9
 8000abe:	0e12      	lsrs	r2, r2, #24
 8000ac0:	0a76      	lsrs	r6, r6, #9
 8000ac2:	0e24      	lsrs	r4, r4, #24
 8000ac4:	0fc8      	lsrs	r0, r1, #31
 8000ac6:	2aff      	cmp	r2, #255	; 0xff
 8000ac8:	d01b      	beq.n	8000b02 <__gesf2+0x52>
 8000aca:	2cff      	cmp	r4, #255	; 0xff
 8000acc:	d00e      	beq.n	8000aec <__gesf2+0x3c>
 8000ace:	2a00      	cmp	r2, #0
 8000ad0:	d11b      	bne.n	8000b0a <__gesf2+0x5a>
 8000ad2:	2c00      	cmp	r4, #0
 8000ad4:	d101      	bne.n	8000ada <__gesf2+0x2a>
 8000ad6:	2e00      	cmp	r6, #0
 8000ad8:	d01c      	beq.n	8000b14 <__gesf2+0x64>
 8000ada:	2d00      	cmp	r5, #0
 8000adc:	d00c      	beq.n	8000af8 <__gesf2+0x48>
 8000ade:	4283      	cmp	r3, r0
 8000ae0:	d01c      	beq.n	8000b1c <__gesf2+0x6c>
 8000ae2:	2102      	movs	r1, #2
 8000ae4:	1e58      	subs	r0, r3, #1
 8000ae6:	4008      	ands	r0, r1
 8000ae8:	3801      	subs	r0, #1
 8000aea:	bd70      	pop	{r4, r5, r6, pc}
 8000aec:	2e00      	cmp	r6, #0
 8000aee:	d122      	bne.n	8000b36 <__gesf2+0x86>
 8000af0:	2a00      	cmp	r2, #0
 8000af2:	d1f4      	bne.n	8000ade <__gesf2+0x2e>
 8000af4:	2d00      	cmp	r5, #0
 8000af6:	d1f2      	bne.n	8000ade <__gesf2+0x2e>
 8000af8:	2800      	cmp	r0, #0
 8000afa:	d1f6      	bne.n	8000aea <__gesf2+0x3a>
 8000afc:	2001      	movs	r0, #1
 8000afe:	4240      	negs	r0, r0
 8000b00:	e7f3      	b.n	8000aea <__gesf2+0x3a>
 8000b02:	2d00      	cmp	r5, #0
 8000b04:	d117      	bne.n	8000b36 <__gesf2+0x86>
 8000b06:	2cff      	cmp	r4, #255	; 0xff
 8000b08:	d0f0      	beq.n	8000aec <__gesf2+0x3c>
 8000b0a:	2c00      	cmp	r4, #0
 8000b0c:	d1e7      	bne.n	8000ade <__gesf2+0x2e>
 8000b0e:	2e00      	cmp	r6, #0
 8000b10:	d1e5      	bne.n	8000ade <__gesf2+0x2e>
 8000b12:	e7e6      	b.n	8000ae2 <__gesf2+0x32>
 8000b14:	2000      	movs	r0, #0
 8000b16:	2d00      	cmp	r5, #0
 8000b18:	d0e7      	beq.n	8000aea <__gesf2+0x3a>
 8000b1a:	e7e2      	b.n	8000ae2 <__gesf2+0x32>
 8000b1c:	42a2      	cmp	r2, r4
 8000b1e:	dc05      	bgt.n	8000b2c <__gesf2+0x7c>
 8000b20:	dbea      	blt.n	8000af8 <__gesf2+0x48>
 8000b22:	42b5      	cmp	r5, r6
 8000b24:	d802      	bhi.n	8000b2c <__gesf2+0x7c>
 8000b26:	d3e7      	bcc.n	8000af8 <__gesf2+0x48>
 8000b28:	2000      	movs	r0, #0
 8000b2a:	e7de      	b.n	8000aea <__gesf2+0x3a>
 8000b2c:	4243      	negs	r3, r0
 8000b2e:	4158      	adcs	r0, r3
 8000b30:	0040      	lsls	r0, r0, #1
 8000b32:	3801      	subs	r0, #1
 8000b34:	e7d9      	b.n	8000aea <__gesf2+0x3a>
 8000b36:	2002      	movs	r0, #2
 8000b38:	4240      	negs	r0, r0
 8000b3a:	e7d6      	b.n	8000aea <__gesf2+0x3a>

08000b3c <__lesf2>:
 8000b3c:	b570      	push	{r4, r5, r6, lr}
 8000b3e:	0042      	lsls	r2, r0, #1
 8000b40:	0245      	lsls	r5, r0, #9
 8000b42:	024e      	lsls	r6, r1, #9
 8000b44:	004c      	lsls	r4, r1, #1
 8000b46:	0fc3      	lsrs	r3, r0, #31
 8000b48:	0a6d      	lsrs	r5, r5, #9
 8000b4a:	0e12      	lsrs	r2, r2, #24
 8000b4c:	0a76      	lsrs	r6, r6, #9
 8000b4e:	0e24      	lsrs	r4, r4, #24
 8000b50:	0fc8      	lsrs	r0, r1, #31
 8000b52:	2aff      	cmp	r2, #255	; 0xff
 8000b54:	d00b      	beq.n	8000b6e <__lesf2+0x32>
 8000b56:	2cff      	cmp	r4, #255	; 0xff
 8000b58:	d00d      	beq.n	8000b76 <__lesf2+0x3a>
 8000b5a:	2a00      	cmp	r2, #0
 8000b5c:	d11f      	bne.n	8000b9e <__lesf2+0x62>
 8000b5e:	2c00      	cmp	r4, #0
 8000b60:	d116      	bne.n	8000b90 <__lesf2+0x54>
 8000b62:	2e00      	cmp	r6, #0
 8000b64:	d114      	bne.n	8000b90 <__lesf2+0x54>
 8000b66:	2000      	movs	r0, #0
 8000b68:	2d00      	cmp	r5, #0
 8000b6a:	d010      	beq.n	8000b8e <__lesf2+0x52>
 8000b6c:	e009      	b.n	8000b82 <__lesf2+0x46>
 8000b6e:	2d00      	cmp	r5, #0
 8000b70:	d10c      	bne.n	8000b8c <__lesf2+0x50>
 8000b72:	2cff      	cmp	r4, #255	; 0xff
 8000b74:	d113      	bne.n	8000b9e <__lesf2+0x62>
 8000b76:	2e00      	cmp	r6, #0
 8000b78:	d108      	bne.n	8000b8c <__lesf2+0x50>
 8000b7a:	2a00      	cmp	r2, #0
 8000b7c:	d008      	beq.n	8000b90 <__lesf2+0x54>
 8000b7e:	4283      	cmp	r3, r0
 8000b80:	d012      	beq.n	8000ba8 <__lesf2+0x6c>
 8000b82:	2102      	movs	r1, #2
 8000b84:	1e58      	subs	r0, r3, #1
 8000b86:	4008      	ands	r0, r1
 8000b88:	3801      	subs	r0, #1
 8000b8a:	e000      	b.n	8000b8e <__lesf2+0x52>
 8000b8c:	2002      	movs	r0, #2
 8000b8e:	bd70      	pop	{r4, r5, r6, pc}
 8000b90:	2d00      	cmp	r5, #0
 8000b92:	d1f4      	bne.n	8000b7e <__lesf2+0x42>
 8000b94:	2800      	cmp	r0, #0
 8000b96:	d1fa      	bne.n	8000b8e <__lesf2+0x52>
 8000b98:	2001      	movs	r0, #1
 8000b9a:	4240      	negs	r0, r0
 8000b9c:	e7f7      	b.n	8000b8e <__lesf2+0x52>
 8000b9e:	2c00      	cmp	r4, #0
 8000ba0:	d1ed      	bne.n	8000b7e <__lesf2+0x42>
 8000ba2:	2e00      	cmp	r6, #0
 8000ba4:	d1eb      	bne.n	8000b7e <__lesf2+0x42>
 8000ba6:	e7ec      	b.n	8000b82 <__lesf2+0x46>
 8000ba8:	42a2      	cmp	r2, r4
 8000baa:	dc05      	bgt.n	8000bb8 <__lesf2+0x7c>
 8000bac:	dbf2      	blt.n	8000b94 <__lesf2+0x58>
 8000bae:	42b5      	cmp	r5, r6
 8000bb0:	d802      	bhi.n	8000bb8 <__lesf2+0x7c>
 8000bb2:	d3ef      	bcc.n	8000b94 <__lesf2+0x58>
 8000bb4:	2000      	movs	r0, #0
 8000bb6:	e7ea      	b.n	8000b8e <__lesf2+0x52>
 8000bb8:	4243      	negs	r3, r0
 8000bba:	4158      	adcs	r0, r3
 8000bbc:	0040      	lsls	r0, r0, #1
 8000bbe:	3801      	subs	r0, #1
 8000bc0:	e7e5      	b.n	8000b8e <__lesf2+0x52>
 8000bc2:	46c0      	nop			; (mov r8, r8)

08000bc4 <__aeabi_fmul>:
 8000bc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bc6:	464f      	mov	r7, r9
 8000bc8:	4646      	mov	r6, r8
 8000bca:	46d6      	mov	lr, sl
 8000bcc:	0244      	lsls	r4, r0, #9
 8000bce:	0045      	lsls	r5, r0, #1
 8000bd0:	b5c0      	push	{r6, r7, lr}
 8000bd2:	0a64      	lsrs	r4, r4, #9
 8000bd4:	1c0f      	adds	r7, r1, #0
 8000bd6:	0e2d      	lsrs	r5, r5, #24
 8000bd8:	0fc6      	lsrs	r6, r0, #31
 8000bda:	2d00      	cmp	r5, #0
 8000bdc:	d100      	bne.n	8000be0 <__aeabi_fmul+0x1c>
 8000bde:	e08d      	b.n	8000cfc <__aeabi_fmul+0x138>
 8000be0:	2dff      	cmp	r5, #255	; 0xff
 8000be2:	d100      	bne.n	8000be6 <__aeabi_fmul+0x22>
 8000be4:	e092      	b.n	8000d0c <__aeabi_fmul+0x148>
 8000be6:	2300      	movs	r3, #0
 8000be8:	2080      	movs	r0, #128	; 0x80
 8000bea:	4699      	mov	r9, r3
 8000bec:	469a      	mov	sl, r3
 8000bee:	00e4      	lsls	r4, r4, #3
 8000bf0:	04c0      	lsls	r0, r0, #19
 8000bf2:	4304      	orrs	r4, r0
 8000bf4:	3d7f      	subs	r5, #127	; 0x7f
 8000bf6:	0278      	lsls	r0, r7, #9
 8000bf8:	0a43      	lsrs	r3, r0, #9
 8000bfa:	4698      	mov	r8, r3
 8000bfc:	007b      	lsls	r3, r7, #1
 8000bfe:	0e1b      	lsrs	r3, r3, #24
 8000c00:	0fff      	lsrs	r7, r7, #31
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d100      	bne.n	8000c08 <__aeabi_fmul+0x44>
 8000c06:	e070      	b.n	8000cea <__aeabi_fmul+0x126>
 8000c08:	2bff      	cmp	r3, #255	; 0xff
 8000c0a:	d100      	bne.n	8000c0e <__aeabi_fmul+0x4a>
 8000c0c:	e086      	b.n	8000d1c <__aeabi_fmul+0x158>
 8000c0e:	4642      	mov	r2, r8
 8000c10:	00d0      	lsls	r0, r2, #3
 8000c12:	2280      	movs	r2, #128	; 0x80
 8000c14:	3b7f      	subs	r3, #127	; 0x7f
 8000c16:	18ed      	adds	r5, r5, r3
 8000c18:	2300      	movs	r3, #0
 8000c1a:	04d2      	lsls	r2, r2, #19
 8000c1c:	4302      	orrs	r2, r0
 8000c1e:	4690      	mov	r8, r2
 8000c20:	469c      	mov	ip, r3
 8000c22:	0031      	movs	r1, r6
 8000c24:	464b      	mov	r3, r9
 8000c26:	4079      	eors	r1, r7
 8000c28:	1c68      	adds	r0, r5, #1
 8000c2a:	2b0f      	cmp	r3, #15
 8000c2c:	d81c      	bhi.n	8000c68 <__aeabi_fmul+0xa4>
 8000c2e:	4a76      	ldr	r2, [pc, #472]	; (8000e08 <__aeabi_fmul+0x244>)
 8000c30:	009b      	lsls	r3, r3, #2
 8000c32:	58d3      	ldr	r3, [r2, r3]
 8000c34:	469f      	mov	pc, r3
 8000c36:	0039      	movs	r1, r7
 8000c38:	4644      	mov	r4, r8
 8000c3a:	46e2      	mov	sl, ip
 8000c3c:	4653      	mov	r3, sl
 8000c3e:	2b02      	cmp	r3, #2
 8000c40:	d00f      	beq.n	8000c62 <__aeabi_fmul+0x9e>
 8000c42:	2b03      	cmp	r3, #3
 8000c44:	d100      	bne.n	8000c48 <__aeabi_fmul+0x84>
 8000c46:	e0d7      	b.n	8000df8 <__aeabi_fmul+0x234>
 8000c48:	2b01      	cmp	r3, #1
 8000c4a:	d137      	bne.n	8000cbc <__aeabi_fmul+0xf8>
 8000c4c:	2000      	movs	r0, #0
 8000c4e:	2400      	movs	r4, #0
 8000c50:	05c0      	lsls	r0, r0, #23
 8000c52:	4320      	orrs	r0, r4
 8000c54:	07c9      	lsls	r1, r1, #31
 8000c56:	4308      	orrs	r0, r1
 8000c58:	bce0      	pop	{r5, r6, r7}
 8000c5a:	46ba      	mov	sl, r7
 8000c5c:	46b1      	mov	r9, r6
 8000c5e:	46a8      	mov	r8, r5
 8000c60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c62:	20ff      	movs	r0, #255	; 0xff
 8000c64:	2400      	movs	r4, #0
 8000c66:	e7f3      	b.n	8000c50 <__aeabi_fmul+0x8c>
 8000c68:	0c26      	lsrs	r6, r4, #16
 8000c6a:	0424      	lsls	r4, r4, #16
 8000c6c:	0c22      	lsrs	r2, r4, #16
 8000c6e:	4644      	mov	r4, r8
 8000c70:	0424      	lsls	r4, r4, #16
 8000c72:	0c24      	lsrs	r4, r4, #16
 8000c74:	4643      	mov	r3, r8
 8000c76:	0027      	movs	r7, r4
 8000c78:	0c1b      	lsrs	r3, r3, #16
 8000c7a:	4357      	muls	r7, r2
 8000c7c:	4374      	muls	r4, r6
 8000c7e:	435a      	muls	r2, r3
 8000c80:	435e      	muls	r6, r3
 8000c82:	1912      	adds	r2, r2, r4
 8000c84:	0c3b      	lsrs	r3, r7, #16
 8000c86:	189b      	adds	r3, r3, r2
 8000c88:	429c      	cmp	r4, r3
 8000c8a:	d903      	bls.n	8000c94 <__aeabi_fmul+0xd0>
 8000c8c:	2280      	movs	r2, #128	; 0x80
 8000c8e:	0252      	lsls	r2, r2, #9
 8000c90:	4694      	mov	ip, r2
 8000c92:	4466      	add	r6, ip
 8000c94:	043f      	lsls	r7, r7, #16
 8000c96:	041a      	lsls	r2, r3, #16
 8000c98:	0c3f      	lsrs	r7, r7, #16
 8000c9a:	19d2      	adds	r2, r2, r7
 8000c9c:	0194      	lsls	r4, r2, #6
 8000c9e:	1e67      	subs	r7, r4, #1
 8000ca0:	41bc      	sbcs	r4, r7
 8000ca2:	0c1b      	lsrs	r3, r3, #16
 8000ca4:	0e92      	lsrs	r2, r2, #26
 8000ca6:	199b      	adds	r3, r3, r6
 8000ca8:	4314      	orrs	r4, r2
 8000caa:	019b      	lsls	r3, r3, #6
 8000cac:	431c      	orrs	r4, r3
 8000cae:	011b      	lsls	r3, r3, #4
 8000cb0:	d400      	bmi.n	8000cb4 <__aeabi_fmul+0xf0>
 8000cb2:	e09b      	b.n	8000dec <__aeabi_fmul+0x228>
 8000cb4:	2301      	movs	r3, #1
 8000cb6:	0862      	lsrs	r2, r4, #1
 8000cb8:	401c      	ands	r4, r3
 8000cba:	4314      	orrs	r4, r2
 8000cbc:	0002      	movs	r2, r0
 8000cbe:	327f      	adds	r2, #127	; 0x7f
 8000cc0:	2a00      	cmp	r2, #0
 8000cc2:	dd64      	ble.n	8000d8e <__aeabi_fmul+0x1ca>
 8000cc4:	0763      	lsls	r3, r4, #29
 8000cc6:	d004      	beq.n	8000cd2 <__aeabi_fmul+0x10e>
 8000cc8:	230f      	movs	r3, #15
 8000cca:	4023      	ands	r3, r4
 8000ccc:	2b04      	cmp	r3, #4
 8000cce:	d000      	beq.n	8000cd2 <__aeabi_fmul+0x10e>
 8000cd0:	3404      	adds	r4, #4
 8000cd2:	0123      	lsls	r3, r4, #4
 8000cd4:	d503      	bpl.n	8000cde <__aeabi_fmul+0x11a>
 8000cd6:	0002      	movs	r2, r0
 8000cd8:	4b4c      	ldr	r3, [pc, #304]	; (8000e0c <__aeabi_fmul+0x248>)
 8000cda:	3280      	adds	r2, #128	; 0x80
 8000cdc:	401c      	ands	r4, r3
 8000cde:	2afe      	cmp	r2, #254	; 0xfe
 8000ce0:	dcbf      	bgt.n	8000c62 <__aeabi_fmul+0x9e>
 8000ce2:	01a4      	lsls	r4, r4, #6
 8000ce4:	0a64      	lsrs	r4, r4, #9
 8000ce6:	b2d0      	uxtb	r0, r2
 8000ce8:	e7b2      	b.n	8000c50 <__aeabi_fmul+0x8c>
 8000cea:	4643      	mov	r3, r8
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d13d      	bne.n	8000d6c <__aeabi_fmul+0x1a8>
 8000cf0:	464a      	mov	r2, r9
 8000cf2:	3301      	adds	r3, #1
 8000cf4:	431a      	orrs	r2, r3
 8000cf6:	4691      	mov	r9, r2
 8000cf8:	469c      	mov	ip, r3
 8000cfa:	e792      	b.n	8000c22 <__aeabi_fmul+0x5e>
 8000cfc:	2c00      	cmp	r4, #0
 8000cfe:	d129      	bne.n	8000d54 <__aeabi_fmul+0x190>
 8000d00:	2304      	movs	r3, #4
 8000d02:	4699      	mov	r9, r3
 8000d04:	3b03      	subs	r3, #3
 8000d06:	2500      	movs	r5, #0
 8000d08:	469a      	mov	sl, r3
 8000d0a:	e774      	b.n	8000bf6 <__aeabi_fmul+0x32>
 8000d0c:	2c00      	cmp	r4, #0
 8000d0e:	d11b      	bne.n	8000d48 <__aeabi_fmul+0x184>
 8000d10:	2308      	movs	r3, #8
 8000d12:	4699      	mov	r9, r3
 8000d14:	3b06      	subs	r3, #6
 8000d16:	25ff      	movs	r5, #255	; 0xff
 8000d18:	469a      	mov	sl, r3
 8000d1a:	e76c      	b.n	8000bf6 <__aeabi_fmul+0x32>
 8000d1c:	4643      	mov	r3, r8
 8000d1e:	35ff      	adds	r5, #255	; 0xff
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d10b      	bne.n	8000d3c <__aeabi_fmul+0x178>
 8000d24:	2302      	movs	r3, #2
 8000d26:	464a      	mov	r2, r9
 8000d28:	431a      	orrs	r2, r3
 8000d2a:	4691      	mov	r9, r2
 8000d2c:	469c      	mov	ip, r3
 8000d2e:	e778      	b.n	8000c22 <__aeabi_fmul+0x5e>
 8000d30:	4653      	mov	r3, sl
 8000d32:	0031      	movs	r1, r6
 8000d34:	2b02      	cmp	r3, #2
 8000d36:	d000      	beq.n	8000d3a <__aeabi_fmul+0x176>
 8000d38:	e783      	b.n	8000c42 <__aeabi_fmul+0x7e>
 8000d3a:	e792      	b.n	8000c62 <__aeabi_fmul+0x9e>
 8000d3c:	2303      	movs	r3, #3
 8000d3e:	464a      	mov	r2, r9
 8000d40:	431a      	orrs	r2, r3
 8000d42:	4691      	mov	r9, r2
 8000d44:	469c      	mov	ip, r3
 8000d46:	e76c      	b.n	8000c22 <__aeabi_fmul+0x5e>
 8000d48:	230c      	movs	r3, #12
 8000d4a:	4699      	mov	r9, r3
 8000d4c:	3b09      	subs	r3, #9
 8000d4e:	25ff      	movs	r5, #255	; 0xff
 8000d50:	469a      	mov	sl, r3
 8000d52:	e750      	b.n	8000bf6 <__aeabi_fmul+0x32>
 8000d54:	0020      	movs	r0, r4
 8000d56:	f000 fa6b 	bl	8001230 <__clzsi2>
 8000d5a:	2576      	movs	r5, #118	; 0x76
 8000d5c:	1f43      	subs	r3, r0, #5
 8000d5e:	409c      	lsls	r4, r3
 8000d60:	2300      	movs	r3, #0
 8000d62:	426d      	negs	r5, r5
 8000d64:	4699      	mov	r9, r3
 8000d66:	469a      	mov	sl, r3
 8000d68:	1a2d      	subs	r5, r5, r0
 8000d6a:	e744      	b.n	8000bf6 <__aeabi_fmul+0x32>
 8000d6c:	4640      	mov	r0, r8
 8000d6e:	f000 fa5f 	bl	8001230 <__clzsi2>
 8000d72:	4642      	mov	r2, r8
 8000d74:	1f43      	subs	r3, r0, #5
 8000d76:	409a      	lsls	r2, r3
 8000d78:	2300      	movs	r3, #0
 8000d7a:	1a2d      	subs	r5, r5, r0
 8000d7c:	4690      	mov	r8, r2
 8000d7e:	469c      	mov	ip, r3
 8000d80:	3d76      	subs	r5, #118	; 0x76
 8000d82:	e74e      	b.n	8000c22 <__aeabi_fmul+0x5e>
 8000d84:	2480      	movs	r4, #128	; 0x80
 8000d86:	2100      	movs	r1, #0
 8000d88:	20ff      	movs	r0, #255	; 0xff
 8000d8a:	03e4      	lsls	r4, r4, #15
 8000d8c:	e760      	b.n	8000c50 <__aeabi_fmul+0x8c>
 8000d8e:	2301      	movs	r3, #1
 8000d90:	1a9b      	subs	r3, r3, r2
 8000d92:	2b1b      	cmp	r3, #27
 8000d94:	dd00      	ble.n	8000d98 <__aeabi_fmul+0x1d4>
 8000d96:	e759      	b.n	8000c4c <__aeabi_fmul+0x88>
 8000d98:	0022      	movs	r2, r4
 8000d9a:	309e      	adds	r0, #158	; 0x9e
 8000d9c:	40da      	lsrs	r2, r3
 8000d9e:	4084      	lsls	r4, r0
 8000da0:	0013      	movs	r3, r2
 8000da2:	1e62      	subs	r2, r4, #1
 8000da4:	4194      	sbcs	r4, r2
 8000da6:	431c      	orrs	r4, r3
 8000da8:	0763      	lsls	r3, r4, #29
 8000daa:	d004      	beq.n	8000db6 <__aeabi_fmul+0x1f2>
 8000dac:	230f      	movs	r3, #15
 8000dae:	4023      	ands	r3, r4
 8000db0:	2b04      	cmp	r3, #4
 8000db2:	d000      	beq.n	8000db6 <__aeabi_fmul+0x1f2>
 8000db4:	3404      	adds	r4, #4
 8000db6:	0163      	lsls	r3, r4, #5
 8000db8:	d51a      	bpl.n	8000df0 <__aeabi_fmul+0x22c>
 8000dba:	2001      	movs	r0, #1
 8000dbc:	2400      	movs	r4, #0
 8000dbe:	e747      	b.n	8000c50 <__aeabi_fmul+0x8c>
 8000dc0:	2080      	movs	r0, #128	; 0x80
 8000dc2:	03c0      	lsls	r0, r0, #15
 8000dc4:	4204      	tst	r4, r0
 8000dc6:	d009      	beq.n	8000ddc <__aeabi_fmul+0x218>
 8000dc8:	4643      	mov	r3, r8
 8000dca:	4203      	tst	r3, r0
 8000dcc:	d106      	bne.n	8000ddc <__aeabi_fmul+0x218>
 8000dce:	4644      	mov	r4, r8
 8000dd0:	4304      	orrs	r4, r0
 8000dd2:	0264      	lsls	r4, r4, #9
 8000dd4:	0039      	movs	r1, r7
 8000dd6:	20ff      	movs	r0, #255	; 0xff
 8000dd8:	0a64      	lsrs	r4, r4, #9
 8000dda:	e739      	b.n	8000c50 <__aeabi_fmul+0x8c>
 8000ddc:	2080      	movs	r0, #128	; 0x80
 8000dde:	03c0      	lsls	r0, r0, #15
 8000de0:	4304      	orrs	r4, r0
 8000de2:	0264      	lsls	r4, r4, #9
 8000de4:	0031      	movs	r1, r6
 8000de6:	20ff      	movs	r0, #255	; 0xff
 8000de8:	0a64      	lsrs	r4, r4, #9
 8000dea:	e731      	b.n	8000c50 <__aeabi_fmul+0x8c>
 8000dec:	0028      	movs	r0, r5
 8000dee:	e765      	b.n	8000cbc <__aeabi_fmul+0xf8>
 8000df0:	01a4      	lsls	r4, r4, #6
 8000df2:	2000      	movs	r0, #0
 8000df4:	0a64      	lsrs	r4, r4, #9
 8000df6:	e72b      	b.n	8000c50 <__aeabi_fmul+0x8c>
 8000df8:	2080      	movs	r0, #128	; 0x80
 8000dfa:	03c0      	lsls	r0, r0, #15
 8000dfc:	4304      	orrs	r4, r0
 8000dfe:	0264      	lsls	r4, r4, #9
 8000e00:	20ff      	movs	r0, #255	; 0xff
 8000e02:	0a64      	lsrs	r4, r4, #9
 8000e04:	e724      	b.n	8000c50 <__aeabi_fmul+0x8c>
 8000e06:	46c0      	nop			; (mov r8, r8)
 8000e08:	08003bb0 	.word	0x08003bb0
 8000e0c:	f7ffffff 	.word	0xf7ffffff

08000e10 <__aeabi_fsub>:
 8000e10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e12:	46ce      	mov	lr, r9
 8000e14:	4647      	mov	r7, r8
 8000e16:	0243      	lsls	r3, r0, #9
 8000e18:	0a5b      	lsrs	r3, r3, #9
 8000e1a:	024e      	lsls	r6, r1, #9
 8000e1c:	00da      	lsls	r2, r3, #3
 8000e1e:	4694      	mov	ip, r2
 8000e20:	0a72      	lsrs	r2, r6, #9
 8000e22:	4691      	mov	r9, r2
 8000e24:	0045      	lsls	r5, r0, #1
 8000e26:	004a      	lsls	r2, r1, #1
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	0e2d      	lsrs	r5, r5, #24
 8000e2c:	001f      	movs	r7, r3
 8000e2e:	0fc4      	lsrs	r4, r0, #31
 8000e30:	0e12      	lsrs	r2, r2, #24
 8000e32:	0fc9      	lsrs	r1, r1, #31
 8000e34:	09b6      	lsrs	r6, r6, #6
 8000e36:	2aff      	cmp	r2, #255	; 0xff
 8000e38:	d05b      	beq.n	8000ef2 <__aeabi_fsub+0xe2>
 8000e3a:	2001      	movs	r0, #1
 8000e3c:	4041      	eors	r1, r0
 8000e3e:	428c      	cmp	r4, r1
 8000e40:	d039      	beq.n	8000eb6 <__aeabi_fsub+0xa6>
 8000e42:	1aa8      	subs	r0, r5, r2
 8000e44:	2800      	cmp	r0, #0
 8000e46:	dd5a      	ble.n	8000efe <__aeabi_fsub+0xee>
 8000e48:	2a00      	cmp	r2, #0
 8000e4a:	d06a      	beq.n	8000f22 <__aeabi_fsub+0x112>
 8000e4c:	2dff      	cmp	r5, #255	; 0xff
 8000e4e:	d100      	bne.n	8000e52 <__aeabi_fsub+0x42>
 8000e50:	e0d9      	b.n	8001006 <__aeabi_fsub+0x1f6>
 8000e52:	2280      	movs	r2, #128	; 0x80
 8000e54:	04d2      	lsls	r2, r2, #19
 8000e56:	4316      	orrs	r6, r2
 8000e58:	281b      	cmp	r0, #27
 8000e5a:	dc00      	bgt.n	8000e5e <__aeabi_fsub+0x4e>
 8000e5c:	e0e9      	b.n	8001032 <__aeabi_fsub+0x222>
 8000e5e:	2001      	movs	r0, #1
 8000e60:	4663      	mov	r3, ip
 8000e62:	1a18      	subs	r0, r3, r0
 8000e64:	0143      	lsls	r3, r0, #5
 8000e66:	d400      	bmi.n	8000e6a <__aeabi_fsub+0x5a>
 8000e68:	e0b4      	b.n	8000fd4 <__aeabi_fsub+0x1c4>
 8000e6a:	0180      	lsls	r0, r0, #6
 8000e6c:	0987      	lsrs	r7, r0, #6
 8000e6e:	0038      	movs	r0, r7
 8000e70:	f000 f9de 	bl	8001230 <__clzsi2>
 8000e74:	3805      	subs	r0, #5
 8000e76:	4087      	lsls	r7, r0
 8000e78:	4285      	cmp	r5, r0
 8000e7a:	dc00      	bgt.n	8000e7e <__aeabi_fsub+0x6e>
 8000e7c:	e0cc      	b.n	8001018 <__aeabi_fsub+0x208>
 8000e7e:	1a2d      	subs	r5, r5, r0
 8000e80:	48b5      	ldr	r0, [pc, #724]	; (8001158 <__aeabi_fsub+0x348>)
 8000e82:	4038      	ands	r0, r7
 8000e84:	0743      	lsls	r3, r0, #29
 8000e86:	d004      	beq.n	8000e92 <__aeabi_fsub+0x82>
 8000e88:	230f      	movs	r3, #15
 8000e8a:	4003      	ands	r3, r0
 8000e8c:	2b04      	cmp	r3, #4
 8000e8e:	d000      	beq.n	8000e92 <__aeabi_fsub+0x82>
 8000e90:	3004      	adds	r0, #4
 8000e92:	0143      	lsls	r3, r0, #5
 8000e94:	d400      	bmi.n	8000e98 <__aeabi_fsub+0x88>
 8000e96:	e0a0      	b.n	8000fda <__aeabi_fsub+0x1ca>
 8000e98:	1c6a      	adds	r2, r5, #1
 8000e9a:	2dfe      	cmp	r5, #254	; 0xfe
 8000e9c:	d100      	bne.n	8000ea0 <__aeabi_fsub+0x90>
 8000e9e:	e08d      	b.n	8000fbc <__aeabi_fsub+0x1ac>
 8000ea0:	0180      	lsls	r0, r0, #6
 8000ea2:	0a47      	lsrs	r7, r0, #9
 8000ea4:	b2d2      	uxtb	r2, r2
 8000ea6:	05d0      	lsls	r0, r2, #23
 8000ea8:	4338      	orrs	r0, r7
 8000eaa:	07e4      	lsls	r4, r4, #31
 8000eac:	4320      	orrs	r0, r4
 8000eae:	bcc0      	pop	{r6, r7}
 8000eb0:	46b9      	mov	r9, r7
 8000eb2:	46b0      	mov	r8, r6
 8000eb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000eb6:	1aa8      	subs	r0, r5, r2
 8000eb8:	4680      	mov	r8, r0
 8000eba:	2800      	cmp	r0, #0
 8000ebc:	dd45      	ble.n	8000f4a <__aeabi_fsub+0x13a>
 8000ebe:	2a00      	cmp	r2, #0
 8000ec0:	d070      	beq.n	8000fa4 <__aeabi_fsub+0x194>
 8000ec2:	2dff      	cmp	r5, #255	; 0xff
 8000ec4:	d100      	bne.n	8000ec8 <__aeabi_fsub+0xb8>
 8000ec6:	e09e      	b.n	8001006 <__aeabi_fsub+0x1f6>
 8000ec8:	2380      	movs	r3, #128	; 0x80
 8000eca:	04db      	lsls	r3, r3, #19
 8000ecc:	431e      	orrs	r6, r3
 8000ece:	4643      	mov	r3, r8
 8000ed0:	2b1b      	cmp	r3, #27
 8000ed2:	dc00      	bgt.n	8000ed6 <__aeabi_fsub+0xc6>
 8000ed4:	e0d2      	b.n	800107c <__aeabi_fsub+0x26c>
 8000ed6:	2001      	movs	r0, #1
 8000ed8:	4460      	add	r0, ip
 8000eda:	0143      	lsls	r3, r0, #5
 8000edc:	d57a      	bpl.n	8000fd4 <__aeabi_fsub+0x1c4>
 8000ede:	3501      	adds	r5, #1
 8000ee0:	2dff      	cmp	r5, #255	; 0xff
 8000ee2:	d06b      	beq.n	8000fbc <__aeabi_fsub+0x1ac>
 8000ee4:	2301      	movs	r3, #1
 8000ee6:	4a9d      	ldr	r2, [pc, #628]	; (800115c <__aeabi_fsub+0x34c>)
 8000ee8:	4003      	ands	r3, r0
 8000eea:	0840      	lsrs	r0, r0, #1
 8000eec:	4010      	ands	r0, r2
 8000eee:	4318      	orrs	r0, r3
 8000ef0:	e7c8      	b.n	8000e84 <__aeabi_fsub+0x74>
 8000ef2:	2e00      	cmp	r6, #0
 8000ef4:	d020      	beq.n	8000f38 <__aeabi_fsub+0x128>
 8000ef6:	428c      	cmp	r4, r1
 8000ef8:	d023      	beq.n	8000f42 <__aeabi_fsub+0x132>
 8000efa:	0028      	movs	r0, r5
 8000efc:	38ff      	subs	r0, #255	; 0xff
 8000efe:	2800      	cmp	r0, #0
 8000f00:	d039      	beq.n	8000f76 <__aeabi_fsub+0x166>
 8000f02:	1b57      	subs	r7, r2, r5
 8000f04:	2d00      	cmp	r5, #0
 8000f06:	d000      	beq.n	8000f0a <__aeabi_fsub+0xfa>
 8000f08:	e09d      	b.n	8001046 <__aeabi_fsub+0x236>
 8000f0a:	4663      	mov	r3, ip
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d100      	bne.n	8000f12 <__aeabi_fsub+0x102>
 8000f10:	e0db      	b.n	80010ca <__aeabi_fsub+0x2ba>
 8000f12:	1e7b      	subs	r3, r7, #1
 8000f14:	2f01      	cmp	r7, #1
 8000f16:	d100      	bne.n	8000f1a <__aeabi_fsub+0x10a>
 8000f18:	e10d      	b.n	8001136 <__aeabi_fsub+0x326>
 8000f1a:	2fff      	cmp	r7, #255	; 0xff
 8000f1c:	d071      	beq.n	8001002 <__aeabi_fsub+0x1f2>
 8000f1e:	001f      	movs	r7, r3
 8000f20:	e098      	b.n	8001054 <__aeabi_fsub+0x244>
 8000f22:	2e00      	cmp	r6, #0
 8000f24:	d100      	bne.n	8000f28 <__aeabi_fsub+0x118>
 8000f26:	e0a7      	b.n	8001078 <__aeabi_fsub+0x268>
 8000f28:	1e42      	subs	r2, r0, #1
 8000f2a:	2801      	cmp	r0, #1
 8000f2c:	d100      	bne.n	8000f30 <__aeabi_fsub+0x120>
 8000f2e:	e0e6      	b.n	80010fe <__aeabi_fsub+0x2ee>
 8000f30:	28ff      	cmp	r0, #255	; 0xff
 8000f32:	d068      	beq.n	8001006 <__aeabi_fsub+0x1f6>
 8000f34:	0010      	movs	r0, r2
 8000f36:	e78f      	b.n	8000e58 <__aeabi_fsub+0x48>
 8000f38:	2001      	movs	r0, #1
 8000f3a:	4041      	eors	r1, r0
 8000f3c:	42a1      	cmp	r1, r4
 8000f3e:	d000      	beq.n	8000f42 <__aeabi_fsub+0x132>
 8000f40:	e77f      	b.n	8000e42 <__aeabi_fsub+0x32>
 8000f42:	20ff      	movs	r0, #255	; 0xff
 8000f44:	4240      	negs	r0, r0
 8000f46:	4680      	mov	r8, r0
 8000f48:	44a8      	add	r8, r5
 8000f4a:	4640      	mov	r0, r8
 8000f4c:	2800      	cmp	r0, #0
 8000f4e:	d038      	beq.n	8000fc2 <__aeabi_fsub+0x1b2>
 8000f50:	1b51      	subs	r1, r2, r5
 8000f52:	2d00      	cmp	r5, #0
 8000f54:	d100      	bne.n	8000f58 <__aeabi_fsub+0x148>
 8000f56:	e0ae      	b.n	80010b6 <__aeabi_fsub+0x2a6>
 8000f58:	2aff      	cmp	r2, #255	; 0xff
 8000f5a:	d100      	bne.n	8000f5e <__aeabi_fsub+0x14e>
 8000f5c:	e0df      	b.n	800111e <__aeabi_fsub+0x30e>
 8000f5e:	2380      	movs	r3, #128	; 0x80
 8000f60:	4660      	mov	r0, ip
 8000f62:	04db      	lsls	r3, r3, #19
 8000f64:	4318      	orrs	r0, r3
 8000f66:	4684      	mov	ip, r0
 8000f68:	291b      	cmp	r1, #27
 8000f6a:	dc00      	bgt.n	8000f6e <__aeabi_fsub+0x15e>
 8000f6c:	e0d9      	b.n	8001122 <__aeabi_fsub+0x312>
 8000f6e:	2001      	movs	r0, #1
 8000f70:	0015      	movs	r5, r2
 8000f72:	1980      	adds	r0, r0, r6
 8000f74:	e7b1      	b.n	8000eda <__aeabi_fsub+0xca>
 8000f76:	20fe      	movs	r0, #254	; 0xfe
 8000f78:	1c6a      	adds	r2, r5, #1
 8000f7a:	4210      	tst	r0, r2
 8000f7c:	d171      	bne.n	8001062 <__aeabi_fsub+0x252>
 8000f7e:	2d00      	cmp	r5, #0
 8000f80:	d000      	beq.n	8000f84 <__aeabi_fsub+0x174>
 8000f82:	e0a6      	b.n	80010d2 <__aeabi_fsub+0x2c2>
 8000f84:	4663      	mov	r3, ip
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d100      	bne.n	8000f8c <__aeabi_fsub+0x17c>
 8000f8a:	e0d9      	b.n	8001140 <__aeabi_fsub+0x330>
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	2e00      	cmp	r6, #0
 8000f90:	d100      	bne.n	8000f94 <__aeabi_fsub+0x184>
 8000f92:	e788      	b.n	8000ea6 <__aeabi_fsub+0x96>
 8000f94:	1b98      	subs	r0, r3, r6
 8000f96:	0143      	lsls	r3, r0, #5
 8000f98:	d400      	bmi.n	8000f9c <__aeabi_fsub+0x18c>
 8000f9a:	e0e1      	b.n	8001160 <__aeabi_fsub+0x350>
 8000f9c:	4663      	mov	r3, ip
 8000f9e:	000c      	movs	r4, r1
 8000fa0:	1af0      	subs	r0, r6, r3
 8000fa2:	e76f      	b.n	8000e84 <__aeabi_fsub+0x74>
 8000fa4:	2e00      	cmp	r6, #0
 8000fa6:	d100      	bne.n	8000faa <__aeabi_fsub+0x19a>
 8000fa8:	e0b7      	b.n	800111a <__aeabi_fsub+0x30a>
 8000faa:	0002      	movs	r2, r0
 8000fac:	3a01      	subs	r2, #1
 8000fae:	2801      	cmp	r0, #1
 8000fb0:	d100      	bne.n	8000fb4 <__aeabi_fsub+0x1a4>
 8000fb2:	e09c      	b.n	80010ee <__aeabi_fsub+0x2de>
 8000fb4:	28ff      	cmp	r0, #255	; 0xff
 8000fb6:	d026      	beq.n	8001006 <__aeabi_fsub+0x1f6>
 8000fb8:	4690      	mov	r8, r2
 8000fba:	e788      	b.n	8000ece <__aeabi_fsub+0xbe>
 8000fbc:	22ff      	movs	r2, #255	; 0xff
 8000fbe:	2700      	movs	r7, #0
 8000fc0:	e771      	b.n	8000ea6 <__aeabi_fsub+0x96>
 8000fc2:	20fe      	movs	r0, #254	; 0xfe
 8000fc4:	1c6a      	adds	r2, r5, #1
 8000fc6:	4210      	tst	r0, r2
 8000fc8:	d064      	beq.n	8001094 <__aeabi_fsub+0x284>
 8000fca:	2aff      	cmp	r2, #255	; 0xff
 8000fcc:	d0f6      	beq.n	8000fbc <__aeabi_fsub+0x1ac>
 8000fce:	0015      	movs	r5, r2
 8000fd0:	4466      	add	r6, ip
 8000fd2:	0870      	lsrs	r0, r6, #1
 8000fd4:	0743      	lsls	r3, r0, #29
 8000fd6:	d000      	beq.n	8000fda <__aeabi_fsub+0x1ca>
 8000fd8:	e756      	b.n	8000e88 <__aeabi_fsub+0x78>
 8000fda:	08c3      	lsrs	r3, r0, #3
 8000fdc:	2dff      	cmp	r5, #255	; 0xff
 8000fde:	d012      	beq.n	8001006 <__aeabi_fsub+0x1f6>
 8000fe0:	025b      	lsls	r3, r3, #9
 8000fe2:	0a5f      	lsrs	r7, r3, #9
 8000fe4:	b2ea      	uxtb	r2, r5
 8000fe6:	e75e      	b.n	8000ea6 <__aeabi_fsub+0x96>
 8000fe8:	4662      	mov	r2, ip
 8000fea:	2a00      	cmp	r2, #0
 8000fec:	d100      	bne.n	8000ff0 <__aeabi_fsub+0x1e0>
 8000fee:	e096      	b.n	800111e <__aeabi_fsub+0x30e>
 8000ff0:	2e00      	cmp	r6, #0
 8000ff2:	d008      	beq.n	8001006 <__aeabi_fsub+0x1f6>
 8000ff4:	2280      	movs	r2, #128	; 0x80
 8000ff6:	03d2      	lsls	r2, r2, #15
 8000ff8:	4213      	tst	r3, r2
 8000ffa:	d004      	beq.n	8001006 <__aeabi_fsub+0x1f6>
 8000ffc:	4648      	mov	r0, r9
 8000ffe:	4210      	tst	r0, r2
 8001000:	d101      	bne.n	8001006 <__aeabi_fsub+0x1f6>
 8001002:	000c      	movs	r4, r1
 8001004:	464b      	mov	r3, r9
 8001006:	2b00      	cmp	r3, #0
 8001008:	d0d8      	beq.n	8000fbc <__aeabi_fsub+0x1ac>
 800100a:	2780      	movs	r7, #128	; 0x80
 800100c:	03ff      	lsls	r7, r7, #15
 800100e:	431f      	orrs	r7, r3
 8001010:	027f      	lsls	r7, r7, #9
 8001012:	22ff      	movs	r2, #255	; 0xff
 8001014:	0a7f      	lsrs	r7, r7, #9
 8001016:	e746      	b.n	8000ea6 <__aeabi_fsub+0x96>
 8001018:	2320      	movs	r3, #32
 800101a:	003a      	movs	r2, r7
 800101c:	1b45      	subs	r5, r0, r5
 800101e:	0038      	movs	r0, r7
 8001020:	3501      	adds	r5, #1
 8001022:	40ea      	lsrs	r2, r5
 8001024:	1b5d      	subs	r5, r3, r5
 8001026:	40a8      	lsls	r0, r5
 8001028:	1e43      	subs	r3, r0, #1
 800102a:	4198      	sbcs	r0, r3
 800102c:	2500      	movs	r5, #0
 800102e:	4310      	orrs	r0, r2
 8001030:	e728      	b.n	8000e84 <__aeabi_fsub+0x74>
 8001032:	2320      	movs	r3, #32
 8001034:	1a1b      	subs	r3, r3, r0
 8001036:	0032      	movs	r2, r6
 8001038:	409e      	lsls	r6, r3
 800103a:	40c2      	lsrs	r2, r0
 800103c:	0030      	movs	r0, r6
 800103e:	1e43      	subs	r3, r0, #1
 8001040:	4198      	sbcs	r0, r3
 8001042:	4310      	orrs	r0, r2
 8001044:	e70c      	b.n	8000e60 <__aeabi_fsub+0x50>
 8001046:	2aff      	cmp	r2, #255	; 0xff
 8001048:	d0db      	beq.n	8001002 <__aeabi_fsub+0x1f2>
 800104a:	2380      	movs	r3, #128	; 0x80
 800104c:	4660      	mov	r0, ip
 800104e:	04db      	lsls	r3, r3, #19
 8001050:	4318      	orrs	r0, r3
 8001052:	4684      	mov	ip, r0
 8001054:	2f1b      	cmp	r7, #27
 8001056:	dd56      	ble.n	8001106 <__aeabi_fsub+0x2f6>
 8001058:	2001      	movs	r0, #1
 800105a:	000c      	movs	r4, r1
 800105c:	0015      	movs	r5, r2
 800105e:	1a30      	subs	r0, r6, r0
 8001060:	e700      	b.n	8000e64 <__aeabi_fsub+0x54>
 8001062:	4663      	mov	r3, ip
 8001064:	1b9f      	subs	r7, r3, r6
 8001066:	017b      	lsls	r3, r7, #5
 8001068:	d43d      	bmi.n	80010e6 <__aeabi_fsub+0x2d6>
 800106a:	2f00      	cmp	r7, #0
 800106c:	d000      	beq.n	8001070 <__aeabi_fsub+0x260>
 800106e:	e6fe      	b.n	8000e6e <__aeabi_fsub+0x5e>
 8001070:	2400      	movs	r4, #0
 8001072:	2200      	movs	r2, #0
 8001074:	2700      	movs	r7, #0
 8001076:	e716      	b.n	8000ea6 <__aeabi_fsub+0x96>
 8001078:	0005      	movs	r5, r0
 800107a:	e7af      	b.n	8000fdc <__aeabi_fsub+0x1cc>
 800107c:	0032      	movs	r2, r6
 800107e:	4643      	mov	r3, r8
 8001080:	4641      	mov	r1, r8
 8001082:	40da      	lsrs	r2, r3
 8001084:	2320      	movs	r3, #32
 8001086:	1a5b      	subs	r3, r3, r1
 8001088:	409e      	lsls	r6, r3
 800108a:	0030      	movs	r0, r6
 800108c:	1e43      	subs	r3, r0, #1
 800108e:	4198      	sbcs	r0, r3
 8001090:	4310      	orrs	r0, r2
 8001092:	e721      	b.n	8000ed8 <__aeabi_fsub+0xc8>
 8001094:	2d00      	cmp	r5, #0
 8001096:	d1a7      	bne.n	8000fe8 <__aeabi_fsub+0x1d8>
 8001098:	4663      	mov	r3, ip
 800109a:	2b00      	cmp	r3, #0
 800109c:	d059      	beq.n	8001152 <__aeabi_fsub+0x342>
 800109e:	2200      	movs	r2, #0
 80010a0:	2e00      	cmp	r6, #0
 80010a2:	d100      	bne.n	80010a6 <__aeabi_fsub+0x296>
 80010a4:	e6ff      	b.n	8000ea6 <__aeabi_fsub+0x96>
 80010a6:	0030      	movs	r0, r6
 80010a8:	4460      	add	r0, ip
 80010aa:	0143      	lsls	r3, r0, #5
 80010ac:	d592      	bpl.n	8000fd4 <__aeabi_fsub+0x1c4>
 80010ae:	4b2a      	ldr	r3, [pc, #168]	; (8001158 <__aeabi_fsub+0x348>)
 80010b0:	3501      	adds	r5, #1
 80010b2:	4018      	ands	r0, r3
 80010b4:	e78e      	b.n	8000fd4 <__aeabi_fsub+0x1c4>
 80010b6:	4663      	mov	r3, ip
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d047      	beq.n	800114c <__aeabi_fsub+0x33c>
 80010bc:	1e4b      	subs	r3, r1, #1
 80010be:	2901      	cmp	r1, #1
 80010c0:	d015      	beq.n	80010ee <__aeabi_fsub+0x2de>
 80010c2:	29ff      	cmp	r1, #255	; 0xff
 80010c4:	d02b      	beq.n	800111e <__aeabi_fsub+0x30e>
 80010c6:	0019      	movs	r1, r3
 80010c8:	e74e      	b.n	8000f68 <__aeabi_fsub+0x158>
 80010ca:	000c      	movs	r4, r1
 80010cc:	464b      	mov	r3, r9
 80010ce:	003d      	movs	r5, r7
 80010d0:	e784      	b.n	8000fdc <__aeabi_fsub+0x1cc>
 80010d2:	4662      	mov	r2, ip
 80010d4:	2a00      	cmp	r2, #0
 80010d6:	d18b      	bne.n	8000ff0 <__aeabi_fsub+0x1e0>
 80010d8:	2e00      	cmp	r6, #0
 80010da:	d192      	bne.n	8001002 <__aeabi_fsub+0x1f2>
 80010dc:	2780      	movs	r7, #128	; 0x80
 80010de:	2400      	movs	r4, #0
 80010e0:	22ff      	movs	r2, #255	; 0xff
 80010e2:	03ff      	lsls	r7, r7, #15
 80010e4:	e6df      	b.n	8000ea6 <__aeabi_fsub+0x96>
 80010e6:	4663      	mov	r3, ip
 80010e8:	000c      	movs	r4, r1
 80010ea:	1af7      	subs	r7, r6, r3
 80010ec:	e6bf      	b.n	8000e6e <__aeabi_fsub+0x5e>
 80010ee:	0030      	movs	r0, r6
 80010f0:	4460      	add	r0, ip
 80010f2:	2501      	movs	r5, #1
 80010f4:	0143      	lsls	r3, r0, #5
 80010f6:	d400      	bmi.n	80010fa <__aeabi_fsub+0x2ea>
 80010f8:	e76c      	b.n	8000fd4 <__aeabi_fsub+0x1c4>
 80010fa:	2502      	movs	r5, #2
 80010fc:	e6f2      	b.n	8000ee4 <__aeabi_fsub+0xd4>
 80010fe:	4663      	mov	r3, ip
 8001100:	2501      	movs	r5, #1
 8001102:	1b98      	subs	r0, r3, r6
 8001104:	e6ae      	b.n	8000e64 <__aeabi_fsub+0x54>
 8001106:	2320      	movs	r3, #32
 8001108:	4664      	mov	r4, ip
 800110a:	4660      	mov	r0, ip
 800110c:	40fc      	lsrs	r4, r7
 800110e:	1bdf      	subs	r7, r3, r7
 8001110:	40b8      	lsls	r0, r7
 8001112:	1e43      	subs	r3, r0, #1
 8001114:	4198      	sbcs	r0, r3
 8001116:	4320      	orrs	r0, r4
 8001118:	e79f      	b.n	800105a <__aeabi_fsub+0x24a>
 800111a:	0005      	movs	r5, r0
 800111c:	e75e      	b.n	8000fdc <__aeabi_fsub+0x1cc>
 800111e:	464b      	mov	r3, r9
 8001120:	e771      	b.n	8001006 <__aeabi_fsub+0x1f6>
 8001122:	2320      	movs	r3, #32
 8001124:	4665      	mov	r5, ip
 8001126:	4660      	mov	r0, ip
 8001128:	40cd      	lsrs	r5, r1
 800112a:	1a59      	subs	r1, r3, r1
 800112c:	4088      	lsls	r0, r1
 800112e:	1e43      	subs	r3, r0, #1
 8001130:	4198      	sbcs	r0, r3
 8001132:	4328      	orrs	r0, r5
 8001134:	e71c      	b.n	8000f70 <__aeabi_fsub+0x160>
 8001136:	4663      	mov	r3, ip
 8001138:	000c      	movs	r4, r1
 800113a:	2501      	movs	r5, #1
 800113c:	1af0      	subs	r0, r6, r3
 800113e:	e691      	b.n	8000e64 <__aeabi_fsub+0x54>
 8001140:	2e00      	cmp	r6, #0
 8001142:	d095      	beq.n	8001070 <__aeabi_fsub+0x260>
 8001144:	000c      	movs	r4, r1
 8001146:	464f      	mov	r7, r9
 8001148:	2200      	movs	r2, #0
 800114a:	e6ac      	b.n	8000ea6 <__aeabi_fsub+0x96>
 800114c:	464b      	mov	r3, r9
 800114e:	000d      	movs	r5, r1
 8001150:	e744      	b.n	8000fdc <__aeabi_fsub+0x1cc>
 8001152:	464f      	mov	r7, r9
 8001154:	2200      	movs	r2, #0
 8001156:	e6a6      	b.n	8000ea6 <__aeabi_fsub+0x96>
 8001158:	fbffffff 	.word	0xfbffffff
 800115c:	7dffffff 	.word	0x7dffffff
 8001160:	2800      	cmp	r0, #0
 8001162:	d000      	beq.n	8001166 <__aeabi_fsub+0x356>
 8001164:	e736      	b.n	8000fd4 <__aeabi_fsub+0x1c4>
 8001166:	2400      	movs	r4, #0
 8001168:	2700      	movs	r7, #0
 800116a:	e69c      	b.n	8000ea6 <__aeabi_fsub+0x96>

0800116c <__aeabi_f2iz>:
 800116c:	0241      	lsls	r1, r0, #9
 800116e:	0042      	lsls	r2, r0, #1
 8001170:	0fc3      	lsrs	r3, r0, #31
 8001172:	0a49      	lsrs	r1, r1, #9
 8001174:	2000      	movs	r0, #0
 8001176:	0e12      	lsrs	r2, r2, #24
 8001178:	2a7e      	cmp	r2, #126	; 0x7e
 800117a:	dd03      	ble.n	8001184 <__aeabi_f2iz+0x18>
 800117c:	2a9d      	cmp	r2, #157	; 0x9d
 800117e:	dd02      	ble.n	8001186 <__aeabi_f2iz+0x1a>
 8001180:	4a09      	ldr	r2, [pc, #36]	; (80011a8 <__aeabi_f2iz+0x3c>)
 8001182:	1898      	adds	r0, r3, r2
 8001184:	4770      	bx	lr
 8001186:	2080      	movs	r0, #128	; 0x80
 8001188:	0400      	lsls	r0, r0, #16
 800118a:	4301      	orrs	r1, r0
 800118c:	2a95      	cmp	r2, #149	; 0x95
 800118e:	dc07      	bgt.n	80011a0 <__aeabi_f2iz+0x34>
 8001190:	2096      	movs	r0, #150	; 0x96
 8001192:	1a82      	subs	r2, r0, r2
 8001194:	40d1      	lsrs	r1, r2
 8001196:	4248      	negs	r0, r1
 8001198:	2b00      	cmp	r3, #0
 800119a:	d1f3      	bne.n	8001184 <__aeabi_f2iz+0x18>
 800119c:	0008      	movs	r0, r1
 800119e:	e7f1      	b.n	8001184 <__aeabi_f2iz+0x18>
 80011a0:	3a96      	subs	r2, #150	; 0x96
 80011a2:	4091      	lsls	r1, r2
 80011a4:	e7f7      	b.n	8001196 <__aeabi_f2iz+0x2a>
 80011a6:	46c0      	nop			; (mov r8, r8)
 80011a8:	7fffffff 	.word	0x7fffffff

080011ac <__aeabi_ui2f>:
 80011ac:	b570      	push	{r4, r5, r6, lr}
 80011ae:	1e05      	subs	r5, r0, #0
 80011b0:	d00e      	beq.n	80011d0 <__aeabi_ui2f+0x24>
 80011b2:	f000 f83d 	bl	8001230 <__clzsi2>
 80011b6:	239e      	movs	r3, #158	; 0x9e
 80011b8:	0004      	movs	r4, r0
 80011ba:	1a1b      	subs	r3, r3, r0
 80011bc:	2b96      	cmp	r3, #150	; 0x96
 80011be:	dc0c      	bgt.n	80011da <__aeabi_ui2f+0x2e>
 80011c0:	2808      	cmp	r0, #8
 80011c2:	dd01      	ble.n	80011c8 <__aeabi_ui2f+0x1c>
 80011c4:	3c08      	subs	r4, #8
 80011c6:	40a5      	lsls	r5, r4
 80011c8:	026d      	lsls	r5, r5, #9
 80011ca:	0a6d      	lsrs	r5, r5, #9
 80011cc:	b2d8      	uxtb	r0, r3
 80011ce:	e001      	b.n	80011d4 <__aeabi_ui2f+0x28>
 80011d0:	2000      	movs	r0, #0
 80011d2:	2500      	movs	r5, #0
 80011d4:	05c0      	lsls	r0, r0, #23
 80011d6:	4328      	orrs	r0, r5
 80011d8:	bd70      	pop	{r4, r5, r6, pc}
 80011da:	2b99      	cmp	r3, #153	; 0x99
 80011dc:	dd09      	ble.n	80011f2 <__aeabi_ui2f+0x46>
 80011de:	0002      	movs	r2, r0
 80011e0:	0029      	movs	r1, r5
 80011e2:	321b      	adds	r2, #27
 80011e4:	4091      	lsls	r1, r2
 80011e6:	1e4a      	subs	r2, r1, #1
 80011e8:	4191      	sbcs	r1, r2
 80011ea:	2205      	movs	r2, #5
 80011ec:	1a12      	subs	r2, r2, r0
 80011ee:	40d5      	lsrs	r5, r2
 80011f0:	430d      	orrs	r5, r1
 80011f2:	2c05      	cmp	r4, #5
 80011f4:	dc12      	bgt.n	800121c <__aeabi_ui2f+0x70>
 80011f6:	0029      	movs	r1, r5
 80011f8:	4e0c      	ldr	r6, [pc, #48]	; (800122c <__aeabi_ui2f+0x80>)
 80011fa:	4031      	ands	r1, r6
 80011fc:	076a      	lsls	r2, r5, #29
 80011fe:	d009      	beq.n	8001214 <__aeabi_ui2f+0x68>
 8001200:	200f      	movs	r0, #15
 8001202:	4028      	ands	r0, r5
 8001204:	2804      	cmp	r0, #4
 8001206:	d005      	beq.n	8001214 <__aeabi_ui2f+0x68>
 8001208:	3104      	adds	r1, #4
 800120a:	014a      	lsls	r2, r1, #5
 800120c:	d502      	bpl.n	8001214 <__aeabi_ui2f+0x68>
 800120e:	239f      	movs	r3, #159	; 0x9f
 8001210:	4031      	ands	r1, r6
 8001212:	1b1b      	subs	r3, r3, r4
 8001214:	0189      	lsls	r1, r1, #6
 8001216:	0a4d      	lsrs	r5, r1, #9
 8001218:	b2d8      	uxtb	r0, r3
 800121a:	e7db      	b.n	80011d4 <__aeabi_ui2f+0x28>
 800121c:	1f62      	subs	r2, r4, #5
 800121e:	4095      	lsls	r5, r2
 8001220:	0029      	movs	r1, r5
 8001222:	4e02      	ldr	r6, [pc, #8]	; (800122c <__aeabi_ui2f+0x80>)
 8001224:	4031      	ands	r1, r6
 8001226:	076a      	lsls	r2, r5, #29
 8001228:	d0f4      	beq.n	8001214 <__aeabi_ui2f+0x68>
 800122a:	e7e9      	b.n	8001200 <__aeabi_ui2f+0x54>
 800122c:	fbffffff 	.word	0xfbffffff

08001230 <__clzsi2>:
 8001230:	211c      	movs	r1, #28
 8001232:	2301      	movs	r3, #1
 8001234:	041b      	lsls	r3, r3, #16
 8001236:	4298      	cmp	r0, r3
 8001238:	d301      	bcc.n	800123e <__clzsi2+0xe>
 800123a:	0c00      	lsrs	r0, r0, #16
 800123c:	3910      	subs	r1, #16
 800123e:	0a1b      	lsrs	r3, r3, #8
 8001240:	4298      	cmp	r0, r3
 8001242:	d301      	bcc.n	8001248 <__clzsi2+0x18>
 8001244:	0a00      	lsrs	r0, r0, #8
 8001246:	3908      	subs	r1, #8
 8001248:	091b      	lsrs	r3, r3, #4
 800124a:	4298      	cmp	r0, r3
 800124c:	d301      	bcc.n	8001252 <__clzsi2+0x22>
 800124e:	0900      	lsrs	r0, r0, #4
 8001250:	3904      	subs	r1, #4
 8001252:	a202      	add	r2, pc, #8	; (adr r2, 800125c <__clzsi2+0x2c>)
 8001254:	5c10      	ldrb	r0, [r2, r0]
 8001256:	1840      	adds	r0, r0, r1
 8001258:	4770      	bx	lr
 800125a:	46c0      	nop			; (mov r8, r8)
 800125c:	02020304 	.word	0x02020304
 8001260:	01010101 	.word	0x01010101
	...

0800126c <__clzdi2>:
 800126c:	b510      	push	{r4, lr}
 800126e:	2900      	cmp	r1, #0
 8001270:	d103      	bne.n	800127a <__clzdi2+0xe>
 8001272:	f7ff ffdd 	bl	8001230 <__clzsi2>
 8001276:	3020      	adds	r0, #32
 8001278:	e002      	b.n	8001280 <__clzdi2+0x14>
 800127a:	0008      	movs	r0, r1
 800127c:	f7ff ffd8 	bl	8001230 <__clzsi2>
 8001280:	bd10      	pop	{r4, pc}
 8001282:	46c0      	nop			; (mov r8, r8)

08001284 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001284:	b5b0      	push	{r4, r5, r7, lr}
 8001286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	//##############################PWM OUTPUT##############################
	ARR4 = (3200000/Frequency_output)-1;
 8001288:	4b19      	ldr	r3, [pc, #100]	; (80012f0 <main+0x6c>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	0019      	movs	r1, r3
 800128e:	4819      	ldr	r0, [pc, #100]	; (80012f4 <main+0x70>)
 8001290:	f7fe ff3a 	bl	8000108 <__udivsi3>
 8001294:	0003      	movs	r3, r0
 8001296:	1e5a      	subs	r2, r3, #1
 8001298:	4b17      	ldr	r3, [pc, #92]	; (80012f8 <main+0x74>)
 800129a:	601a      	str	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800129c:	f000 fb36 	bl	800190c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012a0:	f000 f832 	bl	8001308 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012a4:	f000 f972 	bl	800158c <MX_GPIO_Init>
  MX_ADC_Init();
 80012a8:	f000 f88a 	bl	80013c0 <MX_ADC_Init>
  MX_TIM2_Init();
 80012ac:	f000 f8ee 	bl	800148c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  //##############################PWM OUTPUT##############################
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4); //Generation initialization.
 80012b0:	4b12      	ldr	r3, [pc, #72]	; (80012fc <main+0x78>)
 80012b2:	210c      	movs	r1, #12
 80012b4:	0018      	movs	r0, r3
 80012b6:	f001 ff89 	bl	80031cc <HAL_TIM_PWM_Start>
    TIM2->CCR4 = (Duty_output*ARR4);//Duty Cycle configuration.
 80012ba:	4b0f      	ldr	r3, [pc, #60]	; (80012f8 <main+0x74>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	0018      	movs	r0, r3
 80012c0:	f7ff ff74 	bl	80011ac <__aeabi_ui2f>
 80012c4:	1c02      	adds	r2, r0, #0
 80012c6:	4b0e      	ldr	r3, [pc, #56]	; (8001300 <main+0x7c>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	1c19      	adds	r1, r3, #0
 80012cc:	1c10      	adds	r0, r2, #0
 80012ce:	f7ff fc79 	bl	8000bc4 <__aeabi_fmul>
 80012d2:	1c03      	adds	r3, r0, #0
 80012d4:	1c1a      	adds	r2, r3, #0
 80012d6:	2380      	movs	r3, #128	; 0x80
 80012d8:	05dc      	lsls	r4, r3, #23
 80012da:	1c10      	adds	r0, r2, #0
 80012dc:	f7ff f828 	bl	8000330 <__aeabi_f2uiz>
 80012e0:	0003      	movs	r3, r0
 80012e2:	6423      	str	r3, [r4, #64]	; 0x40

  //##############################ADC INPUT SENSOR##############################
  HAL_ADC_Start_IT(&hadc);
 80012e4:	4b07      	ldr	r3, [pc, #28]	; (8001304 <main+0x80>)
 80012e6:	0018      	movs	r0, r3
 80012e8:	f000 fcf4 	bl	8001cd4 <HAL_ADC_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80012ec:	e7fe      	b.n	80012ec <main+0x68>
 80012ee:	46c0      	nop			; (mov r8, r8)
 80012f0:	20000004 	.word	0x20000004
 80012f4:	0030d400 	.word	0x0030d400
 80012f8:	200000d4 	.word	0x200000d4
 80012fc:	20000090 	.word	0x20000090
 8001300:	20000008 	.word	0x20000008
 8001304:	20000034 	.word	0x20000034

08001308 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001308:	b590      	push	{r4, r7, lr}
 800130a:	b093      	sub	sp, #76	; 0x4c
 800130c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800130e:	2414      	movs	r4, #20
 8001310:	193b      	adds	r3, r7, r4
 8001312:	0018      	movs	r0, r3
 8001314:	2334      	movs	r3, #52	; 0x34
 8001316:	001a      	movs	r2, r3
 8001318:	2100      	movs	r1, #0
 800131a:	f002 fbf5 	bl	8003b08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800131e:	003b      	movs	r3, r7
 8001320:	0018      	movs	r0, r3
 8001322:	2314      	movs	r3, #20
 8001324:	001a      	movs	r2, r3
 8001326:	2100      	movs	r1, #0
 8001328:	f002 fbee 	bl	8003b08 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800132c:	4b22      	ldr	r3, [pc, #136]	; (80013b8 <SystemClock_Config+0xb0>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4a22      	ldr	r2, [pc, #136]	; (80013bc <SystemClock_Config+0xb4>)
 8001332:	401a      	ands	r2, r3
 8001334:	4b20      	ldr	r3, [pc, #128]	; (80013b8 <SystemClock_Config+0xb0>)
 8001336:	2180      	movs	r1, #128	; 0x80
 8001338:	0109      	lsls	r1, r1, #4
 800133a:	430a      	orrs	r2, r1
 800133c:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800133e:	0021      	movs	r1, r4
 8001340:	187b      	adds	r3, r7, r1
 8001342:	2202      	movs	r2, #2
 8001344:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001346:	187b      	adds	r3, r7, r1
 8001348:	2201      	movs	r2, #1
 800134a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800134c:	187b      	adds	r3, r7, r1
 800134e:	2210      	movs	r2, #16
 8001350:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001352:	187b      	adds	r3, r7, r1
 8001354:	2202      	movs	r2, #2
 8001356:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001358:	187b      	adds	r3, r7, r1
 800135a:	2200      	movs	r2, #0
 800135c:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 800135e:	187b      	adds	r3, r7, r1
 8001360:	2280      	movs	r2, #128	; 0x80
 8001362:	02d2      	lsls	r2, r2, #11
 8001364:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8001366:	187b      	adds	r3, r7, r1
 8001368:	2280      	movs	r2, #128	; 0x80
 800136a:	03d2      	lsls	r2, r2, #15
 800136c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800136e:	187b      	adds	r3, r7, r1
 8001370:	0018      	movs	r0, r3
 8001372:	f001 f939 	bl	80025e8 <HAL_RCC_OscConfig>
 8001376:	1e03      	subs	r3, r0, #0
 8001378:	d001      	beq.n	800137e <SystemClock_Config+0x76>
  {
    Error_Handler();
 800137a:	f000 f9ab 	bl	80016d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800137e:	003b      	movs	r3, r7
 8001380:	220f      	movs	r2, #15
 8001382:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001384:	003b      	movs	r3, r7
 8001386:	2203      	movs	r2, #3
 8001388:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800138a:	003b      	movs	r3, r7
 800138c:	2200      	movs	r2, #0
 800138e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001390:	003b      	movs	r3, r7
 8001392:	2200      	movs	r2, #0
 8001394:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001396:	003b      	movs	r3, r7
 8001398:	2200      	movs	r2, #0
 800139a:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800139c:	003b      	movs	r3, r7
 800139e:	2101      	movs	r1, #1
 80013a0:	0018      	movs	r0, r3
 80013a2:	f001 fc9d 	bl	8002ce0 <HAL_RCC_ClockConfig>
 80013a6:	1e03      	subs	r3, r0, #0
 80013a8:	d001      	beq.n	80013ae <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80013aa:	f000 f993 	bl	80016d4 <Error_Handler>
  }
}
 80013ae:	46c0      	nop			; (mov r8, r8)
 80013b0:	46bd      	mov	sp, r7
 80013b2:	b013      	add	sp, #76	; 0x4c
 80013b4:	bd90      	pop	{r4, r7, pc}
 80013b6:	46c0      	nop			; (mov r8, r8)
 80013b8:	40007000 	.word	0x40007000
 80013bc:	ffffe7ff 	.word	0xffffe7ff

080013c0 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b082      	sub	sp, #8
 80013c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80013c6:	003b      	movs	r3, r7
 80013c8:	0018      	movs	r0, r3
 80013ca:	2308      	movs	r3, #8
 80013cc:	001a      	movs	r2, r3
 80013ce:	2100      	movs	r1, #0
 80013d0:	f002 fb9a 	bl	8003b08 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 80013d4:	4b2a      	ldr	r3, [pc, #168]	; (8001480 <MX_ADC_Init+0xc0>)
 80013d6:	4a2b      	ldr	r2, [pc, #172]	; (8001484 <MX_ADC_Init+0xc4>)
 80013d8:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 80013da:	4b29      	ldr	r3, [pc, #164]	; (8001480 <MX_ADC_Init+0xc0>)
 80013dc:	2200      	movs	r2, #0
 80013de:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80013e0:	4b27      	ldr	r3, [pc, #156]	; (8001480 <MX_ADC_Init+0xc0>)
 80013e2:	2280      	movs	r2, #128	; 0x80
 80013e4:	05d2      	lsls	r2, r2, #23
 80013e6:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80013e8:	4b25      	ldr	r3, [pc, #148]	; (8001480 <MX_ADC_Init+0xc0>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80013ee:	4b24      	ldr	r3, [pc, #144]	; (8001480 <MX_ADC_Init+0xc0>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80013f4:	4b22      	ldr	r3, [pc, #136]	; (8001480 <MX_ADC_Init+0xc0>)
 80013f6:	2201      	movs	r2, #1
 80013f8:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80013fa:	4b21      	ldr	r3, [pc, #132]	; (8001480 <MX_ADC_Init+0xc0>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = ENABLE;
 8001400:	4b1f      	ldr	r3, [pc, #124]	; (8001480 <MX_ADC_Init+0xc0>)
 8001402:	2220      	movs	r2, #32
 8001404:	2101      	movs	r1, #1
 8001406:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8001408:	4b1d      	ldr	r3, [pc, #116]	; (8001480 <MX_ADC_Init+0xc0>)
 800140a:	2221      	movs	r2, #33	; 0x21
 800140c:	2100      	movs	r1, #0
 800140e:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001410:	4b1b      	ldr	r3, [pc, #108]	; (8001480 <MX_ADC_Init+0xc0>)
 8001412:	2200      	movs	r2, #0
 8001414:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001416:	4b1a      	ldr	r3, [pc, #104]	; (8001480 <MX_ADC_Init+0xc0>)
 8001418:	22c2      	movs	r2, #194	; 0xc2
 800141a:	32ff      	adds	r2, #255	; 0xff
 800141c:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 800141e:	4b18      	ldr	r3, [pc, #96]	; (8001480 <MX_ADC_Init+0xc0>)
 8001420:	222c      	movs	r2, #44	; 0x2c
 8001422:	2100      	movs	r1, #0
 8001424:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001426:	4b16      	ldr	r3, [pc, #88]	; (8001480 <MX_ADC_Init+0xc0>)
 8001428:	2204      	movs	r2, #4
 800142a:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800142c:	4b14      	ldr	r3, [pc, #80]	; (8001480 <MX_ADC_Init+0xc0>)
 800142e:	2200      	movs	r2, #0
 8001430:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 8001432:	4b13      	ldr	r3, [pc, #76]	; (8001480 <MX_ADC_Init+0xc0>)
 8001434:	2200      	movs	r2, #0
 8001436:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 8001438:	4b11      	ldr	r3, [pc, #68]	; (8001480 <MX_ADC_Init+0xc0>)
 800143a:	2200      	movs	r2, #0
 800143c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800143e:	4b10      	ldr	r3, [pc, #64]	; (8001480 <MX_ADC_Init+0xc0>)
 8001440:	2200      	movs	r2, #0
 8001442:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8001444:	4b0e      	ldr	r3, [pc, #56]	; (8001480 <MX_ADC_Init+0xc0>)
 8001446:	0018      	movs	r0, r3
 8001448:	f000 fad0 	bl	80019ec <HAL_ADC_Init>
 800144c:	1e03      	subs	r3, r0, #0
 800144e:	d001      	beq.n	8001454 <MX_ADC_Init+0x94>
  {
    Error_Handler();
 8001450:	f000 f940 	bl	80016d4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001454:	003b      	movs	r3, r7
 8001456:	4a0c      	ldr	r2, [pc, #48]	; (8001488 <MX_ADC_Init+0xc8>)
 8001458:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800145a:	003b      	movs	r3, r7
 800145c:	2280      	movs	r2, #128	; 0x80
 800145e:	0152      	lsls	r2, r2, #5
 8001460:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001462:	003a      	movs	r2, r7
 8001464:	4b06      	ldr	r3, [pc, #24]	; (8001480 <MX_ADC_Init+0xc0>)
 8001466:	0011      	movs	r1, r2
 8001468:	0018      	movs	r0, r3
 800146a:	f000 fd6b 	bl	8001f44 <HAL_ADC_ConfigChannel>
 800146e:	1e03      	subs	r3, r0, #0
 8001470:	d001      	beq.n	8001476 <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 8001472:	f000 f92f 	bl	80016d4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8001476:	46c0      	nop			; (mov r8, r8)
 8001478:	46bd      	mov	sp, r7
 800147a:	b002      	add	sp, #8
 800147c:	bd80      	pop	{r7, pc}
 800147e:	46c0      	nop			; (mov r8, r8)
 8001480:	20000034 	.word	0x20000034
 8001484:	40012400 	.word	0x40012400
 8001488:	10000010 	.word	0x10000010

0800148c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b08a      	sub	sp, #40	; 0x28
 8001490:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001492:	2318      	movs	r3, #24
 8001494:	18fb      	adds	r3, r7, r3
 8001496:	0018      	movs	r0, r3
 8001498:	2310      	movs	r3, #16
 800149a:	001a      	movs	r2, r3
 800149c:	2100      	movs	r1, #0
 800149e:	f002 fb33 	bl	8003b08 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014a2:	2310      	movs	r3, #16
 80014a4:	18fb      	adds	r3, r7, r3
 80014a6:	0018      	movs	r0, r3
 80014a8:	2308      	movs	r3, #8
 80014aa:	001a      	movs	r2, r3
 80014ac:	2100      	movs	r1, #0
 80014ae:	f002 fb2b 	bl	8003b08 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014b2:	003b      	movs	r3, r7
 80014b4:	0018      	movs	r0, r3
 80014b6:	2310      	movs	r3, #16
 80014b8:	001a      	movs	r2, r3
 80014ba:	2100      	movs	r1, #0
 80014bc:	f002 fb24 	bl	8003b08 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80014c0:	4b30      	ldr	r3, [pc, #192]	; (8001584 <MX_TIM2_Init+0xf8>)
 80014c2:	2280      	movs	r2, #128	; 0x80
 80014c4:	05d2      	lsls	r2, r2, #23
 80014c6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 10-1;
 80014c8:	4b2e      	ldr	r3, [pc, #184]	; (8001584 <MX_TIM2_Init+0xf8>)
 80014ca:	2209      	movs	r2, #9
 80014cc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014ce:	4b2d      	ldr	r3, [pc, #180]	; (8001584 <MX_TIM2_Init+0xf8>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = ARR4;
 80014d4:	4b2c      	ldr	r3, [pc, #176]	; (8001588 <MX_TIM2_Init+0xfc>)
 80014d6:	681a      	ldr	r2, [r3, #0]
 80014d8:	4b2a      	ldr	r3, [pc, #168]	; (8001584 <MX_TIM2_Init+0xf8>)
 80014da:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014dc:	4b29      	ldr	r3, [pc, #164]	; (8001584 <MX_TIM2_Init+0xf8>)
 80014de:	2200      	movs	r2, #0
 80014e0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80014e2:	4b28      	ldr	r3, [pc, #160]	; (8001584 <MX_TIM2_Init+0xf8>)
 80014e4:	2280      	movs	r2, #128	; 0x80
 80014e6:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80014e8:	4b26      	ldr	r3, [pc, #152]	; (8001584 <MX_TIM2_Init+0xf8>)
 80014ea:	0018      	movs	r0, r3
 80014ec:	f001 fde6 	bl	80030bc <HAL_TIM_Base_Init>
 80014f0:	1e03      	subs	r3, r0, #0
 80014f2:	d001      	beq.n	80014f8 <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 80014f4:	f000 f8ee 	bl	80016d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014f8:	2118      	movs	r1, #24
 80014fa:	187b      	adds	r3, r7, r1
 80014fc:	2280      	movs	r2, #128	; 0x80
 80014fe:	0152      	lsls	r2, r2, #5
 8001500:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001502:	187a      	adds	r2, r7, r1
 8001504:	4b1f      	ldr	r3, [pc, #124]	; (8001584 <MX_TIM2_Init+0xf8>)
 8001506:	0011      	movs	r1, r2
 8001508:	0018      	movs	r0, r3
 800150a:	f001 ffa9 	bl	8003460 <HAL_TIM_ConfigClockSource>
 800150e:	1e03      	subs	r3, r0, #0
 8001510:	d001      	beq.n	8001516 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 8001512:	f000 f8df 	bl	80016d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001516:	4b1b      	ldr	r3, [pc, #108]	; (8001584 <MX_TIM2_Init+0xf8>)
 8001518:	0018      	movs	r0, r3
 800151a:	f001 fe0f 	bl	800313c <HAL_TIM_PWM_Init>
 800151e:	1e03      	subs	r3, r0, #0
 8001520:	d001      	beq.n	8001526 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001522:	f000 f8d7 	bl	80016d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001526:	2110      	movs	r1, #16
 8001528:	187b      	adds	r3, r7, r1
 800152a:	2200      	movs	r2, #0
 800152c:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800152e:	187b      	adds	r3, r7, r1
 8001530:	2200      	movs	r2, #0
 8001532:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001534:	187a      	adds	r2, r7, r1
 8001536:	4b13      	ldr	r3, [pc, #76]	; (8001584 <MX_TIM2_Init+0xf8>)
 8001538:	0011      	movs	r1, r2
 800153a:	0018      	movs	r0, r3
 800153c:	f002 fa70 	bl	8003a20 <HAL_TIMEx_MasterConfigSynchronization>
 8001540:	1e03      	subs	r3, r0, #0
 8001542:	d001      	beq.n	8001548 <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 8001544:	f000 f8c6 	bl	80016d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001548:	003b      	movs	r3, r7
 800154a:	2260      	movs	r2, #96	; 0x60
 800154c:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800154e:	003b      	movs	r3, r7
 8001550:	2200      	movs	r2, #0
 8001552:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001554:	003b      	movs	r3, r7
 8001556:	2200      	movs	r2, #0
 8001558:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800155a:	003b      	movs	r3, r7
 800155c:	2200      	movs	r2, #0
 800155e:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001560:	0039      	movs	r1, r7
 8001562:	4b08      	ldr	r3, [pc, #32]	; (8001584 <MX_TIM2_Init+0xf8>)
 8001564:	220c      	movs	r2, #12
 8001566:	0018      	movs	r0, r3
 8001568:	f001 feb4 	bl	80032d4 <HAL_TIM_PWM_ConfigChannel>
 800156c:	1e03      	subs	r3, r0, #0
 800156e:	d001      	beq.n	8001574 <MX_TIM2_Init+0xe8>
  {
    Error_Handler();
 8001570:	f000 f8b0 	bl	80016d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001574:	4b03      	ldr	r3, [pc, #12]	; (8001584 <MX_TIM2_Init+0xf8>)
 8001576:	0018      	movs	r0, r3
 8001578:	f000 f920 	bl	80017bc <HAL_TIM_MspPostInit>

}
 800157c:	46c0      	nop			; (mov r8, r8)
 800157e:	46bd      	mov	sp, r7
 8001580:	b00a      	add	sp, #40	; 0x28
 8001582:	bd80      	pop	{r7, pc}
 8001584:	20000090 	.word	0x20000090
 8001588:	200000d4 	.word	0x200000d4

0800158c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b082      	sub	sp, #8
 8001590:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001592:	4b08      	ldr	r3, [pc, #32]	; (80015b4 <MX_GPIO_Init+0x28>)
 8001594:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001596:	4b07      	ldr	r3, [pc, #28]	; (80015b4 <MX_GPIO_Init+0x28>)
 8001598:	2101      	movs	r1, #1
 800159a:	430a      	orrs	r2, r1
 800159c:	62da      	str	r2, [r3, #44]	; 0x2c
 800159e:	4b05      	ldr	r3, [pc, #20]	; (80015b4 <MX_GPIO_Init+0x28>)
 80015a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015a2:	2201      	movs	r2, #1
 80015a4:	4013      	ands	r3, r2
 80015a6:	607b      	str	r3, [r7, #4]
 80015a8:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80015aa:	46c0      	nop			; (mov r8, r8)
 80015ac:	46bd      	mov	sp, r7
 80015ae:	b002      	add	sp, #8
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	46c0      	nop			; (mov r8, r8)
 80015b4:	40021000 	.word	0x40021000

080015b8 <linear_map>:

/* USER CODE BEGIN 4 */
float max(float a, float b){if(a>b) return a; else return b;}
float min(float a, float b){if(a>b) return b; else return a;}
float linear_map (float x, float minIN, float maxIN, float minOUT, float maxOUT){
 80015b8:	b590      	push	{r4, r7, lr}
 80015ba:	b085      	sub	sp, #20
 80015bc:	af00      	add	r7, sp, #0
 80015be:	60f8      	str	r0, [r7, #12]
 80015c0:	60b9      	str	r1, [r7, #8]
 80015c2:	607a      	str	r2, [r7, #4]
 80015c4:	603b      	str	r3, [r7, #0]
	//LINEAR MAPPING from [minIN, maxIN] to [minOUT, maxOUT]
	return (x-minIN)*(maxOUT-minOUT)/(maxIN-minIN)+minOUT;}
 80015c6:	68b9      	ldr	r1, [r7, #8]
 80015c8:	68f8      	ldr	r0, [r7, #12]
 80015ca:	f7ff fc21 	bl	8000e10 <__aeabi_fsub>
 80015ce:	1c03      	adds	r3, r0, #0
 80015d0:	1c1c      	adds	r4, r3, #0
 80015d2:	6839      	ldr	r1, [r7, #0]
 80015d4:	6a38      	ldr	r0, [r7, #32]
 80015d6:	f7ff fc1b 	bl	8000e10 <__aeabi_fsub>
 80015da:	1c03      	adds	r3, r0, #0
 80015dc:	1c19      	adds	r1, r3, #0
 80015de:	1c20      	adds	r0, r4, #0
 80015e0:	f7ff faf0 	bl	8000bc4 <__aeabi_fmul>
 80015e4:	1c03      	adds	r3, r0, #0
 80015e6:	1c1c      	adds	r4, r3, #0
 80015e8:	68b9      	ldr	r1, [r7, #8]
 80015ea:	6878      	ldr	r0, [r7, #4]
 80015ec:	f7ff fc10 	bl	8000e10 <__aeabi_fsub>
 80015f0:	1c03      	adds	r3, r0, #0
 80015f2:	1c19      	adds	r1, r3, #0
 80015f4:	1c20      	adds	r0, r4, #0
 80015f6:	f7ff f91d 	bl	8000834 <__aeabi_fdiv>
 80015fa:	1c03      	adds	r3, r0, #0
 80015fc:	6839      	ldr	r1, [r7, #0]
 80015fe:	1c18      	adds	r0, r3, #0
 8001600:	f7fe ff7a 	bl	80004f8 <__aeabi_fadd>
 8001604:	1c03      	adds	r3, r0, #0
 8001606:	1c18      	adds	r0, r3, #0
 8001608:	46bd      	mov	sp, r7
 800160a:	b005      	add	sp, #20
 800160c:	bd90      	pop	{r4, r7, pc}
	...

08001610 <HAL_ADC_ConvCpltCallback>:

//#################ADC INPUT SENSOR INTERRUPT FUNCTION########################
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc1)
{
 8001610:	b5b0      	push	{r4, r5, r7, lr}
 8001612:	b084      	sub	sp, #16
 8001614:	af02      	add	r7, sp, #8
 8001616:	6078      	str	r0, [r7, #4]
	V_meas = HAL_ADC_GetValue(hadc1);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	0018      	movs	r0, r3
 800161c:	f000 fbcc 	bl	8001db8 <HAL_ADC_GetValue>
 8001620:	0003      	movs	r3, r0
 8001622:	b29a      	uxth	r2, r3
 8001624:	4b26      	ldr	r3, [pc, #152]	; (80016c0 <HAL_ADC_ConvCpltCallback+0xb0>)
 8001626:	801a      	strh	r2, [r3, #0]
	if(V_meas > V_max){V_max=V_meas;}
 8001628:	4b25      	ldr	r3, [pc, #148]	; (80016c0 <HAL_ADC_ConvCpltCallback+0xb0>)
 800162a:	881a      	ldrh	r2, [r3, #0]
 800162c:	4b25      	ldr	r3, [pc, #148]	; (80016c4 <HAL_ADC_ConvCpltCallback+0xb4>)
 800162e:	881b      	ldrh	r3, [r3, #0]
 8001630:	429a      	cmp	r2, r3
 8001632:	d903      	bls.n	800163c <HAL_ADC_ConvCpltCallback+0x2c>
 8001634:	4b22      	ldr	r3, [pc, #136]	; (80016c0 <HAL_ADC_ConvCpltCallback+0xb0>)
 8001636:	881a      	ldrh	r2, [r3, #0]
 8001638:	4b22      	ldr	r3, [pc, #136]	; (80016c4 <HAL_ADC_ConvCpltCallback+0xb4>)
 800163a:	801a      	strh	r2, [r3, #0]
	if(V_meas < V_min){V_min=V_meas;}
 800163c:	4b20      	ldr	r3, [pc, #128]	; (80016c0 <HAL_ADC_ConvCpltCallback+0xb0>)
 800163e:	881a      	ldrh	r2, [r3, #0]
 8001640:	4b21      	ldr	r3, [pc, #132]	; (80016c8 <HAL_ADC_ConvCpltCallback+0xb8>)
 8001642:	881b      	ldrh	r3, [r3, #0]
 8001644:	429a      	cmp	r2, r3
 8001646:	d203      	bcs.n	8001650 <HAL_ADC_ConvCpltCallback+0x40>
 8001648:	4b1d      	ldr	r3, [pc, #116]	; (80016c0 <HAL_ADC_ConvCpltCallback+0xb0>)
 800164a:	881a      	ldrh	r2, [r3, #0]
 800164c:	4b1e      	ldr	r3, [pc, #120]	; (80016c8 <HAL_ADC_ConvCpltCallback+0xb8>)
 800164e:	801a      	strh	r2, [r3, #0]
	Duty_output = linear_map(V_meas, V_min,V_max, 0, 1);
 8001650:	4b1b      	ldr	r3, [pc, #108]	; (80016c0 <HAL_ADC_ConvCpltCallback+0xb0>)
 8001652:	881b      	ldrh	r3, [r3, #0]
 8001654:	0018      	movs	r0, r3
 8001656:	f7ff fda9 	bl	80011ac <__aeabi_ui2f>
 800165a:	1c04      	adds	r4, r0, #0
 800165c:	4b1a      	ldr	r3, [pc, #104]	; (80016c8 <HAL_ADC_ConvCpltCallback+0xb8>)
 800165e:	881b      	ldrh	r3, [r3, #0]
 8001660:	0018      	movs	r0, r3
 8001662:	f7ff fda3 	bl	80011ac <__aeabi_ui2f>
 8001666:	1c05      	adds	r5, r0, #0
 8001668:	4b16      	ldr	r3, [pc, #88]	; (80016c4 <HAL_ADC_ConvCpltCallback+0xb4>)
 800166a:	881b      	ldrh	r3, [r3, #0]
 800166c:	0018      	movs	r0, r3
 800166e:	f7ff fd9d 	bl	80011ac <__aeabi_ui2f>
 8001672:	1c02      	adds	r2, r0, #0
 8001674:	2100      	movs	r1, #0
 8001676:	23fe      	movs	r3, #254	; 0xfe
 8001678:	059b      	lsls	r3, r3, #22
 800167a:	9300      	str	r3, [sp, #0]
 800167c:	1c0b      	adds	r3, r1, #0
 800167e:	1c29      	adds	r1, r5, #0
 8001680:	1c20      	adds	r0, r4, #0
 8001682:	f7ff ff99 	bl	80015b8 <linear_map>
 8001686:	1c02      	adds	r2, r0, #0
 8001688:	4b10      	ldr	r3, [pc, #64]	; (80016cc <HAL_ADC_ConvCpltCallback+0xbc>)
 800168a:	601a      	str	r2, [r3, #0]
	TIM2->CCR4 = (Duty_output*ARR4);//Duty Cycle configuration.
 800168c:	4b10      	ldr	r3, [pc, #64]	; (80016d0 <HAL_ADC_ConvCpltCallback+0xc0>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	0018      	movs	r0, r3
 8001692:	f7ff fd8b 	bl	80011ac <__aeabi_ui2f>
 8001696:	1c02      	adds	r2, r0, #0
 8001698:	4b0c      	ldr	r3, [pc, #48]	; (80016cc <HAL_ADC_ConvCpltCallback+0xbc>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	1c19      	adds	r1, r3, #0
 800169e:	1c10      	adds	r0, r2, #0
 80016a0:	f7ff fa90 	bl	8000bc4 <__aeabi_fmul>
 80016a4:	1c03      	adds	r3, r0, #0
 80016a6:	1c1a      	adds	r2, r3, #0
 80016a8:	2380      	movs	r3, #128	; 0x80
 80016aa:	05dc      	lsls	r4, r3, #23
 80016ac:	1c10      	adds	r0, r2, #0
 80016ae:	f7fe fe3f 	bl	8000330 <__aeabi_f2uiz>
 80016b2:	0003      	movs	r3, r0
 80016b4:	6423      	str	r3, [r4, #64]	; 0x40
}
 80016b6:	46c0      	nop			; (mov r8, r8)
 80016b8:	46bd      	mov	sp, r7
 80016ba:	b002      	add	sp, #8
 80016bc:	bdb0      	pop	{r4, r5, r7, pc}
 80016be:	46c0      	nop			; (mov r8, r8)
 80016c0:	200000d0 	.word	0x200000d0
 80016c4:	200000d2 	.word	0x200000d2
 80016c8:	20000000 	.word	0x20000000
 80016cc:	20000008 	.word	0x20000008
 80016d0:	200000d4 	.word	0x200000d4

080016d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016d8:	b672      	cpsid	i
}
 80016da:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016dc:	e7fe      	b.n	80016dc <Error_Handler+0x8>
	...

080016e0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016e4:	4b07      	ldr	r3, [pc, #28]	; (8001704 <HAL_MspInit+0x24>)
 80016e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80016e8:	4b06      	ldr	r3, [pc, #24]	; (8001704 <HAL_MspInit+0x24>)
 80016ea:	2101      	movs	r1, #1
 80016ec:	430a      	orrs	r2, r1
 80016ee:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80016f0:	4b04      	ldr	r3, [pc, #16]	; (8001704 <HAL_MspInit+0x24>)
 80016f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80016f4:	4b03      	ldr	r3, [pc, #12]	; (8001704 <HAL_MspInit+0x24>)
 80016f6:	2180      	movs	r1, #128	; 0x80
 80016f8:	0549      	lsls	r1, r1, #21
 80016fa:	430a      	orrs	r2, r1
 80016fc:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016fe:	46c0      	nop			; (mov r8, r8)
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}
 8001704:	40021000 	.word	0x40021000

08001708 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001708:	b590      	push	{r4, r7, lr}
 800170a:	b089      	sub	sp, #36	; 0x24
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001710:	240c      	movs	r4, #12
 8001712:	193b      	adds	r3, r7, r4
 8001714:	0018      	movs	r0, r3
 8001716:	2314      	movs	r3, #20
 8001718:	001a      	movs	r2, r3
 800171a:	2100      	movs	r1, #0
 800171c:	f002 f9f4 	bl	8003b08 <memset>
  if(hadc->Instance==ADC1)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4a18      	ldr	r2, [pc, #96]	; (8001788 <HAL_ADC_MspInit+0x80>)
 8001726:	4293      	cmp	r3, r2
 8001728:	d12a      	bne.n	8001780 <HAL_ADC_MspInit+0x78>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800172a:	4b18      	ldr	r3, [pc, #96]	; (800178c <HAL_ADC_MspInit+0x84>)
 800172c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800172e:	4b17      	ldr	r3, [pc, #92]	; (800178c <HAL_ADC_MspInit+0x84>)
 8001730:	2180      	movs	r1, #128	; 0x80
 8001732:	0089      	lsls	r1, r1, #2
 8001734:	430a      	orrs	r2, r1
 8001736:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001738:	4b14      	ldr	r3, [pc, #80]	; (800178c <HAL_ADC_MspInit+0x84>)
 800173a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800173c:	4b13      	ldr	r3, [pc, #76]	; (800178c <HAL_ADC_MspInit+0x84>)
 800173e:	2101      	movs	r1, #1
 8001740:	430a      	orrs	r2, r1
 8001742:	62da      	str	r2, [r3, #44]	; 0x2c
 8001744:	4b11      	ldr	r3, [pc, #68]	; (800178c <HAL_ADC_MspInit+0x84>)
 8001746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001748:	2201      	movs	r2, #1
 800174a:	4013      	ands	r3, r2
 800174c:	60bb      	str	r3, [r7, #8]
 800174e:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PA4     ------> ADC_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001750:	193b      	adds	r3, r7, r4
 8001752:	2210      	movs	r2, #16
 8001754:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001756:	193b      	adds	r3, r7, r4
 8001758:	2203      	movs	r2, #3
 800175a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800175c:	193b      	adds	r3, r7, r4
 800175e:	2200      	movs	r2, #0
 8001760:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001762:	193a      	adds	r2, r7, r4
 8001764:	23a0      	movs	r3, #160	; 0xa0
 8001766:	05db      	lsls	r3, r3, #23
 8001768:	0011      	movs	r1, r2
 800176a:	0018      	movs	r0, r3
 800176c:	f000 fdd6 	bl	800231c <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_COMP_IRQn, 0, 0);
 8001770:	2200      	movs	r2, #0
 8001772:	2100      	movs	r1, #0
 8001774:	200c      	movs	r0, #12
 8001776:	f000 fd9f 	bl	80022b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_COMP_IRQn);
 800177a:	200c      	movs	r0, #12
 800177c:	f000 fdb1 	bl	80022e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001780:	46c0      	nop			; (mov r8, r8)
 8001782:	46bd      	mov	sp, r7
 8001784:	b009      	add	sp, #36	; 0x24
 8001786:	bd90      	pop	{r4, r7, pc}
 8001788:	40012400 	.word	0x40012400
 800178c:	40021000 	.word	0x40021000

08001790 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b082      	sub	sp, #8
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681a      	ldr	r2, [r3, #0]
 800179c:	2380      	movs	r3, #128	; 0x80
 800179e:	05db      	lsls	r3, r3, #23
 80017a0:	429a      	cmp	r2, r3
 80017a2:	d105      	bne.n	80017b0 <HAL_TIM_Base_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80017a4:	4b04      	ldr	r3, [pc, #16]	; (80017b8 <HAL_TIM_Base_MspInit+0x28>)
 80017a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80017a8:	4b03      	ldr	r3, [pc, #12]	; (80017b8 <HAL_TIM_Base_MspInit+0x28>)
 80017aa:	2101      	movs	r1, #1
 80017ac:	430a      	orrs	r2, r1
 80017ae:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80017b0:	46c0      	nop			; (mov r8, r8)
 80017b2:	46bd      	mov	sp, r7
 80017b4:	b002      	add	sp, #8
 80017b6:	bd80      	pop	{r7, pc}
 80017b8:	40021000 	.word	0x40021000

080017bc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80017bc:	b590      	push	{r4, r7, lr}
 80017be:	b089      	sub	sp, #36	; 0x24
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017c4:	240c      	movs	r4, #12
 80017c6:	193b      	adds	r3, r7, r4
 80017c8:	0018      	movs	r0, r3
 80017ca:	2314      	movs	r3, #20
 80017cc:	001a      	movs	r2, r3
 80017ce:	2100      	movs	r1, #0
 80017d0:	f002 f99a 	bl	8003b08 <memset>
  if(htim->Instance==TIM2)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681a      	ldr	r2, [r3, #0]
 80017d8:	2380      	movs	r3, #128	; 0x80
 80017da:	05db      	lsls	r3, r3, #23
 80017dc:	429a      	cmp	r2, r3
 80017de:	d122      	bne.n	8001826 <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017e0:	4b13      	ldr	r3, [pc, #76]	; (8001830 <HAL_TIM_MspPostInit+0x74>)
 80017e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017e4:	4b12      	ldr	r3, [pc, #72]	; (8001830 <HAL_TIM_MspPostInit+0x74>)
 80017e6:	2101      	movs	r1, #1
 80017e8:	430a      	orrs	r2, r1
 80017ea:	62da      	str	r2, [r3, #44]	; 0x2c
 80017ec:	4b10      	ldr	r3, [pc, #64]	; (8001830 <HAL_TIM_MspPostInit+0x74>)
 80017ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017f0:	2201      	movs	r2, #1
 80017f2:	4013      	ands	r3, r2
 80017f4:	60bb      	str	r3, [r7, #8]
 80017f6:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80017f8:	0021      	movs	r1, r4
 80017fa:	187b      	adds	r3, r7, r1
 80017fc:	2208      	movs	r2, #8
 80017fe:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001800:	187b      	adds	r3, r7, r1
 8001802:	2202      	movs	r2, #2
 8001804:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001806:	187b      	adds	r3, r7, r1
 8001808:	2200      	movs	r2, #0
 800180a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800180c:	187b      	adds	r3, r7, r1
 800180e:	2200      	movs	r2, #0
 8001810:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8001812:	187b      	adds	r3, r7, r1
 8001814:	2202      	movs	r2, #2
 8001816:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001818:	187a      	adds	r2, r7, r1
 800181a:	23a0      	movs	r3, #160	; 0xa0
 800181c:	05db      	lsls	r3, r3, #23
 800181e:	0011      	movs	r1, r2
 8001820:	0018      	movs	r0, r3
 8001822:	f000 fd7b 	bl	800231c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001826:	46c0      	nop			; (mov r8, r8)
 8001828:	46bd      	mov	sp, r7
 800182a:	b009      	add	sp, #36	; 0x24
 800182c:	bd90      	pop	{r4, r7, pc}
 800182e:	46c0      	nop			; (mov r8, r8)
 8001830:	40021000 	.word	0x40021000

08001834 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001838:	e7fe      	b.n	8001838 <NMI_Handler+0x4>

0800183a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800183a:	b580      	push	{r7, lr}
 800183c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800183e:	e7fe      	b.n	800183e <HardFault_Handler+0x4>

08001840 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001844:	46c0      	nop			; (mov r8, r8)
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}

0800184a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800184a:	b580      	push	{r7, lr}
 800184c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800184e:	46c0      	nop			; (mov r8, r8)
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}

08001854 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001858:	f000 f8ac 	bl	80019b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800185c:	46c0      	nop			; (mov r8, r8)
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}
	...

08001864 <ADC1_COMP_IRQHandler>:

/**
  * @brief This function handles ADC, COMP1 and COMP2 interrupts (COMP interrupts through EXTI lines 21 and 22).
  */
void ADC1_COMP_IRQHandler(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_COMP_IRQn 0 */

  /* USER CODE END ADC1_COMP_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc);
 8001868:	4b03      	ldr	r3, [pc, #12]	; (8001878 <ADC1_COMP_IRQHandler+0x14>)
 800186a:	0018      	movs	r0, r3
 800186c:	f000 fab0 	bl	8001dd0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_COMP_IRQn 1 */

  /* USER CODE END ADC1_COMP_IRQn 1 */
}
 8001870:	46c0      	nop			; (mov r8, r8)
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}
 8001876:	46c0      	nop			; (mov r8, r8)
 8001878:	20000034 	.word	0x20000034

0800187c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001880:	46c0      	nop			; (mov r8, r8)
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}
	...

08001888 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8001888:	4813      	ldr	r0, [pc, #76]	; (80018d8 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 800188a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 800188c:	f7ff fff6 	bl	800187c <SystemInit>

/*Check if boot space corresponds to system memory*/

    LDR R0,=0x00000004
 8001890:	4812      	ldr	r0, [pc, #72]	; (80018dc <LoopForever+0x6>)
    LDR R1, [R0]
 8001892:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8001894:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8001896:	4a12      	ldr	r2, [pc, #72]	; (80018e0 <LoopForever+0xa>)
    CMP R1, R2
 8001898:	4291      	cmp	r1, r2
    BNE ApplicationStart
 800189a:	d105      	bne.n	80018a8 <ApplicationStart>

 /*SYSCFG clock enable*/
    LDR R0,=0x40021034
 800189c:	4811      	ldr	r0, [pc, #68]	; (80018e4 <LoopForever+0xe>)
    LDR R1,=0x00000001
 800189e:	4912      	ldr	r1, [pc, #72]	; (80018e8 <LoopForever+0x12>)
    STR R1, [R0]
 80018a0:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 80018a2:	4812      	ldr	r0, [pc, #72]	; (80018ec <LoopForever+0x16>)
    LDR R1,=0x00000000
 80018a4:	4912      	ldr	r1, [pc, #72]	; (80018f0 <LoopForever+0x1a>)
    STR R1, [R0]
 80018a6:	6001      	str	r1, [r0, #0]

080018a8 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80018a8:	4812      	ldr	r0, [pc, #72]	; (80018f4 <LoopForever+0x1e>)
  ldr r1, =_edata
 80018aa:	4913      	ldr	r1, [pc, #76]	; (80018f8 <LoopForever+0x22>)
  ldr r2, =_sidata
 80018ac:	4a13      	ldr	r2, [pc, #76]	; (80018fc <LoopForever+0x26>)
  movs r3, #0
 80018ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018b0:	e002      	b.n	80018b8 <LoopCopyDataInit>

080018b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018b6:	3304      	adds	r3, #4

080018b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018bc:	d3f9      	bcc.n	80018b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018be:	4a10      	ldr	r2, [pc, #64]	; (8001900 <LoopForever+0x2a>)
  ldr r4, =_ebss
 80018c0:	4c10      	ldr	r4, [pc, #64]	; (8001904 <LoopForever+0x2e>)
  movs r3, #0
 80018c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018c4:	e001      	b.n	80018ca <LoopFillZerobss>

080018c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018c8:	3204      	adds	r2, #4

080018ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018cc:	d3fb      	bcc.n	80018c6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80018ce:	f002 f8f7 	bl	8003ac0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80018d2:	f7ff fcd7 	bl	8001284 <main>

080018d6 <LoopForever>:

LoopForever:
    b LoopForever
 80018d6:	e7fe      	b.n	80018d6 <LoopForever>
   ldr   r0, =_estack
 80018d8:	20000800 	.word	0x20000800
    LDR R0,=0x00000004
 80018dc:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 80018e0:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021034
 80018e4:	40021034 	.word	0x40021034
    LDR R1,=0x00000001
 80018e8:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 80018ec:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 80018f0:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 80018f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018f8:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 80018fc:	08003c1c 	.word	0x08003c1c
  ldr r2, =_sbss
 8001900:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8001904:	200000dc 	.word	0x200000dc

08001908 <DMA1_Channel1_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001908:	e7fe      	b.n	8001908 <DMA1_Channel1_IRQHandler>
	...

0800190c <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b082      	sub	sp, #8
 8001910:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001912:	1dfb      	adds	r3, r7, #7
 8001914:	2200      	movs	r2, #0
 8001916:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8001918:	4b0b      	ldr	r3, [pc, #44]	; (8001948 <HAL_Init+0x3c>)
 800191a:	681a      	ldr	r2, [r3, #0]
 800191c:	4b0a      	ldr	r3, [pc, #40]	; (8001948 <HAL_Init+0x3c>)
 800191e:	2140      	movs	r1, #64	; 0x40
 8001920:	430a      	orrs	r2, r1
 8001922:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001924:	2003      	movs	r0, #3
 8001926:	f000 f811 	bl	800194c <HAL_InitTick>
 800192a:	1e03      	subs	r3, r0, #0
 800192c:	d003      	beq.n	8001936 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 800192e:	1dfb      	adds	r3, r7, #7
 8001930:	2201      	movs	r2, #1
 8001932:	701a      	strb	r2, [r3, #0]
 8001934:	e001      	b.n	800193a <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001936:	f7ff fed3 	bl	80016e0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800193a:	1dfb      	adds	r3, r7, #7
 800193c:	781b      	ldrb	r3, [r3, #0]
}
 800193e:	0018      	movs	r0, r3
 8001940:	46bd      	mov	sp, r7
 8001942:	b002      	add	sp, #8
 8001944:	bd80      	pop	{r7, pc}
 8001946:	46c0      	nop			; (mov r8, r8)
 8001948:	40022000 	.word	0x40022000

0800194c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800194c:	b590      	push	{r4, r7, lr}
 800194e:	b083      	sub	sp, #12
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001954:	4b14      	ldr	r3, [pc, #80]	; (80019a8 <HAL_InitTick+0x5c>)
 8001956:	681c      	ldr	r4, [r3, #0]
 8001958:	4b14      	ldr	r3, [pc, #80]	; (80019ac <HAL_InitTick+0x60>)
 800195a:	781b      	ldrb	r3, [r3, #0]
 800195c:	0019      	movs	r1, r3
 800195e:	23fa      	movs	r3, #250	; 0xfa
 8001960:	0098      	lsls	r0, r3, #2
 8001962:	f7fe fbd1 	bl	8000108 <__udivsi3>
 8001966:	0003      	movs	r3, r0
 8001968:	0019      	movs	r1, r3
 800196a:	0020      	movs	r0, r4
 800196c:	f7fe fbcc 	bl	8000108 <__udivsi3>
 8001970:	0003      	movs	r3, r0
 8001972:	0018      	movs	r0, r3
 8001974:	f000 fcc5 	bl	8002302 <HAL_SYSTICK_Config>
 8001978:	1e03      	subs	r3, r0, #0
 800197a:	d001      	beq.n	8001980 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800197c:	2301      	movs	r3, #1
 800197e:	e00f      	b.n	80019a0 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	2b03      	cmp	r3, #3
 8001984:	d80b      	bhi.n	800199e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001986:	6879      	ldr	r1, [r7, #4]
 8001988:	2301      	movs	r3, #1
 800198a:	425b      	negs	r3, r3
 800198c:	2200      	movs	r2, #0
 800198e:	0018      	movs	r0, r3
 8001990:	f000 fc92 	bl	80022b8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001994:	4b06      	ldr	r3, [pc, #24]	; (80019b0 <HAL_InitTick+0x64>)
 8001996:	687a      	ldr	r2, [r7, #4]
 8001998:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800199a:	2300      	movs	r3, #0
 800199c:	e000      	b.n	80019a0 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800199e:	2301      	movs	r3, #1
}
 80019a0:	0018      	movs	r0, r3
 80019a2:	46bd      	mov	sp, r7
 80019a4:	b003      	add	sp, #12
 80019a6:	bd90      	pop	{r4, r7, pc}
 80019a8:	2000000c 	.word	0x2000000c
 80019ac:	20000014 	.word	0x20000014
 80019b0:	20000010 	.word	0x20000010

080019b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019b8:	4b05      	ldr	r3, [pc, #20]	; (80019d0 <HAL_IncTick+0x1c>)
 80019ba:	781b      	ldrb	r3, [r3, #0]
 80019bc:	001a      	movs	r2, r3
 80019be:	4b05      	ldr	r3, [pc, #20]	; (80019d4 <HAL_IncTick+0x20>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	18d2      	adds	r2, r2, r3
 80019c4:	4b03      	ldr	r3, [pc, #12]	; (80019d4 <HAL_IncTick+0x20>)
 80019c6:	601a      	str	r2, [r3, #0]
}
 80019c8:	46c0      	nop			; (mov r8, r8)
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	46c0      	nop			; (mov r8, r8)
 80019d0:	20000014 	.word	0x20000014
 80019d4:	200000d8 	.word	0x200000d8

080019d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	af00      	add	r7, sp, #0
  return uwTick;
 80019dc:	4b02      	ldr	r3, [pc, #8]	; (80019e8 <HAL_GetTick+0x10>)
 80019de:	681b      	ldr	r3, [r3, #0]
}
 80019e0:	0018      	movs	r0, r3
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	46c0      	nop			; (mov r8, r8)
 80019e8:	200000d8 	.word	0x200000d8

080019ec <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b082      	sub	sp, #8
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d101      	bne.n	80019fe <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 80019fa:	2301      	movs	r3, #1
 80019fc:	e159      	b.n	8001cb2 <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d10a      	bne.n	8001a1c <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	2200      	movs	r2, #0
 8001a0a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2250      	movs	r2, #80	; 0x50
 8001a10:	2100      	movs	r1, #0
 8001a12:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	0018      	movs	r0, r3
 8001a18:	f7ff fe76 	bl	8001708 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a20:	2210      	movs	r2, #16
 8001a22:	4013      	ands	r3, r2
 8001a24:	2b10      	cmp	r3, #16
 8001a26:	d005      	beq.n	8001a34 <HAL_ADC_Init+0x48>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET))
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	689b      	ldr	r3, [r3, #8]
 8001a2e:	2204      	movs	r2, #4
 8001a30:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8001a32:	d00b      	beq.n	8001a4c <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a38:	2210      	movs	r2, #16
 8001a3a:	431a      	orrs	r2, r3
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2250      	movs	r2, #80	; 0x50
 8001a44:	2100      	movs	r1, #0
 8001a46:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8001a48:	2301      	movs	r3, #1
 8001a4a:	e132      	b.n	8001cb2 <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a50:	4a9a      	ldr	r2, [pc, #616]	; (8001cbc <HAL_ADC_Init+0x2d0>)
 8001a52:	4013      	ands	r3, r2
 8001a54:	2202      	movs	r2, #2
 8001a56:	431a      	orrs	r2, r3
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	655a      	str	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	689b      	ldr	r3, [r3, #8]
 8001a62:	2203      	movs	r2, #3
 8001a64:	4013      	ands	r3, r2
 8001a66:	2b01      	cmp	r3, #1
 8001a68:	d108      	bne.n	8001a7c <HAL_ADC_Init+0x90>
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	2201      	movs	r2, #1
 8001a72:	4013      	ands	r3, r2
 8001a74:	2b01      	cmp	r3, #1
 8001a76:	d101      	bne.n	8001a7c <HAL_ADC_Init+0x90>
 8001a78:	2301      	movs	r3, #1
 8001a7a:	e000      	b.n	8001a7e <HAL_ADC_Init+0x92>
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d149      	bne.n	8001b16 <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */

    /* Configuration of ADC clock: clock source PCLK or asynchronous with
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	685a      	ldr	r2, [r3, #4]
 8001a86:	23c0      	movs	r3, #192	; 0xc0
 8001a88:	061b      	lsls	r3, r3, #24
 8001a8a:	429a      	cmp	r2, r3
 8001a8c:	d00b      	beq.n	8001aa6 <HAL_ADC_Init+0xba>
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	685a      	ldr	r2, [r3, #4]
 8001a92:	2380      	movs	r3, #128	; 0x80
 8001a94:	05db      	lsls	r3, r3, #23
 8001a96:	429a      	cmp	r2, r3
 8001a98:	d005      	beq.n	8001aa6 <HAL_ADC_Init+0xba>
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	685a      	ldr	r2, [r3, #4]
 8001a9e:	2380      	movs	r3, #128	; 0x80
 8001aa0:	061b      	lsls	r3, r3, #24
 8001aa2:	429a      	cmp	r2, r3
 8001aa4:	d111      	bne.n	8001aca <HAL_ADC_Init+0xde>
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	691a      	ldr	r2, [r3, #16]
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	0092      	lsls	r2, r2, #2
 8001ab2:	0892      	lsrs	r2, r2, #2
 8001ab4:	611a      	str	r2, [r3, #16]
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	6919      	ldr	r1, [r3, #16]
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	685a      	ldr	r2, [r3, #4]
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	430a      	orrs	r2, r1
 8001ac6:	611a      	str	r2, [r3, #16]
 8001ac8:	e014      	b.n	8001af4 <HAL_ADC_Init+0x108>
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	691a      	ldr	r2, [r3, #16]
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	0092      	lsls	r2, r2, #2
 8001ad6:	0892      	lsrs	r2, r2, #2
 8001ad8:	611a      	str	r2, [r3, #16]
 8001ada:	4b79      	ldr	r3, [pc, #484]	; (8001cc0 <HAL_ADC_Init+0x2d4>)
 8001adc:	681a      	ldr	r2, [r3, #0]
 8001ade:	4b78      	ldr	r3, [pc, #480]	; (8001cc0 <HAL_ADC_Init+0x2d4>)
 8001ae0:	4978      	ldr	r1, [pc, #480]	; (8001cc4 <HAL_ADC_Init+0x2d8>)
 8001ae2:	400a      	ands	r2, r1
 8001ae4:	601a      	str	r2, [r3, #0]
 8001ae6:	4b76      	ldr	r3, [pc, #472]	; (8001cc0 <HAL_ADC_Init+0x2d4>)
 8001ae8:	6819      	ldr	r1, [r3, #0]
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	685a      	ldr	r2, [r3, #4]
 8001aee:	4b74      	ldr	r3, [pc, #464]	; (8001cc0 <HAL_ADC_Init+0x2d4>)
 8001af0:	430a      	orrs	r2, r1
 8001af2:	601a      	str	r2, [r3, #0]

    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_RES);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	68da      	ldr	r2, [r3, #12]
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	2118      	movs	r1, #24
 8001b00:	438a      	bics	r2, r1
 8001b02:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	68d9      	ldr	r1, [r3, #12]
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	689a      	ldr	r2, [r3, #8]
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	430a      	orrs	r2, r1
 8001b14:	60da      	str	r2, [r3, #12]
  }

  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8001b16:	4b6a      	ldr	r3, [pc, #424]	; (8001cc0 <HAL_ADC_Init+0x2d4>)
 8001b18:	681a      	ldr	r2, [r3, #0]
 8001b1a:	4b69      	ldr	r3, [pc, #420]	; (8001cc0 <HAL_ADC_Init+0x2d4>)
 8001b1c:	496a      	ldr	r1, [pc, #424]	; (8001cc8 <HAL_ADC_Init+0x2dc>)
 8001b1e:	400a      	ands	r2, r1
 8001b20:	601a      	str	r2, [r3, #0]
  ADC->CCR |= __HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);
 8001b22:	4b67      	ldr	r3, [pc, #412]	; (8001cc0 <HAL_ADC_Init+0x2d4>)
 8001b24:	6819      	ldr	r1, [r3, #0]
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b2a:	065a      	lsls	r2, r3, #25
 8001b2c:	4b64      	ldr	r3, [pc, #400]	; (8001cc0 <HAL_ADC_Init+0x2d4>)
 8001b2e:	430a      	orrs	r2, r1
 8001b30:	601a      	str	r2, [r3, #0]

  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	689a      	ldr	r2, [r3, #8]
 8001b38:	2380      	movs	r3, #128	; 0x80
 8001b3a:	055b      	lsls	r3, r3, #21
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	d108      	bne.n	8001b52 <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	689a      	ldr	r2, [r3, #8]
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	2180      	movs	r1, #128	; 0x80
 8001b4c:	0549      	lsls	r1, r1, #21
 8001b4e:	430a      	orrs	r2, r1
 8001b50:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	68da      	ldr	r2, [r3, #12]
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	495b      	ldr	r1, [pc, #364]	; (8001ccc <HAL_ADC_Init+0x2e0>)
 8001b5e:	400a      	ands	r2, r1
 8001b60:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN);

  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	68d9      	ldr	r1, [r3, #12]
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	691b      	ldr	r3, [r3, #16]
 8001b70:	2b02      	cmp	r3, #2
 8001b72:	d101      	bne.n	8001b78 <HAL_ADC_Init+0x18c>
 8001b74:	2304      	movs	r3, #4
 8001b76:	e000      	b.n	8001b7a <HAL_ADC_Init+0x18e>
 8001b78:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8001b7a:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2020      	movs	r0, #32
 8001b80:	5c1b      	ldrb	r3, [r3, r0]
 8001b82:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8001b84:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	202c      	movs	r0, #44	; 0x2c
 8001b8a:	5c1b      	ldrb	r3, [r3, r0]
 8001b8c:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001b8e:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001b94:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	699b      	ldr	r3, [r3, #24]
 8001b9a:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 8001b9c:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	69db      	ldr	r3, [r3, #28]
 8001ba2:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8001ba4:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	430a      	orrs	r2, r1
 8001bac:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001bb2:	23c2      	movs	r3, #194	; 0xc2
 8001bb4:	33ff      	adds	r3, #255	; 0xff
 8001bb6:	429a      	cmp	r2, r3
 8001bb8:	d00b      	beq.n	8001bd2 <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	68d9      	ldr	r1, [r3, #12]
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8001bc8:	431a      	orrs	r2, r3
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	430a      	orrs	r2, r1
 8001bd0:	60da      	str	r2, [r3, #12]
  }

  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2221      	movs	r2, #33	; 0x21
 8001bd6:	5c9b      	ldrb	r3, [r3, r2]
 8001bd8:	2b01      	cmp	r3, #1
 8001bda:	d11a      	bne.n	8001c12 <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2220      	movs	r2, #32
 8001be0:	5c9b      	ldrb	r3, [r3, r2]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d109      	bne.n	8001bfa <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	68da      	ldr	r2, [r3, #12]
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	2180      	movs	r1, #128	; 0x80
 8001bf2:	0249      	lsls	r1, r1, #9
 8001bf4:	430a      	orrs	r2, r1
 8001bf6:	60da      	str	r2, [r3, #12]
 8001bf8:	e00b      	b.n	8001c12 <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */

      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bfe:	2220      	movs	r2, #32
 8001c00:	431a      	orrs	r2, r3
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c0a:	2201      	movs	r2, #1
 8001c0c:	431a      	orrs	r2, r3
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  if (hadc->Init.OversamplingMode == ENABLE)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c16:	2b01      	cmp	r3, #1
 8001c18:	d11f      	bne.n	8001c5a <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */

    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_OVSR |
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	691a      	ldr	r2, [r3, #16]
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	492a      	ldr	r1, [pc, #168]	; (8001cd0 <HAL_ADC_Init+0x2e4>)
 8001c26:	400a      	ands	r2, r1
 8001c28:	611a      	str	r2, [r3, #16]
                               ADC_CFGR2_OVSS |
                               ADC_CFGR2_TOVS);

    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	6919      	ldr	r1, [r3, #16]
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                              hadc->Init.Oversample.RightBitShift             |
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8001c38:	431a      	orrs	r2, r3
                              hadc->Init.Oversample.TriggeredMode);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                              hadc->Init.Oversample.RightBitShift             |
 8001c3e:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	430a      	orrs	r2, r1
 8001c46:	611a      	str	r2, [r3, #16]

    /* Enable OverSampling mode */
    hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	691a      	ldr	r2, [r3, #16]
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	2101      	movs	r1, #1
 8001c54:	430a      	orrs	r2, r1
 8001c56:	611a      	str	r2, [r3, #16]
 8001c58:	e00e      	b.n	8001c78 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	691b      	ldr	r3, [r3, #16]
 8001c60:	2201      	movs	r2, #1
 8001c62:	4013      	ands	r3, r2
 8001c64:	2b01      	cmp	r3, #1
 8001c66:	d107      	bne.n	8001c78 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	691a      	ldr	r2, [r3, #16]
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	2101      	movs	r1, #1
 8001c74:	438a      	bics	r2, r1
 8001c76:	611a      	str	r2, [r3, #16]
    }
  }

  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	695a      	ldr	r2, [r3, #20]
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	2107      	movs	r1, #7
 8001c84:	438a      	bics	r2, r1
 8001c86:	615a      	str	r2, [r3, #20]

  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	6959      	ldr	r1, [r3, #20]
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	430a      	orrs	r2, r1
 8001c98:	615a      	str	r2, [r3, #20]

  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ca4:	2203      	movs	r2, #3
 8001ca6:	4393      	bics	r3, r2
 8001ca8:	2201      	movs	r2, #1
 8001caa:	431a      	orrs	r2, r3
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	655a      	str	r2, [r3, #84]	; 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8001cb0:	2300      	movs	r3, #0
}
 8001cb2:	0018      	movs	r0, r3
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	b002      	add	sp, #8
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	46c0      	nop			; (mov r8, r8)
 8001cbc:	fffffefd 	.word	0xfffffefd
 8001cc0:	40012708 	.word	0x40012708
 8001cc4:	ffc3ffff 	.word	0xffc3ffff
 8001cc8:	fdffffff 	.word	0xfdffffff
 8001ccc:	fffe0219 	.word	0xfffe0219
 8001cd0:	fffffc03 	.word	0xfffffc03

08001cd4 <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8001cd4:	b590      	push	{r4, r7, lr}
 8001cd6:	b085      	sub	sp, #20
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001cdc:	230f      	movs	r3, #15
 8001cde:	18fb      	adds	r3, r7, r3
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	689b      	ldr	r3, [r3, #8]
 8001cea:	2204      	movs	r2, #4
 8001cec:	4013      	ands	r3, r2
 8001cee:	d156      	bne.n	8001d9e <HAL_ADC_Start_IT+0xca>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2250      	movs	r2, #80	; 0x50
 8001cf4:	5c9b      	ldrb	r3, [r3, r2]
 8001cf6:	2b01      	cmp	r3, #1
 8001cf8:	d101      	bne.n	8001cfe <HAL_ADC_Start_IT+0x2a>
 8001cfa:	2302      	movs	r3, #2
 8001cfc:	e056      	b.n	8001dac <HAL_ADC_Start_IT+0xd8>
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	2250      	movs	r2, #80	; 0x50
 8001d02:	2101      	movs	r1, #1
 8001d04:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	69db      	ldr	r3, [r3, #28]
 8001d0a:	2b01      	cmp	r3, #1
 8001d0c:	d007      	beq.n	8001d1e <HAL_ADC_Start_IT+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8001d0e:	230f      	movs	r3, #15
 8001d10:	18fc      	adds	r4, r7, r3
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	0018      	movs	r0, r3
 8001d16:	f000 f99b 	bl	8002050 <ADC_Enable>
 8001d1a:	0003      	movs	r3, r0
 8001d1c:	7023      	strb	r3, [r4, #0]
    }

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001d1e:	230f      	movs	r3, #15
 8001d20:	18fb      	adds	r3, r7, r3
 8001d22:	781b      	ldrb	r3, [r3, #0]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d13e      	bne.n	8001da6 <HAL_ADC_Start_IT+0xd2>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d2c:	4a21      	ldr	r2, [pc, #132]	; (8001db4 <HAL_ADC_Start_IT+0xe0>)
 8001d2e:	4013      	ands	r3, r2
 8001d30:	2280      	movs	r2, #128	; 0x80
 8001d32:	0052      	lsls	r2, r2, #1
 8001d34:	431a      	orrs	r2, r3
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	659a      	str	r2, [r3, #88]	; 0x58

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2250      	movs	r2, #80	; 0x50
 8001d44:	2100      	movs	r1, #0
 8001d46:	5499      	strb	r1, [r3, r2]

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	221c      	movs	r2, #28
 8001d4e:	601a      	str	r2, [r3, #0]

      /* Enable ADC end of conversion interrupt */
      /* Enable ADC overrun interrupt */
      switch (hadc->Init.EOCSelection)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	695b      	ldr	r3, [r3, #20]
 8001d54:	2b08      	cmp	r3, #8
 8001d56:	d110      	bne.n	8001d7a <HAL_ADC_Start_IT+0xa6>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	685a      	ldr	r2, [r3, #4]
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	2104      	movs	r1, #4
 8001d64:	438a      	bics	r2, r1
 8001d66:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOS | ADC_IT_OVR));
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	685a      	ldr	r2, [r3, #4]
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	2118      	movs	r1, #24
 8001d74:	430a      	orrs	r2, r1
 8001d76:	605a      	str	r2, [r3, #4]
          break;
 8001d78:	e008      	b.n	8001d8c <HAL_ADC_Start_IT+0xb8>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	685a      	ldr	r2, [r3, #4]
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	211c      	movs	r1, #28
 8001d86:	430a      	orrs	r2, r1
 8001d88:	605a      	str	r2, [r3, #4]
          break;
 8001d8a:	46c0      	nop			; (mov r8, r8)

      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	689a      	ldr	r2, [r3, #8]
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	2104      	movs	r1, #4
 8001d98:	430a      	orrs	r2, r1
 8001d9a:	609a      	str	r2, [r3, #8]
 8001d9c:	e003      	b.n	8001da6 <HAL_ADC_Start_IT+0xd2>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001d9e:	230f      	movs	r3, #15
 8001da0:	18fb      	adds	r3, r7, r3
 8001da2:	2202      	movs	r2, #2
 8001da4:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 8001da6:	230f      	movs	r3, #15
 8001da8:	18fb      	adds	r3, r7, r3
 8001daa:	781b      	ldrb	r3, [r3, #0]
}
 8001dac:	0018      	movs	r0, r3
 8001dae:	46bd      	mov	sp, r7
 8001db0:	b005      	add	sp, #20
 8001db2:	bd90      	pop	{r4, r7, pc}
 8001db4:	fffff0fe 	.word	0xfffff0fe

08001db8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b082      	sub	sp, #8
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001dc6:	0018      	movs	r0, r3
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	b002      	add	sp, #8
 8001dcc:	bd80      	pop	{r7, pc}
	...

08001dd0 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b084      	sub	sp, #16
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_ier = hadc->Instance->IER;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Conversion flag for regular group ========== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	2204      	movs	r2, #4
 8001dec:	4013      	ands	r3, r2
 8001dee:	d003      	beq.n	8001df8 <HAL_ADC_IRQHandler+0x28>
 8001df0:	68bb      	ldr	r3, [r7, #8]
 8001df2:	2204      	movs	r2, #4
 8001df4:	4013      	ands	r3, r2
 8001df6:	d107      	bne.n	8001e08 <HAL_ADC_IRQHandler+0x38>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	2208      	movs	r2, #8
 8001dfc:	4013      	ands	r3, r2
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001dfe:	d04e      	beq.n	8001e9e <HAL_ADC_IRQHandler+0xce>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001e00:	68bb      	ldr	r3, [r7, #8]
 8001e02:	2208      	movs	r2, #8
 8001e04:	4013      	ands	r3, r2
 8001e06:	d04a      	beq.n	8001e9e <HAL_ADC_IRQHandler+0xce>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e0c:	2210      	movs	r2, #16
 8001e0e:	4013      	ands	r3, r2
 8001e10:	d106      	bne.n	8001e20 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e16:	2280      	movs	r2, #128	; 0x80
 8001e18:	0092      	lsls	r2, r2, #2
 8001e1a:	431a      	orrs	r2, r3
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	68da      	ldr	r2, [r3, #12]
 8001e26:	23c0      	movs	r3, #192	; 0xc0
 8001e28:	011b      	lsls	r3, r3, #4
 8001e2a:	4013      	ands	r3, r2
 8001e2c:	d12b      	bne.n	8001e86 <HAL_ADC_IRQHandler+0xb6>
        (hadc->Init.ContinuousConvMode == DISABLE))
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2220      	movs	r2, #32
 8001e32:	5c9b      	ldrb	r3, [r3, r2]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d126      	bne.n	8001e86 <HAL_ADC_IRQHandler+0xb6>
    {
      /* If End of Sequence is reached, disable interrupts */
      if ((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS)
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	2208      	movs	r2, #8
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	d022      	beq.n	8001e86 <HAL_ADC_IRQHandler+0xb6>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	689b      	ldr	r3, [r3, #8]
 8001e46:	2204      	movs	r2, #4
 8001e48:	4013      	ands	r3, r2
 8001e4a:	d110      	bne.n	8001e6e <HAL_ADC_IRQHandler+0x9e>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	685a      	ldr	r2, [r3, #4]
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	210c      	movs	r1, #12
 8001e58:	438a      	bics	r2, r1
 8001e5a:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e60:	4a2f      	ldr	r2, [pc, #188]	; (8001f20 <HAL_ADC_IRQHandler+0x150>)
 8001e62:	4013      	ands	r3, r2
 8001e64:	2201      	movs	r2, #1
 8001e66:	431a      	orrs	r2, r3
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	655a      	str	r2, [r3, #84]	; 0x54
 8001e6c:	e00b      	b.n	8001e86 <HAL_ADC_IRQHandler+0xb6>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e72:	2220      	movs	r2, #32
 8001e74:	431a      	orrs	r2, r3
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e7e:	2201      	movs	r2, #1
 8001e80:	431a      	orrs	r2, r3
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	659a      	str	r2, [r3, #88]	; 0x58
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	0018      	movs	r0, r3
 8001e8a:	f7ff fbc1 	bl	8001610 <HAL_ADC_ConvCpltCallback>
    /* Note: Management of low power auto-wait enabled: flags must be cleared */
    /*       by user when fetching ADC conversion data.                       */
    /*       This case is managed in IRQ handler, but this low-power mode     */
    /*       should not be used with programming model IT or DMA.             */
    /*       Refer to comment of parameter "LowPowerAutoWait".                */
    if (hadc->Init.LowPowerAutoWait != ENABLE)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	699b      	ldr	r3, [r3, #24]
 8001e92:	2b01      	cmp	r3, #1
 8001e94:	d003      	beq.n	8001e9e <HAL_ADC_IRQHandler+0xce>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	220c      	movs	r2, #12
 8001e9c:	601a      	str	r2, [r3, #0]
    }
  }

  /* ========== Check analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD) == ADC_FLAG_AWD) && ((tmp_ier & ADC_IT_AWD) == ADC_IT_AWD))
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	2280      	movs	r2, #128	; 0x80
 8001ea2:	4013      	ands	r3, r2
 8001ea4:	d012      	beq.n	8001ecc <HAL_ADC_IRQHandler+0xfc>
 8001ea6:	68bb      	ldr	r3, [r7, #8]
 8001ea8:	2280      	movs	r2, #128	; 0x80
 8001eaa:	4013      	ands	r3, r2
 8001eac:	d00e      	beq.n	8001ecc <HAL_ADC_IRQHandler+0xfc>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001eb2:	2280      	movs	r2, #128	; 0x80
 8001eb4:	0252      	lsls	r2, r2, #9
 8001eb6:	431a      	orrs	r2, r3
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	655a      	str	r2, [r3, #84]	; 0x54

#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	0018      	movs	r0, r3
 8001ec0:	f000 f830 	bl	8001f24 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC Analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	2280      	movs	r2, #128	; 0x80
 8001eca:	601a      	str	r2, [r3, #0]

  }


  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	2210      	movs	r2, #16
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	d020      	beq.n	8001f16 <HAL_ADC_IRQHandler+0x146>
 8001ed4:	68bb      	ldr	r3, [r7, #8]
 8001ed6:	2210      	movs	r2, #16
 8001ed8:	4013      	ands	r3, r2
 8001eda:	d01c      	beq.n	8001f16 <HAL_ADC_IRQHandler+0x146>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d006      	beq.n	8001ef2 <HAL_ADC_IRQHandler+0x122>
        HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	68db      	ldr	r3, [r3, #12]
 8001eea:	2201      	movs	r2, #1
 8001eec:	4013      	ands	r3, r2
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 8001eee:	2b01      	cmp	r3, #1
 8001ef0:	d10d      	bne.n	8001f0e <HAL_ADC_IRQHandler+0x13e>
    {
      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ef6:	2202      	movs	r2, #2
 8001ef8:	431a      	orrs	r2, r3
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	659a      	str	r2, [r3, #88]	; 0x58

      /* Clear ADC overrun flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	2210      	movs	r2, #16
 8001f04:	601a      	str	r2, [r3, #0]

#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	0018      	movs	r0, r3
 8001f0a:	f000 f813 	bl	8001f34 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	2210      	movs	r2, #16
 8001f14:	601a      	str	r2, [r3, #0]
  }

}
 8001f16:	46c0      	nop			; (mov r8, r8)
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	b004      	add	sp, #16
 8001f1c:	bd80      	pop	{r7, pc}
 8001f1e:	46c0      	nop			; (mov r8, r8)
 8001f20:	fffffefe 	.word	0xfffffefe

08001f24 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b082      	sub	sp, #8
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001f2c:	46c0      	nop			; (mov r8, r8)
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	b002      	add	sp, #8
 8001f32:	bd80      	pop	{r7, pc}

08001f34 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b082      	sub	sp, #8
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001f3c:	46c0      	nop			; (mov r8, r8)
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	b002      	add	sp, #8
 8001f42:	bd80      	pop	{r7, pc}

08001f44 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b082      	sub	sp, #8
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
 8001f4c:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2250      	movs	r2, #80	; 0x50
 8001f52:	5c9b      	ldrb	r3, [r3, r2]
 8001f54:	2b01      	cmp	r3, #1
 8001f56:	d101      	bne.n	8001f5c <HAL_ADC_ConfigChannel+0x18>
 8001f58:	2302      	movs	r3, #2
 8001f5a:	e06c      	b.n	8002036 <HAL_ADC_ConfigChannel+0xf2>
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2250      	movs	r2, #80	; 0x50
 8001f60:	2101      	movs	r1, #1
 8001f62:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	689b      	ldr	r3, [r3, #8]
 8001f6a:	2204      	movs	r2, #4
 8001f6c:	4013      	ands	r3, r2
 8001f6e:	d00b      	beq.n	8001f88 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f74:	2220      	movs	r2, #32
 8001f76:	431a      	orrs	r2, r3
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	655a      	str	r2, [r3, #84]	; 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2250      	movs	r2, #80	; 0x50
 8001f80:	2100      	movs	r1, #0
 8001f82:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8001f84:	2301      	movs	r3, #1
 8001f86:	e056      	b.n	8002036 <HAL_ADC_ConfigChannel+0xf2>
  }

  if (sConfig->Rank != ADC_RANK_NONE)
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	4a2c      	ldr	r2, [pc, #176]	; (8002040 <HAL_ADC_ConfigChannel+0xfc>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d028      	beq.n	8001fe4 <HAL_ADC_ConfigChannel+0xa0>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	035b      	lsls	r3, r3, #13
 8001f9e:	0b5a      	lsrs	r2, r3, #13
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	430a      	orrs	r2, r1
 8001fa6:	629a      	str	r2, [r3, #40]	; 0x28
    /* dedicated internal buffers and path.                                     */

#if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	681a      	ldr	r2, [r3, #0]
 8001fac:	2380      	movs	r3, #128	; 0x80
 8001fae:	02db      	lsls	r3, r3, #11
 8001fb0:	4013      	ands	r3, r2
 8001fb2:	d009      	beq.n	8001fc8 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;
 8001fb4:	4b23      	ldr	r3, [pc, #140]	; (8002044 <HAL_ADC_ConfigChannel+0x100>)
 8001fb6:	681a      	ldr	r2, [r3, #0]
 8001fb8:	4b22      	ldr	r3, [pc, #136]	; (8002044 <HAL_ADC_ConfigChannel+0x100>)
 8001fba:	2180      	movs	r1, #128	; 0x80
 8001fbc:	0409      	lsls	r1, r1, #16
 8001fbe:	430a      	orrs	r2, r1
 8001fc0:	601a      	str	r2, [r3, #0]

      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 8001fc2:	200a      	movs	r0, #10
 8001fc4:	f000 f8ac 	bl	8002120 <ADC_DelayMicroSecond>
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	681a      	ldr	r2, [r3, #0]
 8001fcc:	2380      	movs	r3, #128	; 0x80
 8001fce:	029b      	lsls	r3, r3, #10
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	d02b      	beq.n	800202c <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR |= ADC_CCR_VREFEN;
 8001fd4:	4b1b      	ldr	r3, [pc, #108]	; (8002044 <HAL_ADC_ConfigChannel+0x100>)
 8001fd6:	681a      	ldr	r2, [r3, #0]
 8001fd8:	4b1a      	ldr	r3, [pc, #104]	; (8002044 <HAL_ADC_ConfigChannel+0x100>)
 8001fda:	2180      	movs	r1, #128	; 0x80
 8001fdc:	03c9      	lsls	r1, r1, #15
 8001fde:	430a      	orrs	r2, r1
 8001fe0:	601a      	str	r2, [r3, #0]
 8001fe2:	e023      	b.n	800202c <HAL_ADC_ConfigChannel+0xe8>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	035b      	lsls	r3, r3, #13
 8001ff0:	0b5b      	lsrs	r3, r3, #13
 8001ff2:	43d9      	mvns	r1, r3
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	400a      	ands	r2, r1
 8001ffa:	629a      	str	r2, [r3, #40]	; 0x28

    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
#if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	681a      	ldr	r2, [r3, #0]
 8002000:	2380      	movs	r3, #128	; 0x80
 8002002:	02db      	lsls	r3, r3, #11
 8002004:	4013      	ands	r3, r2
 8002006:	d005      	beq.n	8002014 <HAL_ADC_ConfigChannel+0xd0>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;
 8002008:	4b0e      	ldr	r3, [pc, #56]	; (8002044 <HAL_ADC_ConfigChannel+0x100>)
 800200a:	681a      	ldr	r2, [r3, #0]
 800200c:	4b0d      	ldr	r3, [pc, #52]	; (8002044 <HAL_ADC_ConfigChannel+0x100>)
 800200e:	490e      	ldr	r1, [pc, #56]	; (8002048 <HAL_ADC_ConfigChannel+0x104>)
 8002010:	400a      	ands	r2, r1
 8002012:	601a      	str	r2, [r3, #0]
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	681a      	ldr	r2, [r3, #0]
 8002018:	2380      	movs	r3, #128	; 0x80
 800201a:	029b      	lsls	r3, r3, #10
 800201c:	4013      	ands	r3, r2
 800201e:	d005      	beq.n	800202c <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;
 8002020:	4b08      	ldr	r3, [pc, #32]	; (8002044 <HAL_ADC_ConfigChannel+0x100>)
 8002022:	681a      	ldr	r2, [r3, #0]
 8002024:	4b07      	ldr	r3, [pc, #28]	; (8002044 <HAL_ADC_ConfigChannel+0x100>)
 8002026:	4909      	ldr	r1, [pc, #36]	; (800204c <HAL_ADC_ConfigChannel+0x108>)
 8002028:	400a      	ands	r2, r1
 800202a:	601a      	str	r2, [r3, #0]
    }
#endif
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2250      	movs	r2, #80	; 0x50
 8002030:	2100      	movs	r1, #0
 8002032:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8002034:	2300      	movs	r3, #0
}
 8002036:	0018      	movs	r0, r3
 8002038:	46bd      	mov	sp, r7
 800203a:	b002      	add	sp, #8
 800203c:	bd80      	pop	{r7, pc}
 800203e:	46c0      	nop			; (mov r8, r8)
 8002040:	00001001 	.word	0x00001001
 8002044:	40012708 	.word	0x40012708
 8002048:	ff7fffff 	.word	0xff7fffff
 800204c:	ffbfffff 	.word	0xffbfffff

08002050 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b084      	sub	sp, #16
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002058:	2300      	movs	r3, #0
 800205a:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	689b      	ldr	r3, [r3, #8]
 8002062:	2203      	movs	r2, #3
 8002064:	4013      	ands	r3, r2
 8002066:	2b01      	cmp	r3, #1
 8002068:	d108      	bne.n	800207c <ADC_Enable+0x2c>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	2201      	movs	r2, #1
 8002072:	4013      	ands	r3, r2
 8002074:	2b01      	cmp	r3, #1
 8002076:	d101      	bne.n	800207c <ADC_Enable+0x2c>
 8002078:	2301      	movs	r3, #1
 800207a:	e000      	b.n	800207e <ADC_Enable+0x2e>
 800207c:	2300      	movs	r3, #0
 800207e:	2b00      	cmp	r3, #0
 8002080:	d146      	bne.n	8002110 <ADC_Enable+0xc0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	689b      	ldr	r3, [r3, #8]
 8002088:	4a24      	ldr	r2, [pc, #144]	; (800211c <ADC_Enable+0xcc>)
 800208a:	4013      	ands	r3, r2
 800208c:	d00d      	beq.n	80020aa <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002092:	2210      	movs	r2, #16
 8002094:	431a      	orrs	r2, r3
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800209e:	2201      	movs	r2, #1
 80020a0:	431a      	orrs	r2, r3
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80020a6:	2301      	movs	r3, #1
 80020a8:	e033      	b.n	8002112 <ADC_Enable+0xc2>
    }

    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	689a      	ldr	r2, [r3, #8]
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	2101      	movs	r1, #1
 80020b6:	430a      	orrs	r2, r1
 80020b8:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 80020ba:	2001      	movs	r0, #1
 80020bc:	f000 f830 	bl	8002120 <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 80020c0:	f7ff fc8a 	bl	80019d8 <HAL_GetTick>
 80020c4:	0003      	movs	r3, r0
 80020c6:	60fb      	str	r3, [r7, #12]

    /* Wait for ADC effectively enabled */
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80020c8:	e01b      	b.n	8002102 <ADC_Enable+0xb2>
    {
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80020ca:	f7ff fc85 	bl	80019d8 <HAL_GetTick>
 80020ce:	0002      	movs	r2, r0
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	1ad3      	subs	r3, r2, r3
 80020d4:	2b0a      	cmp	r3, #10
 80020d6:	d914      	bls.n	8002102 <ADC_Enable+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	2201      	movs	r2, #1
 80020e0:	4013      	ands	r3, r2
 80020e2:	2b01      	cmp	r3, #1
 80020e4:	d00d      	beq.n	8002102 <ADC_Enable+0xb2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020ea:	2210      	movs	r2, #16
 80020ec:	431a      	orrs	r2, r3
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020f6:	2201      	movs	r2, #1
 80020f8:	431a      	orrs	r2, r3
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80020fe:	2301      	movs	r3, #1
 8002100:	e007      	b.n	8002112 <ADC_Enable+0xc2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	2201      	movs	r2, #1
 800210a:	4013      	ands	r3, r2
 800210c:	2b01      	cmp	r3, #1
 800210e:	d1dc      	bne.n	80020ca <ADC_Enable+0x7a>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002110:	2300      	movs	r3, #0
}
 8002112:	0018      	movs	r0, r3
 8002114:	46bd      	mov	sp, r7
 8002116:	b004      	add	sp, #16
 8002118:	bd80      	pop	{r7, pc}
 800211a:	46c0      	nop			; (mov r8, r8)
 800211c:	80000017 	.word	0x80000017

08002120 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b084      	sub	sp, #16
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8002128:	4b0b      	ldr	r3, [pc, #44]	; (8002158 <ADC_DelayMicroSecond+0x38>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	490b      	ldr	r1, [pc, #44]	; (800215c <ADC_DelayMicroSecond+0x3c>)
 800212e:	0018      	movs	r0, r3
 8002130:	f7fd ffea 	bl	8000108 <__udivsi3>
 8002134:	0003      	movs	r3, r0
 8002136:	001a      	movs	r2, r3
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	4353      	muls	r3, r2
 800213c:	60fb      	str	r3, [r7, #12]

  while (waitLoopIndex != 0U)
 800213e:	e002      	b.n	8002146 <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	3b01      	subs	r3, #1
 8002144:	60fb      	str	r3, [r7, #12]
  while (waitLoopIndex != 0U)
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d1f9      	bne.n	8002140 <ADC_DelayMicroSecond+0x20>
  }
}
 800214c:	46c0      	nop			; (mov r8, r8)
 800214e:	46c0      	nop			; (mov r8, r8)
 8002150:	46bd      	mov	sp, r7
 8002152:	b004      	add	sp, #16
 8002154:	bd80      	pop	{r7, pc}
 8002156:	46c0      	nop			; (mov r8, r8)
 8002158:	2000000c 	.word	0x2000000c
 800215c:	000f4240 	.word	0x000f4240

08002160 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b082      	sub	sp, #8
 8002164:	af00      	add	r7, sp, #0
 8002166:	0002      	movs	r2, r0
 8002168:	1dfb      	adds	r3, r7, #7
 800216a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800216c:	1dfb      	adds	r3, r7, #7
 800216e:	781b      	ldrb	r3, [r3, #0]
 8002170:	2b7f      	cmp	r3, #127	; 0x7f
 8002172:	d809      	bhi.n	8002188 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002174:	1dfb      	adds	r3, r7, #7
 8002176:	781b      	ldrb	r3, [r3, #0]
 8002178:	001a      	movs	r2, r3
 800217a:	231f      	movs	r3, #31
 800217c:	401a      	ands	r2, r3
 800217e:	4b04      	ldr	r3, [pc, #16]	; (8002190 <__NVIC_EnableIRQ+0x30>)
 8002180:	2101      	movs	r1, #1
 8002182:	4091      	lsls	r1, r2
 8002184:	000a      	movs	r2, r1
 8002186:	601a      	str	r2, [r3, #0]
  }
}
 8002188:	46c0      	nop			; (mov r8, r8)
 800218a:	46bd      	mov	sp, r7
 800218c:	b002      	add	sp, #8
 800218e:	bd80      	pop	{r7, pc}
 8002190:	e000e100 	.word	0xe000e100

08002194 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002194:	b590      	push	{r4, r7, lr}
 8002196:	b083      	sub	sp, #12
 8002198:	af00      	add	r7, sp, #0
 800219a:	0002      	movs	r2, r0
 800219c:	6039      	str	r1, [r7, #0]
 800219e:	1dfb      	adds	r3, r7, #7
 80021a0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80021a2:	1dfb      	adds	r3, r7, #7
 80021a4:	781b      	ldrb	r3, [r3, #0]
 80021a6:	2b7f      	cmp	r3, #127	; 0x7f
 80021a8:	d828      	bhi.n	80021fc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80021aa:	4a2f      	ldr	r2, [pc, #188]	; (8002268 <__NVIC_SetPriority+0xd4>)
 80021ac:	1dfb      	adds	r3, r7, #7
 80021ae:	781b      	ldrb	r3, [r3, #0]
 80021b0:	b25b      	sxtb	r3, r3
 80021b2:	089b      	lsrs	r3, r3, #2
 80021b4:	33c0      	adds	r3, #192	; 0xc0
 80021b6:	009b      	lsls	r3, r3, #2
 80021b8:	589b      	ldr	r3, [r3, r2]
 80021ba:	1dfa      	adds	r2, r7, #7
 80021bc:	7812      	ldrb	r2, [r2, #0]
 80021be:	0011      	movs	r1, r2
 80021c0:	2203      	movs	r2, #3
 80021c2:	400a      	ands	r2, r1
 80021c4:	00d2      	lsls	r2, r2, #3
 80021c6:	21ff      	movs	r1, #255	; 0xff
 80021c8:	4091      	lsls	r1, r2
 80021ca:	000a      	movs	r2, r1
 80021cc:	43d2      	mvns	r2, r2
 80021ce:	401a      	ands	r2, r3
 80021d0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	019b      	lsls	r3, r3, #6
 80021d6:	22ff      	movs	r2, #255	; 0xff
 80021d8:	401a      	ands	r2, r3
 80021da:	1dfb      	adds	r3, r7, #7
 80021dc:	781b      	ldrb	r3, [r3, #0]
 80021de:	0018      	movs	r0, r3
 80021e0:	2303      	movs	r3, #3
 80021e2:	4003      	ands	r3, r0
 80021e4:	00db      	lsls	r3, r3, #3
 80021e6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80021e8:	481f      	ldr	r0, [pc, #124]	; (8002268 <__NVIC_SetPriority+0xd4>)
 80021ea:	1dfb      	adds	r3, r7, #7
 80021ec:	781b      	ldrb	r3, [r3, #0]
 80021ee:	b25b      	sxtb	r3, r3
 80021f0:	089b      	lsrs	r3, r3, #2
 80021f2:	430a      	orrs	r2, r1
 80021f4:	33c0      	adds	r3, #192	; 0xc0
 80021f6:	009b      	lsls	r3, r3, #2
 80021f8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80021fa:	e031      	b.n	8002260 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80021fc:	4a1b      	ldr	r2, [pc, #108]	; (800226c <__NVIC_SetPriority+0xd8>)
 80021fe:	1dfb      	adds	r3, r7, #7
 8002200:	781b      	ldrb	r3, [r3, #0]
 8002202:	0019      	movs	r1, r3
 8002204:	230f      	movs	r3, #15
 8002206:	400b      	ands	r3, r1
 8002208:	3b08      	subs	r3, #8
 800220a:	089b      	lsrs	r3, r3, #2
 800220c:	3306      	adds	r3, #6
 800220e:	009b      	lsls	r3, r3, #2
 8002210:	18d3      	adds	r3, r2, r3
 8002212:	3304      	adds	r3, #4
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	1dfa      	adds	r2, r7, #7
 8002218:	7812      	ldrb	r2, [r2, #0]
 800221a:	0011      	movs	r1, r2
 800221c:	2203      	movs	r2, #3
 800221e:	400a      	ands	r2, r1
 8002220:	00d2      	lsls	r2, r2, #3
 8002222:	21ff      	movs	r1, #255	; 0xff
 8002224:	4091      	lsls	r1, r2
 8002226:	000a      	movs	r2, r1
 8002228:	43d2      	mvns	r2, r2
 800222a:	401a      	ands	r2, r3
 800222c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	019b      	lsls	r3, r3, #6
 8002232:	22ff      	movs	r2, #255	; 0xff
 8002234:	401a      	ands	r2, r3
 8002236:	1dfb      	adds	r3, r7, #7
 8002238:	781b      	ldrb	r3, [r3, #0]
 800223a:	0018      	movs	r0, r3
 800223c:	2303      	movs	r3, #3
 800223e:	4003      	ands	r3, r0
 8002240:	00db      	lsls	r3, r3, #3
 8002242:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002244:	4809      	ldr	r0, [pc, #36]	; (800226c <__NVIC_SetPriority+0xd8>)
 8002246:	1dfb      	adds	r3, r7, #7
 8002248:	781b      	ldrb	r3, [r3, #0]
 800224a:	001c      	movs	r4, r3
 800224c:	230f      	movs	r3, #15
 800224e:	4023      	ands	r3, r4
 8002250:	3b08      	subs	r3, #8
 8002252:	089b      	lsrs	r3, r3, #2
 8002254:	430a      	orrs	r2, r1
 8002256:	3306      	adds	r3, #6
 8002258:	009b      	lsls	r3, r3, #2
 800225a:	18c3      	adds	r3, r0, r3
 800225c:	3304      	adds	r3, #4
 800225e:	601a      	str	r2, [r3, #0]
}
 8002260:	46c0      	nop			; (mov r8, r8)
 8002262:	46bd      	mov	sp, r7
 8002264:	b003      	add	sp, #12
 8002266:	bd90      	pop	{r4, r7, pc}
 8002268:	e000e100 	.word	0xe000e100
 800226c:	e000ed00 	.word	0xe000ed00

08002270 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b082      	sub	sp, #8
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	1e5a      	subs	r2, r3, #1
 800227c:	2380      	movs	r3, #128	; 0x80
 800227e:	045b      	lsls	r3, r3, #17
 8002280:	429a      	cmp	r2, r3
 8002282:	d301      	bcc.n	8002288 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002284:	2301      	movs	r3, #1
 8002286:	e010      	b.n	80022aa <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002288:	4b0a      	ldr	r3, [pc, #40]	; (80022b4 <SysTick_Config+0x44>)
 800228a:	687a      	ldr	r2, [r7, #4]
 800228c:	3a01      	subs	r2, #1
 800228e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002290:	2301      	movs	r3, #1
 8002292:	425b      	negs	r3, r3
 8002294:	2103      	movs	r1, #3
 8002296:	0018      	movs	r0, r3
 8002298:	f7ff ff7c 	bl	8002194 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800229c:	4b05      	ldr	r3, [pc, #20]	; (80022b4 <SysTick_Config+0x44>)
 800229e:	2200      	movs	r2, #0
 80022a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022a2:	4b04      	ldr	r3, [pc, #16]	; (80022b4 <SysTick_Config+0x44>)
 80022a4:	2207      	movs	r2, #7
 80022a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022a8:	2300      	movs	r3, #0
}
 80022aa:	0018      	movs	r0, r3
 80022ac:	46bd      	mov	sp, r7
 80022ae:	b002      	add	sp, #8
 80022b0:	bd80      	pop	{r7, pc}
 80022b2:	46c0      	nop			; (mov r8, r8)
 80022b4:	e000e010 	.word	0xe000e010

080022b8 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b084      	sub	sp, #16
 80022bc:	af00      	add	r7, sp, #0
 80022be:	60b9      	str	r1, [r7, #8]
 80022c0:	607a      	str	r2, [r7, #4]
 80022c2:	210f      	movs	r1, #15
 80022c4:	187b      	adds	r3, r7, r1
 80022c6:	1c02      	adds	r2, r0, #0
 80022c8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80022ca:	68ba      	ldr	r2, [r7, #8]
 80022cc:	187b      	adds	r3, r7, r1
 80022ce:	781b      	ldrb	r3, [r3, #0]
 80022d0:	b25b      	sxtb	r3, r3
 80022d2:	0011      	movs	r1, r2
 80022d4:	0018      	movs	r0, r3
 80022d6:	f7ff ff5d 	bl	8002194 <__NVIC_SetPriority>
}
 80022da:	46c0      	nop			; (mov r8, r8)
 80022dc:	46bd      	mov	sp, r7
 80022de:	b004      	add	sp, #16
 80022e0:	bd80      	pop	{r7, pc}

080022e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022e2:	b580      	push	{r7, lr}
 80022e4:	b082      	sub	sp, #8
 80022e6:	af00      	add	r7, sp, #0
 80022e8:	0002      	movs	r2, r0
 80022ea:	1dfb      	adds	r3, r7, #7
 80022ec:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80022ee:	1dfb      	adds	r3, r7, #7
 80022f0:	781b      	ldrb	r3, [r3, #0]
 80022f2:	b25b      	sxtb	r3, r3
 80022f4:	0018      	movs	r0, r3
 80022f6:	f7ff ff33 	bl	8002160 <__NVIC_EnableIRQ>
}
 80022fa:	46c0      	nop			; (mov r8, r8)
 80022fc:	46bd      	mov	sp, r7
 80022fe:	b002      	add	sp, #8
 8002300:	bd80      	pop	{r7, pc}

08002302 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002302:	b580      	push	{r7, lr}
 8002304:	b082      	sub	sp, #8
 8002306:	af00      	add	r7, sp, #0
 8002308:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	0018      	movs	r0, r3
 800230e:	f7ff ffaf 	bl	8002270 <SysTick_Config>
 8002312:	0003      	movs	r3, r0
}
 8002314:	0018      	movs	r0, r3
 8002316:	46bd      	mov	sp, r7
 8002318:	b002      	add	sp, #8
 800231a:	bd80      	pop	{r7, pc}

0800231c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b086      	sub	sp, #24
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
 8002324:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002326:	2300      	movs	r3, #0
 8002328:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800232a:	2300      	movs	r3, #0
 800232c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800232e:	2300      	movs	r3, #0
 8002330:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8002332:	e143      	b.n	80025bc <HAL_GPIO_Init+0x2a0>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	2101      	movs	r1, #1
 800233a:	697a      	ldr	r2, [r7, #20]
 800233c:	4091      	lsls	r1, r2
 800233e:	000a      	movs	r2, r1
 8002340:	4013      	ands	r3, r2
 8002342:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d100      	bne.n	800234c <HAL_GPIO_Init+0x30>
 800234a:	e134      	b.n	80025b6 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	2203      	movs	r2, #3
 8002352:	4013      	ands	r3, r2
 8002354:	2b01      	cmp	r3, #1
 8002356:	d005      	beq.n	8002364 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	2203      	movs	r2, #3
 800235e:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002360:	2b02      	cmp	r3, #2
 8002362:	d130      	bne.n	80023c6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	689b      	ldr	r3, [r3, #8]
 8002368:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800236a:	697b      	ldr	r3, [r7, #20]
 800236c:	005b      	lsls	r3, r3, #1
 800236e:	2203      	movs	r2, #3
 8002370:	409a      	lsls	r2, r3
 8002372:	0013      	movs	r3, r2
 8002374:	43da      	mvns	r2, r3
 8002376:	693b      	ldr	r3, [r7, #16]
 8002378:	4013      	ands	r3, r2
 800237a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	68da      	ldr	r2, [r3, #12]
 8002380:	697b      	ldr	r3, [r7, #20]
 8002382:	005b      	lsls	r3, r3, #1
 8002384:	409a      	lsls	r2, r3
 8002386:	0013      	movs	r3, r2
 8002388:	693a      	ldr	r2, [r7, #16]
 800238a:	4313      	orrs	r3, r2
 800238c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	693a      	ldr	r2, [r7, #16]
 8002392:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800239a:	2201      	movs	r2, #1
 800239c:	697b      	ldr	r3, [r7, #20]
 800239e:	409a      	lsls	r2, r3
 80023a0:	0013      	movs	r3, r2
 80023a2:	43da      	mvns	r2, r3
 80023a4:	693b      	ldr	r3, [r7, #16]
 80023a6:	4013      	ands	r3, r2
 80023a8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	091b      	lsrs	r3, r3, #4
 80023b0:	2201      	movs	r2, #1
 80023b2:	401a      	ands	r2, r3
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	409a      	lsls	r2, r3
 80023b8:	0013      	movs	r3, r2
 80023ba:	693a      	ldr	r2, [r7, #16]
 80023bc:	4313      	orrs	r3, r2
 80023be:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	693a      	ldr	r2, [r7, #16]
 80023c4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	2203      	movs	r2, #3
 80023cc:	4013      	ands	r3, r2
 80023ce:	2b03      	cmp	r3, #3
 80023d0:	d017      	beq.n	8002402 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	68db      	ldr	r3, [r3, #12]
 80023d6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80023d8:	697b      	ldr	r3, [r7, #20]
 80023da:	005b      	lsls	r3, r3, #1
 80023dc:	2203      	movs	r2, #3
 80023de:	409a      	lsls	r2, r3
 80023e0:	0013      	movs	r3, r2
 80023e2:	43da      	mvns	r2, r3
 80023e4:	693b      	ldr	r3, [r7, #16]
 80023e6:	4013      	ands	r3, r2
 80023e8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	689a      	ldr	r2, [r3, #8]
 80023ee:	697b      	ldr	r3, [r7, #20]
 80023f0:	005b      	lsls	r3, r3, #1
 80023f2:	409a      	lsls	r2, r3
 80023f4:	0013      	movs	r3, r2
 80023f6:	693a      	ldr	r2, [r7, #16]
 80023f8:	4313      	orrs	r3, r2
 80023fa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	693a      	ldr	r2, [r7, #16]
 8002400:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	2203      	movs	r2, #3
 8002408:	4013      	ands	r3, r2
 800240a:	2b02      	cmp	r3, #2
 800240c:	d123      	bne.n	8002456 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800240e:	697b      	ldr	r3, [r7, #20]
 8002410:	08da      	lsrs	r2, r3, #3
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	3208      	adds	r2, #8
 8002416:	0092      	lsls	r2, r2, #2
 8002418:	58d3      	ldr	r3, [r2, r3]
 800241a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 800241c:	697b      	ldr	r3, [r7, #20]
 800241e:	2207      	movs	r2, #7
 8002420:	4013      	ands	r3, r2
 8002422:	009b      	lsls	r3, r3, #2
 8002424:	220f      	movs	r2, #15
 8002426:	409a      	lsls	r2, r3
 8002428:	0013      	movs	r3, r2
 800242a:	43da      	mvns	r2, r3
 800242c:	693b      	ldr	r3, [r7, #16]
 800242e:	4013      	ands	r3, r2
 8002430:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	691a      	ldr	r2, [r3, #16]
 8002436:	697b      	ldr	r3, [r7, #20]
 8002438:	2107      	movs	r1, #7
 800243a:	400b      	ands	r3, r1
 800243c:	009b      	lsls	r3, r3, #2
 800243e:	409a      	lsls	r2, r3
 8002440:	0013      	movs	r3, r2
 8002442:	693a      	ldr	r2, [r7, #16]
 8002444:	4313      	orrs	r3, r2
 8002446:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002448:	697b      	ldr	r3, [r7, #20]
 800244a:	08da      	lsrs	r2, r3, #3
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	3208      	adds	r2, #8
 8002450:	0092      	lsls	r2, r2, #2
 8002452:	6939      	ldr	r1, [r7, #16]
 8002454:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800245c:	697b      	ldr	r3, [r7, #20]
 800245e:	005b      	lsls	r3, r3, #1
 8002460:	2203      	movs	r2, #3
 8002462:	409a      	lsls	r2, r3
 8002464:	0013      	movs	r3, r2
 8002466:	43da      	mvns	r2, r3
 8002468:	693b      	ldr	r3, [r7, #16]
 800246a:	4013      	ands	r3, r2
 800246c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	2203      	movs	r2, #3
 8002474:	401a      	ands	r2, r3
 8002476:	697b      	ldr	r3, [r7, #20]
 8002478:	005b      	lsls	r3, r3, #1
 800247a:	409a      	lsls	r2, r3
 800247c:	0013      	movs	r3, r2
 800247e:	693a      	ldr	r2, [r7, #16]
 8002480:	4313      	orrs	r3, r2
 8002482:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	693a      	ldr	r2, [r7, #16]
 8002488:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	685a      	ldr	r2, [r3, #4]
 800248e:	23c0      	movs	r3, #192	; 0xc0
 8002490:	029b      	lsls	r3, r3, #10
 8002492:	4013      	ands	r3, r2
 8002494:	d100      	bne.n	8002498 <HAL_GPIO_Init+0x17c>
 8002496:	e08e      	b.n	80025b6 <HAL_GPIO_Init+0x29a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002498:	4b4e      	ldr	r3, [pc, #312]	; (80025d4 <HAL_GPIO_Init+0x2b8>)
 800249a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800249c:	4b4d      	ldr	r3, [pc, #308]	; (80025d4 <HAL_GPIO_Init+0x2b8>)
 800249e:	2101      	movs	r1, #1
 80024a0:	430a      	orrs	r2, r1
 80024a2:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 80024a4:	4a4c      	ldr	r2, [pc, #304]	; (80025d8 <HAL_GPIO_Init+0x2bc>)
 80024a6:	697b      	ldr	r3, [r7, #20]
 80024a8:	089b      	lsrs	r3, r3, #2
 80024aa:	3302      	adds	r3, #2
 80024ac:	009b      	lsls	r3, r3, #2
 80024ae:	589b      	ldr	r3, [r3, r2]
 80024b0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80024b2:	697b      	ldr	r3, [r7, #20]
 80024b4:	2203      	movs	r2, #3
 80024b6:	4013      	ands	r3, r2
 80024b8:	009b      	lsls	r3, r3, #2
 80024ba:	220f      	movs	r2, #15
 80024bc:	409a      	lsls	r2, r3
 80024be:	0013      	movs	r3, r2
 80024c0:	43da      	mvns	r2, r3
 80024c2:	693b      	ldr	r3, [r7, #16]
 80024c4:	4013      	ands	r3, r2
 80024c6:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80024c8:	687a      	ldr	r2, [r7, #4]
 80024ca:	23a0      	movs	r3, #160	; 0xa0
 80024cc:	05db      	lsls	r3, r3, #23
 80024ce:	429a      	cmp	r2, r3
 80024d0:	d00d      	beq.n	80024ee <HAL_GPIO_Init+0x1d2>
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	4a41      	ldr	r2, [pc, #260]	; (80025dc <HAL_GPIO_Init+0x2c0>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d007      	beq.n	80024ea <HAL_GPIO_Init+0x1ce>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	4a40      	ldr	r2, [pc, #256]	; (80025e0 <HAL_GPIO_Init+0x2c4>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d101      	bne.n	80024e6 <HAL_GPIO_Init+0x1ca>
 80024e2:	2302      	movs	r3, #2
 80024e4:	e004      	b.n	80024f0 <HAL_GPIO_Init+0x1d4>
 80024e6:	2306      	movs	r3, #6
 80024e8:	e002      	b.n	80024f0 <HAL_GPIO_Init+0x1d4>
 80024ea:	2301      	movs	r3, #1
 80024ec:	e000      	b.n	80024f0 <HAL_GPIO_Init+0x1d4>
 80024ee:	2300      	movs	r3, #0
 80024f0:	697a      	ldr	r2, [r7, #20]
 80024f2:	2103      	movs	r1, #3
 80024f4:	400a      	ands	r2, r1
 80024f6:	0092      	lsls	r2, r2, #2
 80024f8:	4093      	lsls	r3, r2
 80024fa:	693a      	ldr	r2, [r7, #16]
 80024fc:	4313      	orrs	r3, r2
 80024fe:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002500:	4935      	ldr	r1, [pc, #212]	; (80025d8 <HAL_GPIO_Init+0x2bc>)
 8002502:	697b      	ldr	r3, [r7, #20]
 8002504:	089b      	lsrs	r3, r3, #2
 8002506:	3302      	adds	r3, #2
 8002508:	009b      	lsls	r3, r3, #2
 800250a:	693a      	ldr	r2, [r7, #16]
 800250c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800250e:	4b35      	ldr	r3, [pc, #212]	; (80025e4 <HAL_GPIO_Init+0x2c8>)
 8002510:	689b      	ldr	r3, [r3, #8]
 8002512:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	43da      	mvns	r2, r3
 8002518:	693b      	ldr	r3, [r7, #16]
 800251a:	4013      	ands	r3, r2
 800251c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	685a      	ldr	r2, [r3, #4]
 8002522:	2380      	movs	r3, #128	; 0x80
 8002524:	035b      	lsls	r3, r3, #13
 8002526:	4013      	ands	r3, r2
 8002528:	d003      	beq.n	8002532 <HAL_GPIO_Init+0x216>
        {
          temp |= iocurrent;
 800252a:	693a      	ldr	r2, [r7, #16]
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	4313      	orrs	r3, r2
 8002530:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002532:	4b2c      	ldr	r3, [pc, #176]	; (80025e4 <HAL_GPIO_Init+0x2c8>)
 8002534:	693a      	ldr	r2, [r7, #16]
 8002536:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002538:	4b2a      	ldr	r3, [pc, #168]	; (80025e4 <HAL_GPIO_Init+0x2c8>)
 800253a:	68db      	ldr	r3, [r3, #12]
 800253c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	43da      	mvns	r2, r3
 8002542:	693b      	ldr	r3, [r7, #16]
 8002544:	4013      	ands	r3, r2
 8002546:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	685a      	ldr	r2, [r3, #4]
 800254c:	2380      	movs	r3, #128	; 0x80
 800254e:	039b      	lsls	r3, r3, #14
 8002550:	4013      	ands	r3, r2
 8002552:	d003      	beq.n	800255c <HAL_GPIO_Init+0x240>
        {
          temp |= iocurrent;
 8002554:	693a      	ldr	r2, [r7, #16]
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	4313      	orrs	r3, r2
 800255a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800255c:	4b21      	ldr	r3, [pc, #132]	; (80025e4 <HAL_GPIO_Init+0x2c8>)
 800255e:	693a      	ldr	r2, [r7, #16]
 8002560:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8002562:	4b20      	ldr	r3, [pc, #128]	; (80025e4 <HAL_GPIO_Init+0x2c8>)
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	43da      	mvns	r2, r3
 800256c:	693b      	ldr	r3, [r7, #16]
 800256e:	4013      	ands	r3, r2
 8002570:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	685a      	ldr	r2, [r3, #4]
 8002576:	2380      	movs	r3, #128	; 0x80
 8002578:	029b      	lsls	r3, r3, #10
 800257a:	4013      	ands	r3, r2
 800257c:	d003      	beq.n	8002586 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800257e:	693a      	ldr	r2, [r7, #16]
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	4313      	orrs	r3, r2
 8002584:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002586:	4b17      	ldr	r3, [pc, #92]	; (80025e4 <HAL_GPIO_Init+0x2c8>)
 8002588:	693a      	ldr	r2, [r7, #16]
 800258a:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800258c:	4b15      	ldr	r3, [pc, #84]	; (80025e4 <HAL_GPIO_Init+0x2c8>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	43da      	mvns	r2, r3
 8002596:	693b      	ldr	r3, [r7, #16]
 8002598:	4013      	ands	r3, r2
 800259a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	685a      	ldr	r2, [r3, #4]
 80025a0:	2380      	movs	r3, #128	; 0x80
 80025a2:	025b      	lsls	r3, r3, #9
 80025a4:	4013      	ands	r3, r2
 80025a6:	d003      	beq.n	80025b0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80025a8:	693a      	ldr	r2, [r7, #16]
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	4313      	orrs	r3, r2
 80025ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80025b0:	4b0c      	ldr	r3, [pc, #48]	; (80025e4 <HAL_GPIO_Init+0x2c8>)
 80025b2:	693a      	ldr	r2, [r7, #16]
 80025b4:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 80025b6:	697b      	ldr	r3, [r7, #20]
 80025b8:	3301      	adds	r3, #1
 80025ba:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	681a      	ldr	r2, [r3, #0]
 80025c0:	697b      	ldr	r3, [r7, #20]
 80025c2:	40da      	lsrs	r2, r3
 80025c4:	1e13      	subs	r3, r2, #0
 80025c6:	d000      	beq.n	80025ca <HAL_GPIO_Init+0x2ae>
 80025c8:	e6b4      	b.n	8002334 <HAL_GPIO_Init+0x18>
  }
}
 80025ca:	46c0      	nop			; (mov r8, r8)
 80025cc:	46c0      	nop			; (mov r8, r8)
 80025ce:	46bd      	mov	sp, r7
 80025d0:	b006      	add	sp, #24
 80025d2:	bd80      	pop	{r7, pc}
 80025d4:	40021000 	.word	0x40021000
 80025d8:	40010000 	.word	0x40010000
 80025dc:	50000400 	.word	0x50000400
 80025e0:	50000800 	.word	0x50000800
 80025e4:	40010400 	.word	0x40010400

080025e8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025e8:	b5b0      	push	{r4, r5, r7, lr}
 80025ea:	b08a      	sub	sp, #40	; 0x28
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d102      	bne.n	80025fc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80025f6:	2301      	movs	r3, #1
 80025f8:	f000 fb6c 	bl	8002cd4 <HAL_RCC_OscConfig+0x6ec>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80025fc:	4bc8      	ldr	r3, [pc, #800]	; (8002920 <HAL_RCC_OscConfig+0x338>)
 80025fe:	68db      	ldr	r3, [r3, #12]
 8002600:	220c      	movs	r2, #12
 8002602:	4013      	ands	r3, r2
 8002604:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002606:	4bc6      	ldr	r3, [pc, #792]	; (8002920 <HAL_RCC_OscConfig+0x338>)
 8002608:	68da      	ldr	r2, [r3, #12]
 800260a:	2380      	movs	r3, #128	; 0x80
 800260c:	025b      	lsls	r3, r3, #9
 800260e:	4013      	ands	r3, r2
 8002610:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	2201      	movs	r2, #1
 8002618:	4013      	ands	r3, r2
 800261a:	d100      	bne.n	800261e <HAL_RCC_OscConfig+0x36>
 800261c:	e07d      	b.n	800271a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800261e:	69fb      	ldr	r3, [r7, #28]
 8002620:	2b08      	cmp	r3, #8
 8002622:	d007      	beq.n	8002634 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002624:	69fb      	ldr	r3, [r7, #28]
 8002626:	2b0c      	cmp	r3, #12
 8002628:	d112      	bne.n	8002650 <HAL_RCC_OscConfig+0x68>
 800262a:	69ba      	ldr	r2, [r7, #24]
 800262c:	2380      	movs	r3, #128	; 0x80
 800262e:	025b      	lsls	r3, r3, #9
 8002630:	429a      	cmp	r2, r3
 8002632:	d10d      	bne.n	8002650 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002634:	4bba      	ldr	r3, [pc, #744]	; (8002920 <HAL_RCC_OscConfig+0x338>)
 8002636:	681a      	ldr	r2, [r3, #0]
 8002638:	2380      	movs	r3, #128	; 0x80
 800263a:	029b      	lsls	r3, r3, #10
 800263c:	4013      	ands	r3, r2
 800263e:	d100      	bne.n	8002642 <HAL_RCC_OscConfig+0x5a>
 8002640:	e06a      	b.n	8002718 <HAL_RCC_OscConfig+0x130>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d166      	bne.n	8002718 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800264a:	2301      	movs	r3, #1
 800264c:	f000 fb42 	bl	8002cd4 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	685a      	ldr	r2, [r3, #4]
 8002654:	2380      	movs	r3, #128	; 0x80
 8002656:	025b      	lsls	r3, r3, #9
 8002658:	429a      	cmp	r2, r3
 800265a:	d107      	bne.n	800266c <HAL_RCC_OscConfig+0x84>
 800265c:	4bb0      	ldr	r3, [pc, #704]	; (8002920 <HAL_RCC_OscConfig+0x338>)
 800265e:	681a      	ldr	r2, [r3, #0]
 8002660:	4baf      	ldr	r3, [pc, #700]	; (8002920 <HAL_RCC_OscConfig+0x338>)
 8002662:	2180      	movs	r1, #128	; 0x80
 8002664:	0249      	lsls	r1, r1, #9
 8002666:	430a      	orrs	r2, r1
 8002668:	601a      	str	r2, [r3, #0]
 800266a:	e027      	b.n	80026bc <HAL_RCC_OscConfig+0xd4>
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	685a      	ldr	r2, [r3, #4]
 8002670:	23a0      	movs	r3, #160	; 0xa0
 8002672:	02db      	lsls	r3, r3, #11
 8002674:	429a      	cmp	r2, r3
 8002676:	d10e      	bne.n	8002696 <HAL_RCC_OscConfig+0xae>
 8002678:	4ba9      	ldr	r3, [pc, #676]	; (8002920 <HAL_RCC_OscConfig+0x338>)
 800267a:	681a      	ldr	r2, [r3, #0]
 800267c:	4ba8      	ldr	r3, [pc, #672]	; (8002920 <HAL_RCC_OscConfig+0x338>)
 800267e:	2180      	movs	r1, #128	; 0x80
 8002680:	02c9      	lsls	r1, r1, #11
 8002682:	430a      	orrs	r2, r1
 8002684:	601a      	str	r2, [r3, #0]
 8002686:	4ba6      	ldr	r3, [pc, #664]	; (8002920 <HAL_RCC_OscConfig+0x338>)
 8002688:	681a      	ldr	r2, [r3, #0]
 800268a:	4ba5      	ldr	r3, [pc, #660]	; (8002920 <HAL_RCC_OscConfig+0x338>)
 800268c:	2180      	movs	r1, #128	; 0x80
 800268e:	0249      	lsls	r1, r1, #9
 8002690:	430a      	orrs	r2, r1
 8002692:	601a      	str	r2, [r3, #0]
 8002694:	e012      	b.n	80026bc <HAL_RCC_OscConfig+0xd4>
 8002696:	4ba2      	ldr	r3, [pc, #648]	; (8002920 <HAL_RCC_OscConfig+0x338>)
 8002698:	681a      	ldr	r2, [r3, #0]
 800269a:	4ba1      	ldr	r3, [pc, #644]	; (8002920 <HAL_RCC_OscConfig+0x338>)
 800269c:	49a1      	ldr	r1, [pc, #644]	; (8002924 <HAL_RCC_OscConfig+0x33c>)
 800269e:	400a      	ands	r2, r1
 80026a0:	601a      	str	r2, [r3, #0]
 80026a2:	4b9f      	ldr	r3, [pc, #636]	; (8002920 <HAL_RCC_OscConfig+0x338>)
 80026a4:	681a      	ldr	r2, [r3, #0]
 80026a6:	2380      	movs	r3, #128	; 0x80
 80026a8:	025b      	lsls	r3, r3, #9
 80026aa:	4013      	ands	r3, r2
 80026ac:	60fb      	str	r3, [r7, #12]
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	4b9b      	ldr	r3, [pc, #620]	; (8002920 <HAL_RCC_OscConfig+0x338>)
 80026b2:	681a      	ldr	r2, [r3, #0]
 80026b4:	4b9a      	ldr	r3, [pc, #616]	; (8002920 <HAL_RCC_OscConfig+0x338>)
 80026b6:	499c      	ldr	r1, [pc, #624]	; (8002928 <HAL_RCC_OscConfig+0x340>)
 80026b8:	400a      	ands	r2, r1
 80026ba:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d014      	beq.n	80026ee <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026c4:	f7ff f988 	bl	80019d8 <HAL_GetTick>
 80026c8:	0003      	movs	r3, r0
 80026ca:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80026cc:	e008      	b.n	80026e0 <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026ce:	f7ff f983 	bl	80019d8 <HAL_GetTick>
 80026d2:	0002      	movs	r2, r0
 80026d4:	697b      	ldr	r3, [r7, #20]
 80026d6:	1ad3      	subs	r3, r2, r3
 80026d8:	2b64      	cmp	r3, #100	; 0x64
 80026da:	d901      	bls.n	80026e0 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 80026dc:	2303      	movs	r3, #3
 80026de:	e2f9      	b.n	8002cd4 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80026e0:	4b8f      	ldr	r3, [pc, #572]	; (8002920 <HAL_RCC_OscConfig+0x338>)
 80026e2:	681a      	ldr	r2, [r3, #0]
 80026e4:	2380      	movs	r3, #128	; 0x80
 80026e6:	029b      	lsls	r3, r3, #10
 80026e8:	4013      	ands	r3, r2
 80026ea:	d0f0      	beq.n	80026ce <HAL_RCC_OscConfig+0xe6>
 80026ec:	e015      	b.n	800271a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026ee:	f7ff f973 	bl	80019d8 <HAL_GetTick>
 80026f2:	0003      	movs	r3, r0
 80026f4:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80026f6:	e008      	b.n	800270a <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026f8:	f7ff f96e 	bl	80019d8 <HAL_GetTick>
 80026fc:	0002      	movs	r2, r0
 80026fe:	697b      	ldr	r3, [r7, #20]
 8002700:	1ad3      	subs	r3, r2, r3
 8002702:	2b64      	cmp	r3, #100	; 0x64
 8002704:	d901      	bls.n	800270a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002706:	2303      	movs	r3, #3
 8002708:	e2e4      	b.n	8002cd4 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800270a:	4b85      	ldr	r3, [pc, #532]	; (8002920 <HAL_RCC_OscConfig+0x338>)
 800270c:	681a      	ldr	r2, [r3, #0]
 800270e:	2380      	movs	r3, #128	; 0x80
 8002710:	029b      	lsls	r3, r3, #10
 8002712:	4013      	ands	r3, r2
 8002714:	d1f0      	bne.n	80026f8 <HAL_RCC_OscConfig+0x110>
 8002716:	e000      	b.n	800271a <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002718:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	2202      	movs	r2, #2
 8002720:	4013      	ands	r3, r2
 8002722:	d100      	bne.n	8002726 <HAL_RCC_OscConfig+0x13e>
 8002724:	e099      	b.n	800285a <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	68db      	ldr	r3, [r3, #12]
 800272a:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 800272c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800272e:	2220      	movs	r2, #32
 8002730:	4013      	ands	r3, r2
 8002732:	d009      	beq.n	8002748 <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8002734:	4b7a      	ldr	r3, [pc, #488]	; (8002920 <HAL_RCC_OscConfig+0x338>)
 8002736:	681a      	ldr	r2, [r3, #0]
 8002738:	4b79      	ldr	r3, [pc, #484]	; (8002920 <HAL_RCC_OscConfig+0x338>)
 800273a:	2120      	movs	r1, #32
 800273c:	430a      	orrs	r2, r1
 800273e:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8002740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002742:	2220      	movs	r2, #32
 8002744:	4393      	bics	r3, r2
 8002746:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002748:	69fb      	ldr	r3, [r7, #28]
 800274a:	2b04      	cmp	r3, #4
 800274c:	d005      	beq.n	800275a <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800274e:	69fb      	ldr	r3, [r7, #28]
 8002750:	2b0c      	cmp	r3, #12
 8002752:	d13e      	bne.n	80027d2 <HAL_RCC_OscConfig+0x1ea>
 8002754:	69bb      	ldr	r3, [r7, #24]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d13b      	bne.n	80027d2 <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 800275a:	4b71      	ldr	r3, [pc, #452]	; (8002920 <HAL_RCC_OscConfig+0x338>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	2204      	movs	r2, #4
 8002760:	4013      	ands	r3, r2
 8002762:	d004      	beq.n	800276e <HAL_RCC_OscConfig+0x186>
 8002764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002766:	2b00      	cmp	r3, #0
 8002768:	d101      	bne.n	800276e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800276a:	2301      	movs	r3, #1
 800276c:	e2b2      	b.n	8002cd4 <HAL_RCC_OscConfig+0x6ec>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800276e:	4b6c      	ldr	r3, [pc, #432]	; (8002920 <HAL_RCC_OscConfig+0x338>)
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	4a6e      	ldr	r2, [pc, #440]	; (800292c <HAL_RCC_OscConfig+0x344>)
 8002774:	4013      	ands	r3, r2
 8002776:	0019      	movs	r1, r3
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	691b      	ldr	r3, [r3, #16]
 800277c:	021a      	lsls	r2, r3, #8
 800277e:	4b68      	ldr	r3, [pc, #416]	; (8002920 <HAL_RCC_OscConfig+0x338>)
 8002780:	430a      	orrs	r2, r1
 8002782:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002784:	4b66      	ldr	r3, [pc, #408]	; (8002920 <HAL_RCC_OscConfig+0x338>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	2209      	movs	r2, #9
 800278a:	4393      	bics	r3, r2
 800278c:	0019      	movs	r1, r3
 800278e:	4b64      	ldr	r3, [pc, #400]	; (8002920 <HAL_RCC_OscConfig+0x338>)
 8002790:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002792:	430a      	orrs	r2, r1
 8002794:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002796:	f000 fbeb 	bl	8002f70 <HAL_RCC_GetSysClockFreq>
 800279a:	0001      	movs	r1, r0
 800279c:	4b60      	ldr	r3, [pc, #384]	; (8002920 <HAL_RCC_OscConfig+0x338>)
 800279e:	68db      	ldr	r3, [r3, #12]
 80027a0:	091b      	lsrs	r3, r3, #4
 80027a2:	220f      	movs	r2, #15
 80027a4:	4013      	ands	r3, r2
 80027a6:	4a62      	ldr	r2, [pc, #392]	; (8002930 <HAL_RCC_OscConfig+0x348>)
 80027a8:	5cd3      	ldrb	r3, [r2, r3]
 80027aa:	000a      	movs	r2, r1
 80027ac:	40da      	lsrs	r2, r3
 80027ae:	4b61      	ldr	r3, [pc, #388]	; (8002934 <HAL_RCC_OscConfig+0x34c>)
 80027b0:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 80027b2:	4b61      	ldr	r3, [pc, #388]	; (8002938 <HAL_RCC_OscConfig+0x350>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	2513      	movs	r5, #19
 80027b8:	197c      	adds	r4, r7, r5
 80027ba:	0018      	movs	r0, r3
 80027bc:	f7ff f8c6 	bl	800194c <HAL_InitTick>
 80027c0:	0003      	movs	r3, r0
 80027c2:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 80027c4:	197b      	adds	r3, r7, r5
 80027c6:	781b      	ldrb	r3, [r3, #0]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d046      	beq.n	800285a <HAL_RCC_OscConfig+0x272>
      {
        return status;
 80027cc:	197b      	adds	r3, r7, r5
 80027ce:	781b      	ldrb	r3, [r3, #0]
 80027d0:	e280      	b.n	8002cd4 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 80027d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d027      	beq.n	8002828 <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80027d8:	4b51      	ldr	r3, [pc, #324]	; (8002920 <HAL_RCC_OscConfig+0x338>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	2209      	movs	r2, #9
 80027de:	4393      	bics	r3, r2
 80027e0:	0019      	movs	r1, r3
 80027e2:	4b4f      	ldr	r3, [pc, #316]	; (8002920 <HAL_RCC_OscConfig+0x338>)
 80027e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027e6:	430a      	orrs	r2, r1
 80027e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027ea:	f7ff f8f5 	bl	80019d8 <HAL_GetTick>
 80027ee:	0003      	movs	r3, r0
 80027f0:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80027f2:	e008      	b.n	8002806 <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027f4:	f7ff f8f0 	bl	80019d8 <HAL_GetTick>
 80027f8:	0002      	movs	r2, r0
 80027fa:	697b      	ldr	r3, [r7, #20]
 80027fc:	1ad3      	subs	r3, r2, r3
 80027fe:	2b02      	cmp	r3, #2
 8002800:	d901      	bls.n	8002806 <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 8002802:	2303      	movs	r3, #3
 8002804:	e266      	b.n	8002cd4 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002806:	4b46      	ldr	r3, [pc, #280]	; (8002920 <HAL_RCC_OscConfig+0x338>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	2204      	movs	r2, #4
 800280c:	4013      	ands	r3, r2
 800280e:	d0f1      	beq.n	80027f4 <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002810:	4b43      	ldr	r3, [pc, #268]	; (8002920 <HAL_RCC_OscConfig+0x338>)
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	4a45      	ldr	r2, [pc, #276]	; (800292c <HAL_RCC_OscConfig+0x344>)
 8002816:	4013      	ands	r3, r2
 8002818:	0019      	movs	r1, r3
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	691b      	ldr	r3, [r3, #16]
 800281e:	021a      	lsls	r2, r3, #8
 8002820:	4b3f      	ldr	r3, [pc, #252]	; (8002920 <HAL_RCC_OscConfig+0x338>)
 8002822:	430a      	orrs	r2, r1
 8002824:	605a      	str	r2, [r3, #4]
 8002826:	e018      	b.n	800285a <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002828:	4b3d      	ldr	r3, [pc, #244]	; (8002920 <HAL_RCC_OscConfig+0x338>)
 800282a:	681a      	ldr	r2, [r3, #0]
 800282c:	4b3c      	ldr	r3, [pc, #240]	; (8002920 <HAL_RCC_OscConfig+0x338>)
 800282e:	2101      	movs	r1, #1
 8002830:	438a      	bics	r2, r1
 8002832:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002834:	f7ff f8d0 	bl	80019d8 <HAL_GetTick>
 8002838:	0003      	movs	r3, r0
 800283a:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800283c:	e008      	b.n	8002850 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800283e:	f7ff f8cb 	bl	80019d8 <HAL_GetTick>
 8002842:	0002      	movs	r2, r0
 8002844:	697b      	ldr	r3, [r7, #20]
 8002846:	1ad3      	subs	r3, r2, r3
 8002848:	2b02      	cmp	r3, #2
 800284a:	d901      	bls.n	8002850 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 800284c:	2303      	movs	r3, #3
 800284e:	e241      	b.n	8002cd4 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002850:	4b33      	ldr	r3, [pc, #204]	; (8002920 <HAL_RCC_OscConfig+0x338>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	2204      	movs	r2, #4
 8002856:	4013      	ands	r3, r2
 8002858:	d1f1      	bne.n	800283e <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	2210      	movs	r2, #16
 8002860:	4013      	ands	r3, r2
 8002862:	d100      	bne.n	8002866 <HAL_RCC_OscConfig+0x27e>
 8002864:	e0a1      	b.n	80029aa <HAL_RCC_OscConfig+0x3c2>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002866:	69fb      	ldr	r3, [r7, #28]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d140      	bne.n	80028ee <HAL_RCC_OscConfig+0x306>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800286c:	4b2c      	ldr	r3, [pc, #176]	; (8002920 <HAL_RCC_OscConfig+0x338>)
 800286e:	681a      	ldr	r2, [r3, #0]
 8002870:	2380      	movs	r3, #128	; 0x80
 8002872:	009b      	lsls	r3, r3, #2
 8002874:	4013      	ands	r3, r2
 8002876:	d005      	beq.n	8002884 <HAL_RCC_OscConfig+0x29c>
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	699b      	ldr	r3, [r3, #24]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d101      	bne.n	8002884 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8002880:	2301      	movs	r3, #1
 8002882:	e227      	b.n	8002cd4 <HAL_RCC_OscConfig+0x6ec>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002884:	4b26      	ldr	r3, [pc, #152]	; (8002920 <HAL_RCC_OscConfig+0x338>)
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	4a2c      	ldr	r2, [pc, #176]	; (800293c <HAL_RCC_OscConfig+0x354>)
 800288a:	4013      	ands	r3, r2
 800288c:	0019      	movs	r1, r3
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6a1a      	ldr	r2, [r3, #32]
 8002892:	4b23      	ldr	r3, [pc, #140]	; (8002920 <HAL_RCC_OscConfig+0x338>)
 8002894:	430a      	orrs	r2, r1
 8002896:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002898:	4b21      	ldr	r3, [pc, #132]	; (8002920 <HAL_RCC_OscConfig+0x338>)
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	021b      	lsls	r3, r3, #8
 800289e:	0a19      	lsrs	r1, r3, #8
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	69db      	ldr	r3, [r3, #28]
 80028a4:	061a      	lsls	r2, r3, #24
 80028a6:	4b1e      	ldr	r3, [pc, #120]	; (8002920 <HAL_RCC_OscConfig+0x338>)
 80028a8:	430a      	orrs	r2, r1
 80028aa:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6a1b      	ldr	r3, [r3, #32]
 80028b0:	0b5b      	lsrs	r3, r3, #13
 80028b2:	3301      	adds	r3, #1
 80028b4:	2280      	movs	r2, #128	; 0x80
 80028b6:	0212      	lsls	r2, r2, #8
 80028b8:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80028ba:	4b19      	ldr	r3, [pc, #100]	; (8002920 <HAL_RCC_OscConfig+0x338>)
 80028bc:	68db      	ldr	r3, [r3, #12]
 80028be:	091b      	lsrs	r3, r3, #4
 80028c0:	210f      	movs	r1, #15
 80028c2:	400b      	ands	r3, r1
 80028c4:	491a      	ldr	r1, [pc, #104]	; (8002930 <HAL_RCC_OscConfig+0x348>)
 80028c6:	5ccb      	ldrb	r3, [r1, r3]
 80028c8:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80028ca:	4b1a      	ldr	r3, [pc, #104]	; (8002934 <HAL_RCC_OscConfig+0x34c>)
 80028cc:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 80028ce:	4b1a      	ldr	r3, [pc, #104]	; (8002938 <HAL_RCC_OscConfig+0x350>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	2513      	movs	r5, #19
 80028d4:	197c      	adds	r4, r7, r5
 80028d6:	0018      	movs	r0, r3
 80028d8:	f7ff f838 	bl	800194c <HAL_InitTick>
 80028dc:	0003      	movs	r3, r0
 80028de:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80028e0:	197b      	adds	r3, r7, r5
 80028e2:	781b      	ldrb	r3, [r3, #0]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d060      	beq.n	80029aa <HAL_RCC_OscConfig+0x3c2>
        {
          return status;
 80028e8:	197b      	adds	r3, r7, r5
 80028ea:	781b      	ldrb	r3, [r3, #0]
 80028ec:	e1f2      	b.n	8002cd4 <HAL_RCC_OscConfig+0x6ec>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	699b      	ldr	r3, [r3, #24]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d03f      	beq.n	8002976 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80028f6:	4b0a      	ldr	r3, [pc, #40]	; (8002920 <HAL_RCC_OscConfig+0x338>)
 80028f8:	681a      	ldr	r2, [r3, #0]
 80028fa:	4b09      	ldr	r3, [pc, #36]	; (8002920 <HAL_RCC_OscConfig+0x338>)
 80028fc:	2180      	movs	r1, #128	; 0x80
 80028fe:	0049      	lsls	r1, r1, #1
 8002900:	430a      	orrs	r2, r1
 8002902:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002904:	f7ff f868 	bl	80019d8 <HAL_GetTick>
 8002908:	0003      	movs	r3, r0
 800290a:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800290c:	e018      	b.n	8002940 <HAL_RCC_OscConfig+0x358>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800290e:	f7ff f863 	bl	80019d8 <HAL_GetTick>
 8002912:	0002      	movs	r2, r0
 8002914:	697b      	ldr	r3, [r7, #20]
 8002916:	1ad3      	subs	r3, r2, r3
 8002918:	2b02      	cmp	r3, #2
 800291a:	d911      	bls.n	8002940 <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 800291c:	2303      	movs	r3, #3
 800291e:	e1d9      	b.n	8002cd4 <HAL_RCC_OscConfig+0x6ec>
 8002920:	40021000 	.word	0x40021000
 8002924:	fffeffff 	.word	0xfffeffff
 8002928:	fffbffff 	.word	0xfffbffff
 800292c:	ffffe0ff 	.word	0xffffe0ff
 8002930:	08003bf0 	.word	0x08003bf0
 8002934:	2000000c 	.word	0x2000000c
 8002938:	20000010 	.word	0x20000010
 800293c:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002940:	4bc9      	ldr	r3, [pc, #804]	; (8002c68 <HAL_RCC_OscConfig+0x680>)
 8002942:	681a      	ldr	r2, [r3, #0]
 8002944:	2380      	movs	r3, #128	; 0x80
 8002946:	009b      	lsls	r3, r3, #2
 8002948:	4013      	ands	r3, r2
 800294a:	d0e0      	beq.n	800290e <HAL_RCC_OscConfig+0x326>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800294c:	4bc6      	ldr	r3, [pc, #792]	; (8002c68 <HAL_RCC_OscConfig+0x680>)
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	4ac6      	ldr	r2, [pc, #792]	; (8002c6c <HAL_RCC_OscConfig+0x684>)
 8002952:	4013      	ands	r3, r2
 8002954:	0019      	movs	r1, r3
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6a1a      	ldr	r2, [r3, #32]
 800295a:	4bc3      	ldr	r3, [pc, #780]	; (8002c68 <HAL_RCC_OscConfig+0x680>)
 800295c:	430a      	orrs	r2, r1
 800295e:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002960:	4bc1      	ldr	r3, [pc, #772]	; (8002c68 <HAL_RCC_OscConfig+0x680>)
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	021b      	lsls	r3, r3, #8
 8002966:	0a19      	lsrs	r1, r3, #8
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	69db      	ldr	r3, [r3, #28]
 800296c:	061a      	lsls	r2, r3, #24
 800296e:	4bbe      	ldr	r3, [pc, #760]	; (8002c68 <HAL_RCC_OscConfig+0x680>)
 8002970:	430a      	orrs	r2, r1
 8002972:	605a      	str	r2, [r3, #4]
 8002974:	e019      	b.n	80029aa <HAL_RCC_OscConfig+0x3c2>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002976:	4bbc      	ldr	r3, [pc, #752]	; (8002c68 <HAL_RCC_OscConfig+0x680>)
 8002978:	681a      	ldr	r2, [r3, #0]
 800297a:	4bbb      	ldr	r3, [pc, #748]	; (8002c68 <HAL_RCC_OscConfig+0x680>)
 800297c:	49bc      	ldr	r1, [pc, #752]	; (8002c70 <HAL_RCC_OscConfig+0x688>)
 800297e:	400a      	ands	r2, r1
 8002980:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002982:	f7ff f829 	bl	80019d8 <HAL_GetTick>
 8002986:	0003      	movs	r3, r0
 8002988:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800298a:	e008      	b.n	800299e <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800298c:	f7ff f824 	bl	80019d8 <HAL_GetTick>
 8002990:	0002      	movs	r2, r0
 8002992:	697b      	ldr	r3, [r7, #20]
 8002994:	1ad3      	subs	r3, r2, r3
 8002996:	2b02      	cmp	r3, #2
 8002998:	d901      	bls.n	800299e <HAL_RCC_OscConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 800299a:	2303      	movs	r3, #3
 800299c:	e19a      	b.n	8002cd4 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800299e:	4bb2      	ldr	r3, [pc, #712]	; (8002c68 <HAL_RCC_OscConfig+0x680>)
 80029a0:	681a      	ldr	r2, [r3, #0]
 80029a2:	2380      	movs	r3, #128	; 0x80
 80029a4:	009b      	lsls	r3, r3, #2
 80029a6:	4013      	ands	r3, r2
 80029a8:	d1f0      	bne.n	800298c <HAL_RCC_OscConfig+0x3a4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	2208      	movs	r2, #8
 80029b0:	4013      	ands	r3, r2
 80029b2:	d036      	beq.n	8002a22 <HAL_RCC_OscConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	695b      	ldr	r3, [r3, #20]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d019      	beq.n	80029f0 <HAL_RCC_OscConfig+0x408>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029bc:	4baa      	ldr	r3, [pc, #680]	; (8002c68 <HAL_RCC_OscConfig+0x680>)
 80029be:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80029c0:	4ba9      	ldr	r3, [pc, #676]	; (8002c68 <HAL_RCC_OscConfig+0x680>)
 80029c2:	2101      	movs	r1, #1
 80029c4:	430a      	orrs	r2, r1
 80029c6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029c8:	f7ff f806 	bl	80019d8 <HAL_GetTick>
 80029cc:	0003      	movs	r3, r0
 80029ce:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80029d0:	e008      	b.n	80029e4 <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80029d2:	f7ff f801 	bl	80019d8 <HAL_GetTick>
 80029d6:	0002      	movs	r2, r0
 80029d8:	697b      	ldr	r3, [r7, #20]
 80029da:	1ad3      	subs	r3, r2, r3
 80029dc:	2b02      	cmp	r3, #2
 80029de:	d901      	bls.n	80029e4 <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 80029e0:	2303      	movs	r3, #3
 80029e2:	e177      	b.n	8002cd4 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80029e4:	4ba0      	ldr	r3, [pc, #640]	; (8002c68 <HAL_RCC_OscConfig+0x680>)
 80029e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029e8:	2202      	movs	r2, #2
 80029ea:	4013      	ands	r3, r2
 80029ec:	d0f1      	beq.n	80029d2 <HAL_RCC_OscConfig+0x3ea>
 80029ee:	e018      	b.n	8002a22 <HAL_RCC_OscConfig+0x43a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029f0:	4b9d      	ldr	r3, [pc, #628]	; (8002c68 <HAL_RCC_OscConfig+0x680>)
 80029f2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80029f4:	4b9c      	ldr	r3, [pc, #624]	; (8002c68 <HAL_RCC_OscConfig+0x680>)
 80029f6:	2101      	movs	r1, #1
 80029f8:	438a      	bics	r2, r1
 80029fa:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029fc:	f7fe ffec 	bl	80019d8 <HAL_GetTick>
 8002a00:	0003      	movs	r3, r0
 8002a02:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002a04:	e008      	b.n	8002a18 <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a06:	f7fe ffe7 	bl	80019d8 <HAL_GetTick>
 8002a0a:	0002      	movs	r2, r0
 8002a0c:	697b      	ldr	r3, [r7, #20]
 8002a0e:	1ad3      	subs	r3, r2, r3
 8002a10:	2b02      	cmp	r3, #2
 8002a12:	d901      	bls.n	8002a18 <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 8002a14:	2303      	movs	r3, #3
 8002a16:	e15d      	b.n	8002cd4 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002a18:	4b93      	ldr	r3, [pc, #588]	; (8002c68 <HAL_RCC_OscConfig+0x680>)
 8002a1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a1c:	2202      	movs	r2, #2
 8002a1e:	4013      	ands	r3, r2
 8002a20:	d1f1      	bne.n	8002a06 <HAL_RCC_OscConfig+0x41e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	2204      	movs	r2, #4
 8002a28:	4013      	ands	r3, r2
 8002a2a:	d100      	bne.n	8002a2e <HAL_RCC_OscConfig+0x446>
 8002a2c:	e0ae      	b.n	8002b8c <HAL_RCC_OscConfig+0x5a4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a2e:	2023      	movs	r0, #35	; 0x23
 8002a30:	183b      	adds	r3, r7, r0
 8002a32:	2200      	movs	r2, #0
 8002a34:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a36:	4b8c      	ldr	r3, [pc, #560]	; (8002c68 <HAL_RCC_OscConfig+0x680>)
 8002a38:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a3a:	2380      	movs	r3, #128	; 0x80
 8002a3c:	055b      	lsls	r3, r3, #21
 8002a3e:	4013      	ands	r3, r2
 8002a40:	d109      	bne.n	8002a56 <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a42:	4b89      	ldr	r3, [pc, #548]	; (8002c68 <HAL_RCC_OscConfig+0x680>)
 8002a44:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a46:	4b88      	ldr	r3, [pc, #544]	; (8002c68 <HAL_RCC_OscConfig+0x680>)
 8002a48:	2180      	movs	r1, #128	; 0x80
 8002a4a:	0549      	lsls	r1, r1, #21
 8002a4c:	430a      	orrs	r2, r1
 8002a4e:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8002a50:	183b      	adds	r3, r7, r0
 8002a52:	2201      	movs	r2, #1
 8002a54:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a56:	4b87      	ldr	r3, [pc, #540]	; (8002c74 <HAL_RCC_OscConfig+0x68c>)
 8002a58:	681a      	ldr	r2, [r3, #0]
 8002a5a:	2380      	movs	r3, #128	; 0x80
 8002a5c:	005b      	lsls	r3, r3, #1
 8002a5e:	4013      	ands	r3, r2
 8002a60:	d11a      	bne.n	8002a98 <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a62:	4b84      	ldr	r3, [pc, #528]	; (8002c74 <HAL_RCC_OscConfig+0x68c>)
 8002a64:	681a      	ldr	r2, [r3, #0]
 8002a66:	4b83      	ldr	r3, [pc, #524]	; (8002c74 <HAL_RCC_OscConfig+0x68c>)
 8002a68:	2180      	movs	r1, #128	; 0x80
 8002a6a:	0049      	lsls	r1, r1, #1
 8002a6c:	430a      	orrs	r2, r1
 8002a6e:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a70:	f7fe ffb2 	bl	80019d8 <HAL_GetTick>
 8002a74:	0003      	movs	r3, r0
 8002a76:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a78:	e008      	b.n	8002a8c <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a7a:	f7fe ffad 	bl	80019d8 <HAL_GetTick>
 8002a7e:	0002      	movs	r2, r0
 8002a80:	697b      	ldr	r3, [r7, #20]
 8002a82:	1ad3      	subs	r3, r2, r3
 8002a84:	2b64      	cmp	r3, #100	; 0x64
 8002a86:	d901      	bls.n	8002a8c <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 8002a88:	2303      	movs	r3, #3
 8002a8a:	e123      	b.n	8002cd4 <HAL_RCC_OscConfig+0x6ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a8c:	4b79      	ldr	r3, [pc, #484]	; (8002c74 <HAL_RCC_OscConfig+0x68c>)
 8002a8e:	681a      	ldr	r2, [r3, #0]
 8002a90:	2380      	movs	r3, #128	; 0x80
 8002a92:	005b      	lsls	r3, r3, #1
 8002a94:	4013      	ands	r3, r2
 8002a96:	d0f0      	beq.n	8002a7a <HAL_RCC_OscConfig+0x492>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	689a      	ldr	r2, [r3, #8]
 8002a9c:	2380      	movs	r3, #128	; 0x80
 8002a9e:	005b      	lsls	r3, r3, #1
 8002aa0:	429a      	cmp	r2, r3
 8002aa2:	d107      	bne.n	8002ab4 <HAL_RCC_OscConfig+0x4cc>
 8002aa4:	4b70      	ldr	r3, [pc, #448]	; (8002c68 <HAL_RCC_OscConfig+0x680>)
 8002aa6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002aa8:	4b6f      	ldr	r3, [pc, #444]	; (8002c68 <HAL_RCC_OscConfig+0x680>)
 8002aaa:	2180      	movs	r1, #128	; 0x80
 8002aac:	0049      	lsls	r1, r1, #1
 8002aae:	430a      	orrs	r2, r1
 8002ab0:	651a      	str	r2, [r3, #80]	; 0x50
 8002ab2:	e031      	b.n	8002b18 <HAL_RCC_OscConfig+0x530>
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	689b      	ldr	r3, [r3, #8]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d10c      	bne.n	8002ad6 <HAL_RCC_OscConfig+0x4ee>
 8002abc:	4b6a      	ldr	r3, [pc, #424]	; (8002c68 <HAL_RCC_OscConfig+0x680>)
 8002abe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002ac0:	4b69      	ldr	r3, [pc, #420]	; (8002c68 <HAL_RCC_OscConfig+0x680>)
 8002ac2:	496b      	ldr	r1, [pc, #428]	; (8002c70 <HAL_RCC_OscConfig+0x688>)
 8002ac4:	400a      	ands	r2, r1
 8002ac6:	651a      	str	r2, [r3, #80]	; 0x50
 8002ac8:	4b67      	ldr	r3, [pc, #412]	; (8002c68 <HAL_RCC_OscConfig+0x680>)
 8002aca:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002acc:	4b66      	ldr	r3, [pc, #408]	; (8002c68 <HAL_RCC_OscConfig+0x680>)
 8002ace:	496a      	ldr	r1, [pc, #424]	; (8002c78 <HAL_RCC_OscConfig+0x690>)
 8002ad0:	400a      	ands	r2, r1
 8002ad2:	651a      	str	r2, [r3, #80]	; 0x50
 8002ad4:	e020      	b.n	8002b18 <HAL_RCC_OscConfig+0x530>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	689a      	ldr	r2, [r3, #8]
 8002ada:	23a0      	movs	r3, #160	; 0xa0
 8002adc:	00db      	lsls	r3, r3, #3
 8002ade:	429a      	cmp	r2, r3
 8002ae0:	d10e      	bne.n	8002b00 <HAL_RCC_OscConfig+0x518>
 8002ae2:	4b61      	ldr	r3, [pc, #388]	; (8002c68 <HAL_RCC_OscConfig+0x680>)
 8002ae4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002ae6:	4b60      	ldr	r3, [pc, #384]	; (8002c68 <HAL_RCC_OscConfig+0x680>)
 8002ae8:	2180      	movs	r1, #128	; 0x80
 8002aea:	00c9      	lsls	r1, r1, #3
 8002aec:	430a      	orrs	r2, r1
 8002aee:	651a      	str	r2, [r3, #80]	; 0x50
 8002af0:	4b5d      	ldr	r3, [pc, #372]	; (8002c68 <HAL_RCC_OscConfig+0x680>)
 8002af2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002af4:	4b5c      	ldr	r3, [pc, #368]	; (8002c68 <HAL_RCC_OscConfig+0x680>)
 8002af6:	2180      	movs	r1, #128	; 0x80
 8002af8:	0049      	lsls	r1, r1, #1
 8002afa:	430a      	orrs	r2, r1
 8002afc:	651a      	str	r2, [r3, #80]	; 0x50
 8002afe:	e00b      	b.n	8002b18 <HAL_RCC_OscConfig+0x530>
 8002b00:	4b59      	ldr	r3, [pc, #356]	; (8002c68 <HAL_RCC_OscConfig+0x680>)
 8002b02:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002b04:	4b58      	ldr	r3, [pc, #352]	; (8002c68 <HAL_RCC_OscConfig+0x680>)
 8002b06:	495a      	ldr	r1, [pc, #360]	; (8002c70 <HAL_RCC_OscConfig+0x688>)
 8002b08:	400a      	ands	r2, r1
 8002b0a:	651a      	str	r2, [r3, #80]	; 0x50
 8002b0c:	4b56      	ldr	r3, [pc, #344]	; (8002c68 <HAL_RCC_OscConfig+0x680>)
 8002b0e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002b10:	4b55      	ldr	r3, [pc, #340]	; (8002c68 <HAL_RCC_OscConfig+0x680>)
 8002b12:	4959      	ldr	r1, [pc, #356]	; (8002c78 <HAL_RCC_OscConfig+0x690>)
 8002b14:	400a      	ands	r2, r1
 8002b16:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	689b      	ldr	r3, [r3, #8]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d015      	beq.n	8002b4c <HAL_RCC_OscConfig+0x564>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b20:	f7fe ff5a 	bl	80019d8 <HAL_GetTick>
 8002b24:	0003      	movs	r3, r0
 8002b26:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002b28:	e009      	b.n	8002b3e <HAL_RCC_OscConfig+0x556>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b2a:	f7fe ff55 	bl	80019d8 <HAL_GetTick>
 8002b2e:	0002      	movs	r2, r0
 8002b30:	697b      	ldr	r3, [r7, #20]
 8002b32:	1ad3      	subs	r3, r2, r3
 8002b34:	4a51      	ldr	r2, [pc, #324]	; (8002c7c <HAL_RCC_OscConfig+0x694>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d901      	bls.n	8002b3e <HAL_RCC_OscConfig+0x556>
        {
          return HAL_TIMEOUT;
 8002b3a:	2303      	movs	r3, #3
 8002b3c:	e0ca      	b.n	8002cd4 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002b3e:	4b4a      	ldr	r3, [pc, #296]	; (8002c68 <HAL_RCC_OscConfig+0x680>)
 8002b40:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002b42:	2380      	movs	r3, #128	; 0x80
 8002b44:	009b      	lsls	r3, r3, #2
 8002b46:	4013      	ands	r3, r2
 8002b48:	d0ef      	beq.n	8002b2a <HAL_RCC_OscConfig+0x542>
 8002b4a:	e014      	b.n	8002b76 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b4c:	f7fe ff44 	bl	80019d8 <HAL_GetTick>
 8002b50:	0003      	movs	r3, r0
 8002b52:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002b54:	e009      	b.n	8002b6a <HAL_RCC_OscConfig+0x582>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b56:	f7fe ff3f 	bl	80019d8 <HAL_GetTick>
 8002b5a:	0002      	movs	r2, r0
 8002b5c:	697b      	ldr	r3, [r7, #20]
 8002b5e:	1ad3      	subs	r3, r2, r3
 8002b60:	4a46      	ldr	r2, [pc, #280]	; (8002c7c <HAL_RCC_OscConfig+0x694>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d901      	bls.n	8002b6a <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
 8002b66:	2303      	movs	r3, #3
 8002b68:	e0b4      	b.n	8002cd4 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002b6a:	4b3f      	ldr	r3, [pc, #252]	; (8002c68 <HAL_RCC_OscConfig+0x680>)
 8002b6c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002b6e:	2380      	movs	r3, #128	; 0x80
 8002b70:	009b      	lsls	r3, r3, #2
 8002b72:	4013      	ands	r3, r2
 8002b74:	d1ef      	bne.n	8002b56 <HAL_RCC_OscConfig+0x56e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002b76:	2323      	movs	r3, #35	; 0x23
 8002b78:	18fb      	adds	r3, r7, r3
 8002b7a:	781b      	ldrb	r3, [r3, #0]
 8002b7c:	2b01      	cmp	r3, #1
 8002b7e:	d105      	bne.n	8002b8c <HAL_RCC_OscConfig+0x5a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b80:	4b39      	ldr	r3, [pc, #228]	; (8002c68 <HAL_RCC_OscConfig+0x680>)
 8002b82:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b84:	4b38      	ldr	r3, [pc, #224]	; (8002c68 <HAL_RCC_OscConfig+0x680>)
 8002b86:	493e      	ldr	r1, [pc, #248]	; (8002c80 <HAL_RCC_OscConfig+0x698>)
 8002b88:	400a      	ands	r2, r1
 8002b8a:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d100      	bne.n	8002b96 <HAL_RCC_OscConfig+0x5ae>
 8002b94:	e09d      	b.n	8002cd2 <HAL_RCC_OscConfig+0x6ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b96:	69fb      	ldr	r3, [r7, #28]
 8002b98:	2b0c      	cmp	r3, #12
 8002b9a:	d100      	bne.n	8002b9e <HAL_RCC_OscConfig+0x5b6>
 8002b9c:	e076      	b.n	8002c8c <HAL_RCC_OscConfig+0x6a4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba2:	2b02      	cmp	r3, #2
 8002ba4:	d145      	bne.n	8002c32 <HAL_RCC_OscConfig+0x64a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ba6:	4b30      	ldr	r3, [pc, #192]	; (8002c68 <HAL_RCC_OscConfig+0x680>)
 8002ba8:	681a      	ldr	r2, [r3, #0]
 8002baa:	4b2f      	ldr	r3, [pc, #188]	; (8002c68 <HAL_RCC_OscConfig+0x680>)
 8002bac:	4935      	ldr	r1, [pc, #212]	; (8002c84 <HAL_RCC_OscConfig+0x69c>)
 8002bae:	400a      	ands	r2, r1
 8002bb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bb2:	f7fe ff11 	bl	80019d8 <HAL_GetTick>
 8002bb6:	0003      	movs	r3, r0
 8002bb8:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002bba:	e008      	b.n	8002bce <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bbc:	f7fe ff0c 	bl	80019d8 <HAL_GetTick>
 8002bc0:	0002      	movs	r2, r0
 8002bc2:	697b      	ldr	r3, [r7, #20]
 8002bc4:	1ad3      	subs	r3, r2, r3
 8002bc6:	2b02      	cmp	r3, #2
 8002bc8:	d901      	bls.n	8002bce <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 8002bca:	2303      	movs	r3, #3
 8002bcc:	e082      	b.n	8002cd4 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002bce:	4b26      	ldr	r3, [pc, #152]	; (8002c68 <HAL_RCC_OscConfig+0x680>)
 8002bd0:	681a      	ldr	r2, [r3, #0]
 8002bd2:	2380      	movs	r3, #128	; 0x80
 8002bd4:	049b      	lsls	r3, r3, #18
 8002bd6:	4013      	ands	r3, r2
 8002bd8:	d1f0      	bne.n	8002bbc <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002bda:	4b23      	ldr	r3, [pc, #140]	; (8002c68 <HAL_RCC_OscConfig+0x680>)
 8002bdc:	68db      	ldr	r3, [r3, #12]
 8002bde:	4a2a      	ldr	r2, [pc, #168]	; (8002c88 <HAL_RCC_OscConfig+0x6a0>)
 8002be0:	4013      	ands	r3, r2
 8002be2:	0019      	movs	r1, r3
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bec:	431a      	orrs	r2, r3
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bf2:	431a      	orrs	r2, r3
 8002bf4:	4b1c      	ldr	r3, [pc, #112]	; (8002c68 <HAL_RCC_OscConfig+0x680>)
 8002bf6:	430a      	orrs	r2, r1
 8002bf8:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002bfa:	4b1b      	ldr	r3, [pc, #108]	; (8002c68 <HAL_RCC_OscConfig+0x680>)
 8002bfc:	681a      	ldr	r2, [r3, #0]
 8002bfe:	4b1a      	ldr	r3, [pc, #104]	; (8002c68 <HAL_RCC_OscConfig+0x680>)
 8002c00:	2180      	movs	r1, #128	; 0x80
 8002c02:	0449      	lsls	r1, r1, #17
 8002c04:	430a      	orrs	r2, r1
 8002c06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c08:	f7fe fee6 	bl	80019d8 <HAL_GetTick>
 8002c0c:	0003      	movs	r3, r0
 8002c0e:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002c10:	e008      	b.n	8002c24 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c12:	f7fe fee1 	bl	80019d8 <HAL_GetTick>
 8002c16:	0002      	movs	r2, r0
 8002c18:	697b      	ldr	r3, [r7, #20]
 8002c1a:	1ad3      	subs	r3, r2, r3
 8002c1c:	2b02      	cmp	r3, #2
 8002c1e:	d901      	bls.n	8002c24 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8002c20:	2303      	movs	r3, #3
 8002c22:	e057      	b.n	8002cd4 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002c24:	4b10      	ldr	r3, [pc, #64]	; (8002c68 <HAL_RCC_OscConfig+0x680>)
 8002c26:	681a      	ldr	r2, [r3, #0]
 8002c28:	2380      	movs	r3, #128	; 0x80
 8002c2a:	049b      	lsls	r3, r3, #18
 8002c2c:	4013      	ands	r3, r2
 8002c2e:	d0f0      	beq.n	8002c12 <HAL_RCC_OscConfig+0x62a>
 8002c30:	e04f      	b.n	8002cd2 <HAL_RCC_OscConfig+0x6ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c32:	4b0d      	ldr	r3, [pc, #52]	; (8002c68 <HAL_RCC_OscConfig+0x680>)
 8002c34:	681a      	ldr	r2, [r3, #0]
 8002c36:	4b0c      	ldr	r3, [pc, #48]	; (8002c68 <HAL_RCC_OscConfig+0x680>)
 8002c38:	4912      	ldr	r1, [pc, #72]	; (8002c84 <HAL_RCC_OscConfig+0x69c>)
 8002c3a:	400a      	ands	r2, r1
 8002c3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c3e:	f7fe fecb 	bl	80019d8 <HAL_GetTick>
 8002c42:	0003      	movs	r3, r0
 8002c44:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002c46:	e008      	b.n	8002c5a <HAL_RCC_OscConfig+0x672>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c48:	f7fe fec6 	bl	80019d8 <HAL_GetTick>
 8002c4c:	0002      	movs	r2, r0
 8002c4e:	697b      	ldr	r3, [r7, #20]
 8002c50:	1ad3      	subs	r3, r2, r3
 8002c52:	2b02      	cmp	r3, #2
 8002c54:	d901      	bls.n	8002c5a <HAL_RCC_OscConfig+0x672>
          {
            return HAL_TIMEOUT;
 8002c56:	2303      	movs	r3, #3
 8002c58:	e03c      	b.n	8002cd4 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002c5a:	4b03      	ldr	r3, [pc, #12]	; (8002c68 <HAL_RCC_OscConfig+0x680>)
 8002c5c:	681a      	ldr	r2, [r3, #0]
 8002c5e:	2380      	movs	r3, #128	; 0x80
 8002c60:	049b      	lsls	r3, r3, #18
 8002c62:	4013      	ands	r3, r2
 8002c64:	d1f0      	bne.n	8002c48 <HAL_RCC_OscConfig+0x660>
 8002c66:	e034      	b.n	8002cd2 <HAL_RCC_OscConfig+0x6ea>
 8002c68:	40021000 	.word	0x40021000
 8002c6c:	ffff1fff 	.word	0xffff1fff
 8002c70:	fffffeff 	.word	0xfffffeff
 8002c74:	40007000 	.word	0x40007000
 8002c78:	fffffbff 	.word	0xfffffbff
 8002c7c:	00001388 	.word	0x00001388
 8002c80:	efffffff 	.word	0xefffffff
 8002c84:	feffffff 	.word	0xfeffffff
 8002c88:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c90:	2b01      	cmp	r3, #1
 8002c92:	d101      	bne.n	8002c98 <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
 8002c94:	2301      	movs	r3, #1
 8002c96:	e01d      	b.n	8002cd4 <HAL_RCC_OscConfig+0x6ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002c98:	4b10      	ldr	r3, [pc, #64]	; (8002cdc <HAL_RCC_OscConfig+0x6f4>)
 8002c9a:	68db      	ldr	r3, [r3, #12]
 8002c9c:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c9e:	69ba      	ldr	r2, [r7, #24]
 8002ca0:	2380      	movs	r3, #128	; 0x80
 8002ca2:	025b      	lsls	r3, r3, #9
 8002ca4:	401a      	ands	r2, r3
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002caa:	429a      	cmp	r2, r3
 8002cac:	d10f      	bne.n	8002cce <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002cae:	69ba      	ldr	r2, [r7, #24]
 8002cb0:	23f0      	movs	r3, #240	; 0xf0
 8002cb2:	039b      	lsls	r3, r3, #14
 8002cb4:	401a      	ands	r2, r3
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cba:	429a      	cmp	r2, r3
 8002cbc:	d107      	bne.n	8002cce <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8002cbe:	69ba      	ldr	r2, [r7, #24]
 8002cc0:	23c0      	movs	r3, #192	; 0xc0
 8002cc2:	041b      	lsls	r3, r3, #16
 8002cc4:	401a      	ands	r2, r3
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002cca:	429a      	cmp	r2, r3
 8002ccc:	d001      	beq.n	8002cd2 <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_ERROR;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	e000      	b.n	8002cd4 <HAL_RCC_OscConfig+0x6ec>
        }
      }
    }
  }
  return HAL_OK;
 8002cd2:	2300      	movs	r3, #0
}
 8002cd4:	0018      	movs	r0, r3
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	b00a      	add	sp, #40	; 0x28
 8002cda:	bdb0      	pop	{r4, r5, r7, pc}
 8002cdc:	40021000 	.word	0x40021000

08002ce0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ce0:	b5b0      	push	{r4, r5, r7, lr}
 8002ce2:	b084      	sub	sp, #16
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
 8002ce8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d101      	bne.n	8002cf4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	e128      	b.n	8002f46 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002cf4:	4b96      	ldr	r3, [pc, #600]	; (8002f50 <HAL_RCC_ClockConfig+0x270>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	2201      	movs	r2, #1
 8002cfa:	4013      	ands	r3, r2
 8002cfc:	683a      	ldr	r2, [r7, #0]
 8002cfe:	429a      	cmp	r2, r3
 8002d00:	d91e      	bls.n	8002d40 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d02:	4b93      	ldr	r3, [pc, #588]	; (8002f50 <HAL_RCC_ClockConfig+0x270>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	2201      	movs	r2, #1
 8002d08:	4393      	bics	r3, r2
 8002d0a:	0019      	movs	r1, r3
 8002d0c:	4b90      	ldr	r3, [pc, #576]	; (8002f50 <HAL_RCC_ClockConfig+0x270>)
 8002d0e:	683a      	ldr	r2, [r7, #0]
 8002d10:	430a      	orrs	r2, r1
 8002d12:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002d14:	f7fe fe60 	bl	80019d8 <HAL_GetTick>
 8002d18:	0003      	movs	r3, r0
 8002d1a:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d1c:	e009      	b.n	8002d32 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d1e:	f7fe fe5b 	bl	80019d8 <HAL_GetTick>
 8002d22:	0002      	movs	r2, r0
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	1ad3      	subs	r3, r2, r3
 8002d28:	4a8a      	ldr	r2, [pc, #552]	; (8002f54 <HAL_RCC_ClockConfig+0x274>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d901      	bls.n	8002d32 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002d2e:	2303      	movs	r3, #3
 8002d30:	e109      	b.n	8002f46 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d32:	4b87      	ldr	r3, [pc, #540]	; (8002f50 <HAL_RCC_ClockConfig+0x270>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	2201      	movs	r2, #1
 8002d38:	4013      	ands	r3, r2
 8002d3a:	683a      	ldr	r2, [r7, #0]
 8002d3c:	429a      	cmp	r2, r3
 8002d3e:	d1ee      	bne.n	8002d1e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	2202      	movs	r2, #2
 8002d46:	4013      	ands	r3, r2
 8002d48:	d009      	beq.n	8002d5e <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d4a:	4b83      	ldr	r3, [pc, #524]	; (8002f58 <HAL_RCC_ClockConfig+0x278>)
 8002d4c:	68db      	ldr	r3, [r3, #12]
 8002d4e:	22f0      	movs	r2, #240	; 0xf0
 8002d50:	4393      	bics	r3, r2
 8002d52:	0019      	movs	r1, r3
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	689a      	ldr	r2, [r3, #8]
 8002d58:	4b7f      	ldr	r3, [pc, #508]	; (8002f58 <HAL_RCC_ClockConfig+0x278>)
 8002d5a:	430a      	orrs	r2, r1
 8002d5c:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	2201      	movs	r2, #1
 8002d64:	4013      	ands	r3, r2
 8002d66:	d100      	bne.n	8002d6a <HAL_RCC_ClockConfig+0x8a>
 8002d68:	e089      	b.n	8002e7e <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	2b02      	cmp	r3, #2
 8002d70:	d107      	bne.n	8002d82 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002d72:	4b79      	ldr	r3, [pc, #484]	; (8002f58 <HAL_RCC_ClockConfig+0x278>)
 8002d74:	681a      	ldr	r2, [r3, #0]
 8002d76:	2380      	movs	r3, #128	; 0x80
 8002d78:	029b      	lsls	r3, r3, #10
 8002d7a:	4013      	ands	r3, r2
 8002d7c:	d120      	bne.n	8002dc0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	e0e1      	b.n	8002f46 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	2b03      	cmp	r3, #3
 8002d88:	d107      	bne.n	8002d9a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002d8a:	4b73      	ldr	r3, [pc, #460]	; (8002f58 <HAL_RCC_ClockConfig+0x278>)
 8002d8c:	681a      	ldr	r2, [r3, #0]
 8002d8e:	2380      	movs	r3, #128	; 0x80
 8002d90:	049b      	lsls	r3, r3, #18
 8002d92:	4013      	ands	r3, r2
 8002d94:	d114      	bne.n	8002dc0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002d96:	2301      	movs	r3, #1
 8002d98:	e0d5      	b.n	8002f46 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	2b01      	cmp	r3, #1
 8002da0:	d106      	bne.n	8002db0 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002da2:	4b6d      	ldr	r3, [pc, #436]	; (8002f58 <HAL_RCC_ClockConfig+0x278>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	2204      	movs	r2, #4
 8002da8:	4013      	ands	r3, r2
 8002daa:	d109      	bne.n	8002dc0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002dac:	2301      	movs	r3, #1
 8002dae:	e0ca      	b.n	8002f46 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002db0:	4b69      	ldr	r3, [pc, #420]	; (8002f58 <HAL_RCC_ClockConfig+0x278>)
 8002db2:	681a      	ldr	r2, [r3, #0]
 8002db4:	2380      	movs	r3, #128	; 0x80
 8002db6:	009b      	lsls	r3, r3, #2
 8002db8:	4013      	ands	r3, r2
 8002dba:	d101      	bne.n	8002dc0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	e0c2      	b.n	8002f46 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002dc0:	4b65      	ldr	r3, [pc, #404]	; (8002f58 <HAL_RCC_ClockConfig+0x278>)
 8002dc2:	68db      	ldr	r3, [r3, #12]
 8002dc4:	2203      	movs	r2, #3
 8002dc6:	4393      	bics	r3, r2
 8002dc8:	0019      	movs	r1, r3
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	685a      	ldr	r2, [r3, #4]
 8002dce:	4b62      	ldr	r3, [pc, #392]	; (8002f58 <HAL_RCC_ClockConfig+0x278>)
 8002dd0:	430a      	orrs	r2, r1
 8002dd2:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002dd4:	f7fe fe00 	bl	80019d8 <HAL_GetTick>
 8002dd8:	0003      	movs	r3, r0
 8002dda:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	2b02      	cmp	r3, #2
 8002de2:	d111      	bne.n	8002e08 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002de4:	e009      	b.n	8002dfa <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002de6:	f7fe fdf7 	bl	80019d8 <HAL_GetTick>
 8002dea:	0002      	movs	r2, r0
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	1ad3      	subs	r3, r2, r3
 8002df0:	4a58      	ldr	r2, [pc, #352]	; (8002f54 <HAL_RCC_ClockConfig+0x274>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d901      	bls.n	8002dfa <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8002df6:	2303      	movs	r3, #3
 8002df8:	e0a5      	b.n	8002f46 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002dfa:	4b57      	ldr	r3, [pc, #348]	; (8002f58 <HAL_RCC_ClockConfig+0x278>)
 8002dfc:	68db      	ldr	r3, [r3, #12]
 8002dfe:	220c      	movs	r2, #12
 8002e00:	4013      	ands	r3, r2
 8002e02:	2b08      	cmp	r3, #8
 8002e04:	d1ef      	bne.n	8002de6 <HAL_RCC_ClockConfig+0x106>
 8002e06:	e03a      	b.n	8002e7e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	2b03      	cmp	r3, #3
 8002e0e:	d111      	bne.n	8002e34 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e10:	e009      	b.n	8002e26 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e12:	f7fe fde1 	bl	80019d8 <HAL_GetTick>
 8002e16:	0002      	movs	r2, r0
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	1ad3      	subs	r3, r2, r3
 8002e1c:	4a4d      	ldr	r2, [pc, #308]	; (8002f54 <HAL_RCC_ClockConfig+0x274>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d901      	bls.n	8002e26 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8002e22:	2303      	movs	r3, #3
 8002e24:	e08f      	b.n	8002f46 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e26:	4b4c      	ldr	r3, [pc, #304]	; (8002f58 <HAL_RCC_ClockConfig+0x278>)
 8002e28:	68db      	ldr	r3, [r3, #12]
 8002e2a:	220c      	movs	r2, #12
 8002e2c:	4013      	ands	r3, r2
 8002e2e:	2b0c      	cmp	r3, #12
 8002e30:	d1ef      	bne.n	8002e12 <HAL_RCC_ClockConfig+0x132>
 8002e32:	e024      	b.n	8002e7e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	2b01      	cmp	r3, #1
 8002e3a:	d11b      	bne.n	8002e74 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002e3c:	e009      	b.n	8002e52 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e3e:	f7fe fdcb 	bl	80019d8 <HAL_GetTick>
 8002e42:	0002      	movs	r2, r0
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	1ad3      	subs	r3, r2, r3
 8002e48:	4a42      	ldr	r2, [pc, #264]	; (8002f54 <HAL_RCC_ClockConfig+0x274>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d901      	bls.n	8002e52 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8002e4e:	2303      	movs	r3, #3
 8002e50:	e079      	b.n	8002f46 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002e52:	4b41      	ldr	r3, [pc, #260]	; (8002f58 <HAL_RCC_ClockConfig+0x278>)
 8002e54:	68db      	ldr	r3, [r3, #12]
 8002e56:	220c      	movs	r2, #12
 8002e58:	4013      	ands	r3, r2
 8002e5a:	2b04      	cmp	r3, #4
 8002e5c:	d1ef      	bne.n	8002e3e <HAL_RCC_ClockConfig+0x15e>
 8002e5e:	e00e      	b.n	8002e7e <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e60:	f7fe fdba 	bl	80019d8 <HAL_GetTick>
 8002e64:	0002      	movs	r2, r0
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	1ad3      	subs	r3, r2, r3
 8002e6a:	4a3a      	ldr	r2, [pc, #232]	; (8002f54 <HAL_RCC_ClockConfig+0x274>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d901      	bls.n	8002e74 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8002e70:	2303      	movs	r3, #3
 8002e72:	e068      	b.n	8002f46 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002e74:	4b38      	ldr	r3, [pc, #224]	; (8002f58 <HAL_RCC_ClockConfig+0x278>)
 8002e76:	68db      	ldr	r3, [r3, #12]
 8002e78:	220c      	movs	r2, #12
 8002e7a:	4013      	ands	r3, r2
 8002e7c:	d1f0      	bne.n	8002e60 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e7e:	4b34      	ldr	r3, [pc, #208]	; (8002f50 <HAL_RCC_ClockConfig+0x270>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	2201      	movs	r2, #1
 8002e84:	4013      	ands	r3, r2
 8002e86:	683a      	ldr	r2, [r7, #0]
 8002e88:	429a      	cmp	r2, r3
 8002e8a:	d21e      	bcs.n	8002eca <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e8c:	4b30      	ldr	r3, [pc, #192]	; (8002f50 <HAL_RCC_ClockConfig+0x270>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	2201      	movs	r2, #1
 8002e92:	4393      	bics	r3, r2
 8002e94:	0019      	movs	r1, r3
 8002e96:	4b2e      	ldr	r3, [pc, #184]	; (8002f50 <HAL_RCC_ClockConfig+0x270>)
 8002e98:	683a      	ldr	r2, [r7, #0]
 8002e9a:	430a      	orrs	r2, r1
 8002e9c:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002e9e:	f7fe fd9b 	bl	80019d8 <HAL_GetTick>
 8002ea2:	0003      	movs	r3, r0
 8002ea4:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ea6:	e009      	b.n	8002ebc <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ea8:	f7fe fd96 	bl	80019d8 <HAL_GetTick>
 8002eac:	0002      	movs	r2, r0
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	1ad3      	subs	r3, r2, r3
 8002eb2:	4a28      	ldr	r2, [pc, #160]	; (8002f54 <HAL_RCC_ClockConfig+0x274>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d901      	bls.n	8002ebc <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8002eb8:	2303      	movs	r3, #3
 8002eba:	e044      	b.n	8002f46 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ebc:	4b24      	ldr	r3, [pc, #144]	; (8002f50 <HAL_RCC_ClockConfig+0x270>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	2201      	movs	r2, #1
 8002ec2:	4013      	ands	r3, r2
 8002ec4:	683a      	ldr	r2, [r7, #0]
 8002ec6:	429a      	cmp	r2, r3
 8002ec8:	d1ee      	bne.n	8002ea8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	2204      	movs	r2, #4
 8002ed0:	4013      	ands	r3, r2
 8002ed2:	d009      	beq.n	8002ee8 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ed4:	4b20      	ldr	r3, [pc, #128]	; (8002f58 <HAL_RCC_ClockConfig+0x278>)
 8002ed6:	68db      	ldr	r3, [r3, #12]
 8002ed8:	4a20      	ldr	r2, [pc, #128]	; (8002f5c <HAL_RCC_ClockConfig+0x27c>)
 8002eda:	4013      	ands	r3, r2
 8002edc:	0019      	movs	r1, r3
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	68da      	ldr	r2, [r3, #12]
 8002ee2:	4b1d      	ldr	r3, [pc, #116]	; (8002f58 <HAL_RCC_ClockConfig+0x278>)
 8002ee4:	430a      	orrs	r2, r1
 8002ee6:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	2208      	movs	r2, #8
 8002eee:	4013      	ands	r3, r2
 8002ef0:	d00a      	beq.n	8002f08 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002ef2:	4b19      	ldr	r3, [pc, #100]	; (8002f58 <HAL_RCC_ClockConfig+0x278>)
 8002ef4:	68db      	ldr	r3, [r3, #12]
 8002ef6:	4a1a      	ldr	r2, [pc, #104]	; (8002f60 <HAL_RCC_ClockConfig+0x280>)
 8002ef8:	4013      	ands	r3, r2
 8002efa:	0019      	movs	r1, r3
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	691b      	ldr	r3, [r3, #16]
 8002f00:	00da      	lsls	r2, r3, #3
 8002f02:	4b15      	ldr	r3, [pc, #84]	; (8002f58 <HAL_RCC_ClockConfig+0x278>)
 8002f04:	430a      	orrs	r2, r1
 8002f06:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002f08:	f000 f832 	bl	8002f70 <HAL_RCC_GetSysClockFreq>
 8002f0c:	0001      	movs	r1, r0
 8002f0e:	4b12      	ldr	r3, [pc, #72]	; (8002f58 <HAL_RCC_ClockConfig+0x278>)
 8002f10:	68db      	ldr	r3, [r3, #12]
 8002f12:	091b      	lsrs	r3, r3, #4
 8002f14:	220f      	movs	r2, #15
 8002f16:	4013      	ands	r3, r2
 8002f18:	4a12      	ldr	r2, [pc, #72]	; (8002f64 <HAL_RCC_ClockConfig+0x284>)
 8002f1a:	5cd3      	ldrb	r3, [r2, r3]
 8002f1c:	000a      	movs	r2, r1
 8002f1e:	40da      	lsrs	r2, r3
 8002f20:	4b11      	ldr	r3, [pc, #68]	; (8002f68 <HAL_RCC_ClockConfig+0x288>)
 8002f22:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002f24:	4b11      	ldr	r3, [pc, #68]	; (8002f6c <HAL_RCC_ClockConfig+0x28c>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	250b      	movs	r5, #11
 8002f2a:	197c      	adds	r4, r7, r5
 8002f2c:	0018      	movs	r0, r3
 8002f2e:	f7fe fd0d 	bl	800194c <HAL_InitTick>
 8002f32:	0003      	movs	r3, r0
 8002f34:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8002f36:	197b      	adds	r3, r7, r5
 8002f38:	781b      	ldrb	r3, [r3, #0]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d002      	beq.n	8002f44 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8002f3e:	197b      	adds	r3, r7, r5
 8002f40:	781b      	ldrb	r3, [r3, #0]
 8002f42:	e000      	b.n	8002f46 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8002f44:	2300      	movs	r3, #0
}
 8002f46:	0018      	movs	r0, r3
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	b004      	add	sp, #16
 8002f4c:	bdb0      	pop	{r4, r5, r7, pc}
 8002f4e:	46c0      	nop			; (mov r8, r8)
 8002f50:	40022000 	.word	0x40022000
 8002f54:	00001388 	.word	0x00001388
 8002f58:	40021000 	.word	0x40021000
 8002f5c:	fffff8ff 	.word	0xfffff8ff
 8002f60:	ffffc7ff 	.word	0xffffc7ff
 8002f64:	08003bf0 	.word	0x08003bf0
 8002f68:	2000000c 	.word	0x2000000c
 8002f6c:	20000010 	.word	0x20000010

08002f70 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f70:	b5b0      	push	{r4, r5, r7, lr}
 8002f72:	b08e      	sub	sp, #56	; 0x38
 8002f74:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8002f76:	4b4c      	ldr	r3, [pc, #304]	; (80030a8 <HAL_RCC_GetSysClockFreq+0x138>)
 8002f78:	68db      	ldr	r3, [r3, #12]
 8002f7a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002f7c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f7e:	230c      	movs	r3, #12
 8002f80:	4013      	ands	r3, r2
 8002f82:	2b0c      	cmp	r3, #12
 8002f84:	d014      	beq.n	8002fb0 <HAL_RCC_GetSysClockFreq+0x40>
 8002f86:	d900      	bls.n	8002f8a <HAL_RCC_GetSysClockFreq+0x1a>
 8002f88:	e07b      	b.n	8003082 <HAL_RCC_GetSysClockFreq+0x112>
 8002f8a:	2b04      	cmp	r3, #4
 8002f8c:	d002      	beq.n	8002f94 <HAL_RCC_GetSysClockFreq+0x24>
 8002f8e:	2b08      	cmp	r3, #8
 8002f90:	d00b      	beq.n	8002faa <HAL_RCC_GetSysClockFreq+0x3a>
 8002f92:	e076      	b.n	8003082 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002f94:	4b44      	ldr	r3, [pc, #272]	; (80030a8 <HAL_RCC_GetSysClockFreq+0x138>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	2210      	movs	r2, #16
 8002f9a:	4013      	ands	r3, r2
 8002f9c:	d002      	beq.n	8002fa4 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8002f9e:	4b43      	ldr	r3, [pc, #268]	; (80030ac <HAL_RCC_GetSysClockFreq+0x13c>)
 8002fa0:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8002fa2:	e07c      	b.n	800309e <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8002fa4:	4b42      	ldr	r3, [pc, #264]	; (80030b0 <HAL_RCC_GetSysClockFreq+0x140>)
 8002fa6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002fa8:	e079      	b.n	800309e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002faa:	4b42      	ldr	r3, [pc, #264]	; (80030b4 <HAL_RCC_GetSysClockFreq+0x144>)
 8002fac:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002fae:	e076      	b.n	800309e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002fb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fb2:	0c9a      	lsrs	r2, r3, #18
 8002fb4:	230f      	movs	r3, #15
 8002fb6:	401a      	ands	r2, r3
 8002fb8:	4b3f      	ldr	r3, [pc, #252]	; (80030b8 <HAL_RCC_GetSysClockFreq+0x148>)
 8002fba:	5c9b      	ldrb	r3, [r3, r2]
 8002fbc:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8002fbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fc0:	0d9a      	lsrs	r2, r3, #22
 8002fc2:	2303      	movs	r3, #3
 8002fc4:	4013      	ands	r3, r2
 8002fc6:	3301      	adds	r3, #1
 8002fc8:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002fca:	4b37      	ldr	r3, [pc, #220]	; (80030a8 <HAL_RCC_GetSysClockFreq+0x138>)
 8002fcc:	68da      	ldr	r2, [r3, #12]
 8002fce:	2380      	movs	r3, #128	; 0x80
 8002fd0:	025b      	lsls	r3, r3, #9
 8002fd2:	4013      	ands	r3, r2
 8002fd4:	d01a      	beq.n	800300c <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002fd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fd8:	61bb      	str	r3, [r7, #24]
 8002fda:	2300      	movs	r3, #0
 8002fdc:	61fb      	str	r3, [r7, #28]
 8002fde:	4a35      	ldr	r2, [pc, #212]	; (80030b4 <HAL_RCC_GetSysClockFreq+0x144>)
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	69b8      	ldr	r0, [r7, #24]
 8002fe4:	69f9      	ldr	r1, [r7, #28]
 8002fe6:	f7fd f975 	bl	80002d4 <__aeabi_lmul>
 8002fea:	0002      	movs	r2, r0
 8002fec:	000b      	movs	r3, r1
 8002fee:	0010      	movs	r0, r2
 8002ff0:	0019      	movs	r1, r3
 8002ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ff4:	613b      	str	r3, [r7, #16]
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	617b      	str	r3, [r7, #20]
 8002ffa:	693a      	ldr	r2, [r7, #16]
 8002ffc:	697b      	ldr	r3, [r7, #20]
 8002ffe:	f7fd f949 	bl	8000294 <__aeabi_uldivmod>
 8003002:	0002      	movs	r2, r0
 8003004:	000b      	movs	r3, r1
 8003006:	0013      	movs	r3, r2
 8003008:	637b      	str	r3, [r7, #52]	; 0x34
 800300a:	e037      	b.n	800307c <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800300c:	4b26      	ldr	r3, [pc, #152]	; (80030a8 <HAL_RCC_GetSysClockFreq+0x138>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	2210      	movs	r2, #16
 8003012:	4013      	ands	r3, r2
 8003014:	d01a      	beq.n	800304c <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8003016:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003018:	60bb      	str	r3, [r7, #8]
 800301a:	2300      	movs	r3, #0
 800301c:	60fb      	str	r3, [r7, #12]
 800301e:	4a23      	ldr	r2, [pc, #140]	; (80030ac <HAL_RCC_GetSysClockFreq+0x13c>)
 8003020:	2300      	movs	r3, #0
 8003022:	68b8      	ldr	r0, [r7, #8]
 8003024:	68f9      	ldr	r1, [r7, #12]
 8003026:	f7fd f955 	bl	80002d4 <__aeabi_lmul>
 800302a:	0002      	movs	r2, r0
 800302c:	000b      	movs	r3, r1
 800302e:	0010      	movs	r0, r2
 8003030:	0019      	movs	r1, r3
 8003032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003034:	603b      	str	r3, [r7, #0]
 8003036:	2300      	movs	r3, #0
 8003038:	607b      	str	r3, [r7, #4]
 800303a:	683a      	ldr	r2, [r7, #0]
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	f7fd f929 	bl	8000294 <__aeabi_uldivmod>
 8003042:	0002      	movs	r2, r0
 8003044:	000b      	movs	r3, r1
 8003046:	0013      	movs	r3, r2
 8003048:	637b      	str	r3, [r7, #52]	; 0x34
 800304a:	e017      	b.n	800307c <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800304c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800304e:	0018      	movs	r0, r3
 8003050:	2300      	movs	r3, #0
 8003052:	0019      	movs	r1, r3
 8003054:	4a16      	ldr	r2, [pc, #88]	; (80030b0 <HAL_RCC_GetSysClockFreq+0x140>)
 8003056:	2300      	movs	r3, #0
 8003058:	f7fd f93c 	bl	80002d4 <__aeabi_lmul>
 800305c:	0002      	movs	r2, r0
 800305e:	000b      	movs	r3, r1
 8003060:	0010      	movs	r0, r2
 8003062:	0019      	movs	r1, r3
 8003064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003066:	001c      	movs	r4, r3
 8003068:	2300      	movs	r3, #0
 800306a:	001d      	movs	r5, r3
 800306c:	0022      	movs	r2, r4
 800306e:	002b      	movs	r3, r5
 8003070:	f7fd f910 	bl	8000294 <__aeabi_uldivmod>
 8003074:	0002      	movs	r2, r0
 8003076:	000b      	movs	r3, r1
 8003078:	0013      	movs	r3, r2
 800307a:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 800307c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800307e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003080:	e00d      	b.n	800309e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8003082:	4b09      	ldr	r3, [pc, #36]	; (80030a8 <HAL_RCC_GetSysClockFreq+0x138>)
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	0b5b      	lsrs	r3, r3, #13
 8003088:	2207      	movs	r2, #7
 800308a:	4013      	ands	r3, r2
 800308c:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800308e:	6a3b      	ldr	r3, [r7, #32]
 8003090:	3301      	adds	r3, #1
 8003092:	2280      	movs	r2, #128	; 0x80
 8003094:	0212      	lsls	r2, r2, #8
 8003096:	409a      	lsls	r2, r3
 8003098:	0013      	movs	r3, r2
 800309a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800309c:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800309e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80030a0:	0018      	movs	r0, r3
 80030a2:	46bd      	mov	sp, r7
 80030a4:	b00e      	add	sp, #56	; 0x38
 80030a6:	bdb0      	pop	{r4, r5, r7, pc}
 80030a8:	40021000 	.word	0x40021000
 80030ac:	003d0900 	.word	0x003d0900
 80030b0:	00f42400 	.word	0x00f42400
 80030b4:	007a1200 	.word	0x007a1200
 80030b8:	08003c00 	.word	0x08003c00

080030bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b082      	sub	sp, #8
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d101      	bne.n	80030ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80030ca:	2301      	movs	r3, #1
 80030cc:	e032      	b.n	8003134 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2239      	movs	r2, #57	; 0x39
 80030d2:	5c9b      	ldrb	r3, [r3, r2]
 80030d4:	b2db      	uxtb	r3, r3
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d107      	bne.n	80030ea <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2238      	movs	r2, #56	; 0x38
 80030de:	2100      	movs	r1, #0
 80030e0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	0018      	movs	r0, r3
 80030e6:	f7fe fb53 	bl	8001790 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2239      	movs	r2, #57	; 0x39
 80030ee:	2102      	movs	r1, #2
 80030f0:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681a      	ldr	r2, [r3, #0]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	3304      	adds	r3, #4
 80030fa:	0019      	movs	r1, r3
 80030fc:	0010      	movs	r0, r2
 80030fe:	f000 fa83 	bl	8003608 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	223e      	movs	r2, #62	; 0x3e
 8003106:	2101      	movs	r1, #1
 8003108:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	223a      	movs	r2, #58	; 0x3a
 800310e:	2101      	movs	r1, #1
 8003110:	5499      	strb	r1, [r3, r2]
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	223b      	movs	r2, #59	; 0x3b
 8003116:	2101      	movs	r1, #1
 8003118:	5499      	strb	r1, [r3, r2]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	223c      	movs	r2, #60	; 0x3c
 800311e:	2101      	movs	r1, #1
 8003120:	5499      	strb	r1, [r3, r2]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	223d      	movs	r2, #61	; 0x3d
 8003126:	2101      	movs	r1, #1
 8003128:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2239      	movs	r2, #57	; 0x39
 800312e:	2101      	movs	r1, #1
 8003130:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003132:	2300      	movs	r3, #0
}
 8003134:	0018      	movs	r0, r3
 8003136:	46bd      	mov	sp, r7
 8003138:	b002      	add	sp, #8
 800313a:	bd80      	pop	{r7, pc}

0800313c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b082      	sub	sp, #8
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d101      	bne.n	800314e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800314a:	2301      	movs	r3, #1
 800314c:	e032      	b.n	80031b4 <HAL_TIM_PWM_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2239      	movs	r2, #57	; 0x39
 8003152:	5c9b      	ldrb	r3, [r3, r2]
 8003154:	b2db      	uxtb	r3, r3
 8003156:	2b00      	cmp	r3, #0
 8003158:	d107      	bne.n	800316a <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2238      	movs	r2, #56	; 0x38
 800315e:	2100      	movs	r1, #0
 8003160:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	0018      	movs	r0, r3
 8003166:	f000 f829 	bl	80031bc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2239      	movs	r2, #57	; 0x39
 800316e:	2102      	movs	r1, #2
 8003170:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681a      	ldr	r2, [r3, #0]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	3304      	adds	r3, #4
 800317a:	0019      	movs	r1, r3
 800317c:	0010      	movs	r0, r2
 800317e:	f000 fa43 	bl	8003608 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	223e      	movs	r2, #62	; 0x3e
 8003186:	2101      	movs	r1, #1
 8003188:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	223a      	movs	r2, #58	; 0x3a
 800318e:	2101      	movs	r1, #1
 8003190:	5499      	strb	r1, [r3, r2]
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	223b      	movs	r2, #59	; 0x3b
 8003196:	2101      	movs	r1, #1
 8003198:	5499      	strb	r1, [r3, r2]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	223c      	movs	r2, #60	; 0x3c
 800319e:	2101      	movs	r1, #1
 80031a0:	5499      	strb	r1, [r3, r2]
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	223d      	movs	r2, #61	; 0x3d
 80031a6:	2101      	movs	r1, #1
 80031a8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2239      	movs	r2, #57	; 0x39
 80031ae:	2101      	movs	r1, #1
 80031b0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80031b2:	2300      	movs	r3, #0
}
 80031b4:	0018      	movs	r0, r3
 80031b6:	46bd      	mov	sp, r7
 80031b8:	b002      	add	sp, #8
 80031ba:	bd80      	pop	{r7, pc}

080031bc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b082      	sub	sp, #8
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80031c4:	46c0      	nop			; (mov r8, r8)
 80031c6:	46bd      	mov	sp, r7
 80031c8:	b002      	add	sp, #8
 80031ca:	bd80      	pop	{r7, pc}

080031cc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b084      	sub	sp, #16
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
 80031d4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d108      	bne.n	80031ee <HAL_TIM_PWM_Start+0x22>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	223a      	movs	r2, #58	; 0x3a
 80031e0:	5c9b      	ldrb	r3, [r3, r2]
 80031e2:	b2db      	uxtb	r3, r3
 80031e4:	3b01      	subs	r3, #1
 80031e6:	1e5a      	subs	r2, r3, #1
 80031e8:	4193      	sbcs	r3, r2
 80031ea:	b2db      	uxtb	r3, r3
 80031ec:	e01f      	b.n	800322e <HAL_TIM_PWM_Start+0x62>
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	2b04      	cmp	r3, #4
 80031f2:	d108      	bne.n	8003206 <HAL_TIM_PWM_Start+0x3a>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	223b      	movs	r2, #59	; 0x3b
 80031f8:	5c9b      	ldrb	r3, [r3, r2]
 80031fa:	b2db      	uxtb	r3, r3
 80031fc:	3b01      	subs	r3, #1
 80031fe:	1e5a      	subs	r2, r3, #1
 8003200:	4193      	sbcs	r3, r2
 8003202:	b2db      	uxtb	r3, r3
 8003204:	e013      	b.n	800322e <HAL_TIM_PWM_Start+0x62>
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	2b08      	cmp	r3, #8
 800320a:	d108      	bne.n	800321e <HAL_TIM_PWM_Start+0x52>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	223c      	movs	r2, #60	; 0x3c
 8003210:	5c9b      	ldrb	r3, [r3, r2]
 8003212:	b2db      	uxtb	r3, r3
 8003214:	3b01      	subs	r3, #1
 8003216:	1e5a      	subs	r2, r3, #1
 8003218:	4193      	sbcs	r3, r2
 800321a:	b2db      	uxtb	r3, r3
 800321c:	e007      	b.n	800322e <HAL_TIM_PWM_Start+0x62>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	223d      	movs	r2, #61	; 0x3d
 8003222:	5c9b      	ldrb	r3, [r3, r2]
 8003224:	b2db      	uxtb	r3, r3
 8003226:	3b01      	subs	r3, #1
 8003228:	1e5a      	subs	r2, r3, #1
 800322a:	4193      	sbcs	r3, r2
 800322c:	b2db      	uxtb	r3, r3
 800322e:	2b00      	cmp	r3, #0
 8003230:	d001      	beq.n	8003236 <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 8003232:	2301      	movs	r3, #1
 8003234:	e048      	b.n	80032c8 <HAL_TIM_PWM_Start+0xfc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d104      	bne.n	8003246 <HAL_TIM_PWM_Start+0x7a>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	223a      	movs	r2, #58	; 0x3a
 8003240:	2102      	movs	r1, #2
 8003242:	5499      	strb	r1, [r3, r2]
 8003244:	e013      	b.n	800326e <HAL_TIM_PWM_Start+0xa2>
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	2b04      	cmp	r3, #4
 800324a:	d104      	bne.n	8003256 <HAL_TIM_PWM_Start+0x8a>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	223b      	movs	r2, #59	; 0x3b
 8003250:	2102      	movs	r1, #2
 8003252:	5499      	strb	r1, [r3, r2]
 8003254:	e00b      	b.n	800326e <HAL_TIM_PWM_Start+0xa2>
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	2b08      	cmp	r3, #8
 800325a:	d104      	bne.n	8003266 <HAL_TIM_PWM_Start+0x9a>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	223c      	movs	r2, #60	; 0x3c
 8003260:	2102      	movs	r1, #2
 8003262:	5499      	strb	r1, [r3, r2]
 8003264:	e003      	b.n	800326e <HAL_TIM_PWM_Start+0xa2>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	223d      	movs	r2, #61	; 0x3d
 800326a:	2102      	movs	r1, #2
 800326c:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	6839      	ldr	r1, [r7, #0]
 8003274:	2201      	movs	r2, #1
 8003276:	0018      	movs	r0, r3
 8003278:	f000 fbae 	bl	80039d8 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681a      	ldr	r2, [r3, #0]
 8003280:	2380      	movs	r3, #128	; 0x80
 8003282:	05db      	lsls	r3, r3, #23
 8003284:	429a      	cmp	r2, r3
 8003286:	d004      	beq.n	8003292 <HAL_TIM_PWM_Start+0xc6>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a10      	ldr	r2, [pc, #64]	; (80032d0 <HAL_TIM_PWM_Start+0x104>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d111      	bne.n	80032b6 <HAL_TIM_PWM_Start+0xea>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	689b      	ldr	r3, [r3, #8]
 8003298:	2207      	movs	r2, #7
 800329a:	4013      	ands	r3, r2
 800329c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	2b06      	cmp	r3, #6
 80032a2:	d010      	beq.n	80032c6 <HAL_TIM_PWM_Start+0xfa>
    {
      __HAL_TIM_ENABLE(htim);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	681a      	ldr	r2, [r3, #0]
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	2101      	movs	r1, #1
 80032b0:	430a      	orrs	r2, r1
 80032b2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032b4:	e007      	b.n	80032c6 <HAL_TIM_PWM_Start+0xfa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	681a      	ldr	r2, [r3, #0]
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	2101      	movs	r1, #1
 80032c2:	430a      	orrs	r2, r1
 80032c4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80032c6:	2300      	movs	r3, #0
}
 80032c8:	0018      	movs	r0, r3
 80032ca:	46bd      	mov	sp, r7
 80032cc:	b004      	add	sp, #16
 80032ce:	bd80      	pop	{r7, pc}
 80032d0:	40010800 	.word	0x40010800

080032d4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b086      	sub	sp, #24
 80032d8:	af00      	add	r7, sp, #0
 80032da:	60f8      	str	r0, [r7, #12]
 80032dc:	60b9      	str	r1, [r7, #8]
 80032de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80032e0:	2317      	movs	r3, #23
 80032e2:	18fb      	adds	r3, r7, r3
 80032e4:	2200      	movs	r2, #0
 80032e6:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	2238      	movs	r2, #56	; 0x38
 80032ec:	5c9b      	ldrb	r3, [r3, r2]
 80032ee:	2b01      	cmp	r3, #1
 80032f0:	d101      	bne.n	80032f6 <HAL_TIM_PWM_ConfigChannel+0x22>
 80032f2:	2302      	movs	r3, #2
 80032f4:	e0ad      	b.n	8003452 <HAL_TIM_PWM_ConfigChannel+0x17e>
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	2238      	movs	r2, #56	; 0x38
 80032fa:	2101      	movs	r1, #1
 80032fc:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2b0c      	cmp	r3, #12
 8003302:	d100      	bne.n	8003306 <HAL_TIM_PWM_ConfigChannel+0x32>
 8003304:	e076      	b.n	80033f4 <HAL_TIM_PWM_ConfigChannel+0x120>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2b0c      	cmp	r3, #12
 800330a:	d900      	bls.n	800330e <HAL_TIM_PWM_ConfigChannel+0x3a>
 800330c:	e095      	b.n	800343a <HAL_TIM_PWM_ConfigChannel+0x166>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2b08      	cmp	r3, #8
 8003312:	d04e      	beq.n	80033b2 <HAL_TIM_PWM_ConfigChannel+0xde>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2b08      	cmp	r3, #8
 8003318:	d900      	bls.n	800331c <HAL_TIM_PWM_ConfigChannel+0x48>
 800331a:	e08e      	b.n	800343a <HAL_TIM_PWM_ConfigChannel+0x166>
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d003      	beq.n	800332a <HAL_TIM_PWM_ConfigChannel+0x56>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2b04      	cmp	r3, #4
 8003326:	d021      	beq.n	800336c <HAL_TIM_PWM_ConfigChannel+0x98>
 8003328:	e087      	b.n	800343a <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	68ba      	ldr	r2, [r7, #8]
 8003330:	0011      	movs	r1, r2
 8003332:	0018      	movs	r0, r3
 8003334:	f000 f9b2 	bl	800369c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	699a      	ldr	r2, [r3, #24]
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	2108      	movs	r1, #8
 8003344:	430a      	orrs	r2, r1
 8003346:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	699a      	ldr	r2, [r3, #24]
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	2104      	movs	r1, #4
 8003354:	438a      	bics	r2, r1
 8003356:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	6999      	ldr	r1, [r3, #24]
 800335e:	68bb      	ldr	r3, [r7, #8]
 8003360:	68da      	ldr	r2, [r3, #12]
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	430a      	orrs	r2, r1
 8003368:	619a      	str	r2, [r3, #24]
      break;
 800336a:	e06b      	b.n	8003444 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	68ba      	ldr	r2, [r7, #8]
 8003372:	0011      	movs	r1, r2
 8003374:	0018      	movs	r0, r3
 8003376:	f000 f9cd 	bl	8003714 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	699a      	ldr	r2, [r3, #24]
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	2180      	movs	r1, #128	; 0x80
 8003386:	0109      	lsls	r1, r1, #4
 8003388:	430a      	orrs	r2, r1
 800338a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	699a      	ldr	r2, [r3, #24]
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4931      	ldr	r1, [pc, #196]	; (800345c <HAL_TIM_PWM_ConfigChannel+0x188>)
 8003398:	400a      	ands	r2, r1
 800339a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	6999      	ldr	r1, [r3, #24]
 80033a2:	68bb      	ldr	r3, [r7, #8]
 80033a4:	68db      	ldr	r3, [r3, #12]
 80033a6:	021a      	lsls	r2, r3, #8
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	430a      	orrs	r2, r1
 80033ae:	619a      	str	r2, [r3, #24]
      break;
 80033b0:	e048      	b.n	8003444 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	68ba      	ldr	r2, [r7, #8]
 80033b8:	0011      	movs	r1, r2
 80033ba:	0018      	movs	r0, r3
 80033bc:	f000 f9ec 	bl	8003798 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	69da      	ldr	r2, [r3, #28]
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	2108      	movs	r1, #8
 80033cc:	430a      	orrs	r2, r1
 80033ce:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	69da      	ldr	r2, [r3, #28]
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	2104      	movs	r1, #4
 80033dc:	438a      	bics	r2, r1
 80033de:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	69d9      	ldr	r1, [r3, #28]
 80033e6:	68bb      	ldr	r3, [r7, #8]
 80033e8:	68da      	ldr	r2, [r3, #12]
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	430a      	orrs	r2, r1
 80033f0:	61da      	str	r2, [r3, #28]
      break;
 80033f2:	e027      	b.n	8003444 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	68ba      	ldr	r2, [r7, #8]
 80033fa:	0011      	movs	r1, r2
 80033fc:	0018      	movs	r0, r3
 80033fe:	f000 fa0b 	bl	8003818 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	69da      	ldr	r2, [r3, #28]
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	2180      	movs	r1, #128	; 0x80
 800340e:	0109      	lsls	r1, r1, #4
 8003410:	430a      	orrs	r2, r1
 8003412:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	69da      	ldr	r2, [r3, #28]
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	490f      	ldr	r1, [pc, #60]	; (800345c <HAL_TIM_PWM_ConfigChannel+0x188>)
 8003420:	400a      	ands	r2, r1
 8003422:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	69d9      	ldr	r1, [r3, #28]
 800342a:	68bb      	ldr	r3, [r7, #8]
 800342c:	68db      	ldr	r3, [r3, #12]
 800342e:	021a      	lsls	r2, r3, #8
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	430a      	orrs	r2, r1
 8003436:	61da      	str	r2, [r3, #28]
      break;
 8003438:	e004      	b.n	8003444 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 800343a:	2317      	movs	r3, #23
 800343c:	18fb      	adds	r3, r7, r3
 800343e:	2201      	movs	r2, #1
 8003440:	701a      	strb	r2, [r3, #0]
      break;
 8003442:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	2238      	movs	r2, #56	; 0x38
 8003448:	2100      	movs	r1, #0
 800344a:	5499      	strb	r1, [r3, r2]

  return status;
 800344c:	2317      	movs	r3, #23
 800344e:	18fb      	adds	r3, r7, r3
 8003450:	781b      	ldrb	r3, [r3, #0]
}
 8003452:	0018      	movs	r0, r3
 8003454:	46bd      	mov	sp, r7
 8003456:	b006      	add	sp, #24
 8003458:	bd80      	pop	{r7, pc}
 800345a:	46c0      	nop			; (mov r8, r8)
 800345c:	fffffbff 	.word	0xfffffbff

08003460 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b084      	sub	sp, #16
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
 8003468:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800346a:	230f      	movs	r3, #15
 800346c:	18fb      	adds	r3, r7, r3
 800346e:	2200      	movs	r2, #0
 8003470:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2238      	movs	r2, #56	; 0x38
 8003476:	5c9b      	ldrb	r3, [r3, r2]
 8003478:	2b01      	cmp	r3, #1
 800347a:	d101      	bne.n	8003480 <HAL_TIM_ConfigClockSource+0x20>
 800347c:	2302      	movs	r3, #2
 800347e:	e0bc      	b.n	80035fa <HAL_TIM_ConfigClockSource+0x19a>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2238      	movs	r2, #56	; 0x38
 8003484:	2101      	movs	r1, #1
 8003486:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2239      	movs	r2, #57	; 0x39
 800348c:	2102      	movs	r1, #2
 800348e:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	689b      	ldr	r3, [r3, #8]
 8003496:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003498:	68bb      	ldr	r3, [r7, #8]
 800349a:	2277      	movs	r2, #119	; 0x77
 800349c:	4393      	bics	r3, r2
 800349e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	4a58      	ldr	r2, [pc, #352]	; (8003604 <HAL_TIM_ConfigClockSource+0x1a4>)
 80034a4:	4013      	ands	r3, r2
 80034a6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	68ba      	ldr	r2, [r7, #8]
 80034ae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	2280      	movs	r2, #128	; 0x80
 80034b6:	0192      	lsls	r2, r2, #6
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d040      	beq.n	800353e <HAL_TIM_ConfigClockSource+0xde>
 80034bc:	2280      	movs	r2, #128	; 0x80
 80034be:	0192      	lsls	r2, r2, #6
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d900      	bls.n	80034c6 <HAL_TIM_ConfigClockSource+0x66>
 80034c4:	e088      	b.n	80035d8 <HAL_TIM_ConfigClockSource+0x178>
 80034c6:	2280      	movs	r2, #128	; 0x80
 80034c8:	0152      	lsls	r2, r2, #5
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d100      	bne.n	80034d0 <HAL_TIM_ConfigClockSource+0x70>
 80034ce:	e088      	b.n	80035e2 <HAL_TIM_ConfigClockSource+0x182>
 80034d0:	2280      	movs	r2, #128	; 0x80
 80034d2:	0152      	lsls	r2, r2, #5
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d900      	bls.n	80034da <HAL_TIM_ConfigClockSource+0x7a>
 80034d8:	e07e      	b.n	80035d8 <HAL_TIM_ConfigClockSource+0x178>
 80034da:	2b70      	cmp	r3, #112	; 0x70
 80034dc:	d018      	beq.n	8003510 <HAL_TIM_ConfigClockSource+0xb0>
 80034de:	d900      	bls.n	80034e2 <HAL_TIM_ConfigClockSource+0x82>
 80034e0:	e07a      	b.n	80035d8 <HAL_TIM_ConfigClockSource+0x178>
 80034e2:	2b60      	cmp	r3, #96	; 0x60
 80034e4:	d04f      	beq.n	8003586 <HAL_TIM_ConfigClockSource+0x126>
 80034e6:	d900      	bls.n	80034ea <HAL_TIM_ConfigClockSource+0x8a>
 80034e8:	e076      	b.n	80035d8 <HAL_TIM_ConfigClockSource+0x178>
 80034ea:	2b50      	cmp	r3, #80	; 0x50
 80034ec:	d03b      	beq.n	8003566 <HAL_TIM_ConfigClockSource+0x106>
 80034ee:	d900      	bls.n	80034f2 <HAL_TIM_ConfigClockSource+0x92>
 80034f0:	e072      	b.n	80035d8 <HAL_TIM_ConfigClockSource+0x178>
 80034f2:	2b40      	cmp	r3, #64	; 0x40
 80034f4:	d057      	beq.n	80035a6 <HAL_TIM_ConfigClockSource+0x146>
 80034f6:	d900      	bls.n	80034fa <HAL_TIM_ConfigClockSource+0x9a>
 80034f8:	e06e      	b.n	80035d8 <HAL_TIM_ConfigClockSource+0x178>
 80034fa:	2b30      	cmp	r3, #48	; 0x30
 80034fc:	d063      	beq.n	80035c6 <HAL_TIM_ConfigClockSource+0x166>
 80034fe:	d86b      	bhi.n	80035d8 <HAL_TIM_ConfigClockSource+0x178>
 8003500:	2b20      	cmp	r3, #32
 8003502:	d060      	beq.n	80035c6 <HAL_TIM_ConfigClockSource+0x166>
 8003504:	d868      	bhi.n	80035d8 <HAL_TIM_ConfigClockSource+0x178>
 8003506:	2b00      	cmp	r3, #0
 8003508:	d05d      	beq.n	80035c6 <HAL_TIM_ConfigClockSource+0x166>
 800350a:	2b10      	cmp	r3, #16
 800350c:	d05b      	beq.n	80035c6 <HAL_TIM_ConfigClockSource+0x166>
 800350e:	e063      	b.n	80035d8 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6818      	ldr	r0, [r3, #0]
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	6899      	ldr	r1, [r3, #8]
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	685a      	ldr	r2, [r3, #4]
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	68db      	ldr	r3, [r3, #12]
 8003520:	f000 fa3a 	bl	8003998 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	689b      	ldr	r3, [r3, #8]
 800352a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800352c:	68bb      	ldr	r3, [r7, #8]
 800352e:	2277      	movs	r2, #119	; 0x77
 8003530:	4313      	orrs	r3, r2
 8003532:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	68ba      	ldr	r2, [r7, #8]
 800353a:	609a      	str	r2, [r3, #8]
      break;
 800353c:	e052      	b.n	80035e4 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6818      	ldr	r0, [r3, #0]
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	6899      	ldr	r1, [r3, #8]
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	685a      	ldr	r2, [r3, #4]
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	68db      	ldr	r3, [r3, #12]
 800354e:	f000 fa23 	bl	8003998 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	689a      	ldr	r2, [r3, #8]
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	2180      	movs	r1, #128	; 0x80
 800355e:	01c9      	lsls	r1, r1, #7
 8003560:	430a      	orrs	r2, r1
 8003562:	609a      	str	r2, [r3, #8]
      break;
 8003564:	e03e      	b.n	80035e4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6818      	ldr	r0, [r3, #0]
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	6859      	ldr	r1, [r3, #4]
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	68db      	ldr	r3, [r3, #12]
 8003572:	001a      	movs	r2, r3
 8003574:	f000 f996 	bl	80038a4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	2150      	movs	r1, #80	; 0x50
 800357e:	0018      	movs	r0, r3
 8003580:	f000 f9f0 	bl	8003964 <TIM_ITRx_SetConfig>
      break;
 8003584:	e02e      	b.n	80035e4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6818      	ldr	r0, [r3, #0]
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	6859      	ldr	r1, [r3, #4]
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	68db      	ldr	r3, [r3, #12]
 8003592:	001a      	movs	r2, r3
 8003594:	f000 f9b4 	bl	8003900 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	2160      	movs	r1, #96	; 0x60
 800359e:	0018      	movs	r0, r3
 80035a0:	f000 f9e0 	bl	8003964 <TIM_ITRx_SetConfig>
      break;
 80035a4:	e01e      	b.n	80035e4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6818      	ldr	r0, [r3, #0]
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	6859      	ldr	r1, [r3, #4]
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	68db      	ldr	r3, [r3, #12]
 80035b2:	001a      	movs	r2, r3
 80035b4:	f000 f976 	bl	80038a4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	2140      	movs	r1, #64	; 0x40
 80035be:	0018      	movs	r0, r3
 80035c0:	f000 f9d0 	bl	8003964 <TIM_ITRx_SetConfig>
      break;
 80035c4:	e00e      	b.n	80035e4 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681a      	ldr	r2, [r3, #0]
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	0019      	movs	r1, r3
 80035d0:	0010      	movs	r0, r2
 80035d2:	f000 f9c7 	bl	8003964 <TIM_ITRx_SetConfig>
      break;
 80035d6:	e005      	b.n	80035e4 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80035d8:	230f      	movs	r3, #15
 80035da:	18fb      	adds	r3, r7, r3
 80035dc:	2201      	movs	r2, #1
 80035de:	701a      	strb	r2, [r3, #0]
      break;
 80035e0:	e000      	b.n	80035e4 <HAL_TIM_ConfigClockSource+0x184>
      break;
 80035e2:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2239      	movs	r2, #57	; 0x39
 80035e8:	2101      	movs	r1, #1
 80035ea:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2238      	movs	r2, #56	; 0x38
 80035f0:	2100      	movs	r1, #0
 80035f2:	5499      	strb	r1, [r3, r2]

  return status;
 80035f4:	230f      	movs	r3, #15
 80035f6:	18fb      	adds	r3, r7, r3
 80035f8:	781b      	ldrb	r3, [r3, #0]
}
 80035fa:	0018      	movs	r0, r3
 80035fc:	46bd      	mov	sp, r7
 80035fe:	b004      	add	sp, #16
 8003600:	bd80      	pop	{r7, pc}
 8003602:	46c0      	nop			; (mov r8, r8)
 8003604:	ffff00ff 	.word	0xffff00ff

08003608 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b084      	sub	sp, #16
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
 8003610:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003618:	687a      	ldr	r2, [r7, #4]
 800361a:	2380      	movs	r3, #128	; 0x80
 800361c:	05db      	lsls	r3, r3, #23
 800361e:	429a      	cmp	r2, r3
 8003620:	d003      	beq.n	800362a <TIM_Base_SetConfig+0x22>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	4a1b      	ldr	r2, [pc, #108]	; (8003694 <TIM_Base_SetConfig+0x8c>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d108      	bne.n	800363c <TIM_Base_SetConfig+0x34>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	2270      	movs	r2, #112	; 0x70
 800362e:	4393      	bics	r3, r2
 8003630:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	68fa      	ldr	r2, [r7, #12]
 8003638:	4313      	orrs	r3, r2
 800363a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800363c:	687a      	ldr	r2, [r7, #4]
 800363e:	2380      	movs	r3, #128	; 0x80
 8003640:	05db      	lsls	r3, r3, #23
 8003642:	429a      	cmp	r2, r3
 8003644:	d003      	beq.n	800364e <TIM_Base_SetConfig+0x46>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	4a12      	ldr	r2, [pc, #72]	; (8003694 <TIM_Base_SetConfig+0x8c>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d108      	bne.n	8003660 <TIM_Base_SetConfig+0x58>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	4a11      	ldr	r2, [pc, #68]	; (8003698 <TIM_Base_SetConfig+0x90>)
 8003652:	4013      	ands	r3, r2
 8003654:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	68db      	ldr	r3, [r3, #12]
 800365a:	68fa      	ldr	r2, [r7, #12]
 800365c:	4313      	orrs	r3, r2
 800365e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	2280      	movs	r2, #128	; 0x80
 8003664:	4393      	bics	r3, r2
 8003666:	001a      	movs	r2, r3
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	691b      	ldr	r3, [r3, #16]
 800366c:	4313      	orrs	r3, r2
 800366e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	68fa      	ldr	r2, [r7, #12]
 8003674:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	689a      	ldr	r2, [r3, #8]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	681a      	ldr	r2, [r3, #0]
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2201      	movs	r2, #1
 800368a:	615a      	str	r2, [r3, #20]
}
 800368c:	46c0      	nop			; (mov r8, r8)
 800368e:	46bd      	mov	sp, r7
 8003690:	b004      	add	sp, #16
 8003692:	bd80      	pop	{r7, pc}
 8003694:	40010800 	.word	0x40010800
 8003698:	fffffcff 	.word	0xfffffcff

0800369c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b086      	sub	sp, #24
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
 80036a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6a1b      	ldr	r3, [r3, #32]
 80036aa:	2201      	movs	r2, #1
 80036ac:	4393      	bics	r3, r2
 80036ae:	001a      	movs	r2, r3
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6a1b      	ldr	r3, [r3, #32]
 80036b8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	699b      	ldr	r3, [r3, #24]
 80036c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	2270      	movs	r2, #112	; 0x70
 80036ca:	4393      	bics	r3, r2
 80036cc:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	2203      	movs	r2, #3
 80036d2:	4393      	bics	r3, r2
 80036d4:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	68fa      	ldr	r2, [r7, #12]
 80036dc:	4313      	orrs	r3, r2
 80036de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80036e0:	697b      	ldr	r3, [r7, #20]
 80036e2:	2202      	movs	r2, #2
 80036e4:	4393      	bics	r3, r2
 80036e6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	689b      	ldr	r3, [r3, #8]
 80036ec:	697a      	ldr	r2, [r7, #20]
 80036ee:	4313      	orrs	r3, r2
 80036f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	693a      	ldr	r2, [r7, #16]
 80036f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	68fa      	ldr	r2, [r7, #12]
 80036fc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	685a      	ldr	r2, [r3, #4]
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	697a      	ldr	r2, [r7, #20]
 800370a:	621a      	str	r2, [r3, #32]
}
 800370c:	46c0      	nop			; (mov r8, r8)
 800370e:	46bd      	mov	sp, r7
 8003710:	b006      	add	sp, #24
 8003712:	bd80      	pop	{r7, pc}

08003714 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b086      	sub	sp, #24
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
 800371c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6a1b      	ldr	r3, [r3, #32]
 8003722:	2210      	movs	r2, #16
 8003724:	4393      	bics	r3, r2
 8003726:	001a      	movs	r2, r3
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6a1b      	ldr	r3, [r3, #32]
 8003730:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	699b      	ldr	r3, [r3, #24]
 800373c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	4a13      	ldr	r2, [pc, #76]	; (8003790 <TIM_OC2_SetConfig+0x7c>)
 8003742:	4013      	ands	r3, r2
 8003744:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	4a12      	ldr	r2, [pc, #72]	; (8003794 <TIM_OC2_SetConfig+0x80>)
 800374a:	4013      	ands	r3, r2
 800374c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	021b      	lsls	r3, r3, #8
 8003754:	68fa      	ldr	r2, [r7, #12]
 8003756:	4313      	orrs	r3, r2
 8003758:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800375a:	697b      	ldr	r3, [r7, #20]
 800375c:	2220      	movs	r2, #32
 800375e:	4393      	bics	r3, r2
 8003760:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	689b      	ldr	r3, [r3, #8]
 8003766:	011b      	lsls	r3, r3, #4
 8003768:	697a      	ldr	r2, [r7, #20]
 800376a:	4313      	orrs	r3, r2
 800376c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	693a      	ldr	r2, [r7, #16]
 8003772:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	68fa      	ldr	r2, [r7, #12]
 8003778:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	685a      	ldr	r2, [r3, #4]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	697a      	ldr	r2, [r7, #20]
 8003786:	621a      	str	r2, [r3, #32]
}
 8003788:	46c0      	nop			; (mov r8, r8)
 800378a:	46bd      	mov	sp, r7
 800378c:	b006      	add	sp, #24
 800378e:	bd80      	pop	{r7, pc}
 8003790:	ffff8fff 	.word	0xffff8fff
 8003794:	fffffcff 	.word	0xfffffcff

08003798 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b086      	sub	sp, #24
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
 80037a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6a1b      	ldr	r3, [r3, #32]
 80037a6:	4a1a      	ldr	r2, [pc, #104]	; (8003810 <TIM_OC3_SetConfig+0x78>)
 80037a8:	401a      	ands	r2, r3
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6a1b      	ldr	r3, [r3, #32]
 80037b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	69db      	ldr	r3, [r3, #28]
 80037be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	2270      	movs	r2, #112	; 0x70
 80037c4:	4393      	bics	r3, r2
 80037c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	2203      	movs	r2, #3
 80037cc:	4393      	bics	r3, r2
 80037ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	68fa      	ldr	r2, [r7, #12]
 80037d6:	4313      	orrs	r3, r2
 80037d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80037da:	697b      	ldr	r3, [r7, #20]
 80037dc:	4a0d      	ldr	r2, [pc, #52]	; (8003814 <TIM_OC3_SetConfig+0x7c>)
 80037de:	4013      	ands	r3, r2
 80037e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	689b      	ldr	r3, [r3, #8]
 80037e6:	021b      	lsls	r3, r3, #8
 80037e8:	697a      	ldr	r2, [r7, #20]
 80037ea:	4313      	orrs	r3, r2
 80037ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	693a      	ldr	r2, [r7, #16]
 80037f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	68fa      	ldr	r2, [r7, #12]
 80037f8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	685a      	ldr	r2, [r3, #4]
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	697a      	ldr	r2, [r7, #20]
 8003806:	621a      	str	r2, [r3, #32]
}
 8003808:	46c0      	nop			; (mov r8, r8)
 800380a:	46bd      	mov	sp, r7
 800380c:	b006      	add	sp, #24
 800380e:	bd80      	pop	{r7, pc}
 8003810:	fffffeff 	.word	0xfffffeff
 8003814:	fffffdff 	.word	0xfffffdff

08003818 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b086      	sub	sp, #24
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
 8003820:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6a1b      	ldr	r3, [r3, #32]
 8003826:	4a1b      	ldr	r2, [pc, #108]	; (8003894 <TIM_OC4_SetConfig+0x7c>)
 8003828:	401a      	ands	r2, r3
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6a1b      	ldr	r3, [r3, #32]
 8003832:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	69db      	ldr	r3, [r3, #28]
 800383e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	4a15      	ldr	r2, [pc, #84]	; (8003898 <TIM_OC4_SetConfig+0x80>)
 8003844:	4013      	ands	r3, r2
 8003846:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	4a14      	ldr	r2, [pc, #80]	; (800389c <TIM_OC4_SetConfig+0x84>)
 800384c:	4013      	ands	r3, r2
 800384e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	021b      	lsls	r3, r3, #8
 8003856:	68fa      	ldr	r2, [r7, #12]
 8003858:	4313      	orrs	r3, r2
 800385a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800385c:	697b      	ldr	r3, [r7, #20]
 800385e:	4a10      	ldr	r2, [pc, #64]	; (80038a0 <TIM_OC4_SetConfig+0x88>)
 8003860:	4013      	ands	r3, r2
 8003862:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	689b      	ldr	r3, [r3, #8]
 8003868:	031b      	lsls	r3, r3, #12
 800386a:	697a      	ldr	r2, [r7, #20]
 800386c:	4313      	orrs	r3, r2
 800386e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	693a      	ldr	r2, [r7, #16]
 8003874:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	68fa      	ldr	r2, [r7, #12]
 800387a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	685a      	ldr	r2, [r3, #4]
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	697a      	ldr	r2, [r7, #20]
 8003888:	621a      	str	r2, [r3, #32]
}
 800388a:	46c0      	nop			; (mov r8, r8)
 800388c:	46bd      	mov	sp, r7
 800388e:	b006      	add	sp, #24
 8003890:	bd80      	pop	{r7, pc}
 8003892:	46c0      	nop			; (mov r8, r8)
 8003894:	ffffefff 	.word	0xffffefff
 8003898:	ffff8fff 	.word	0xffff8fff
 800389c:	fffffcff 	.word	0xfffffcff
 80038a0:	ffffdfff 	.word	0xffffdfff

080038a4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b086      	sub	sp, #24
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	60f8      	str	r0, [r7, #12]
 80038ac:	60b9      	str	r1, [r7, #8]
 80038ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	6a1b      	ldr	r3, [r3, #32]
 80038b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	6a1b      	ldr	r3, [r3, #32]
 80038ba:	2201      	movs	r2, #1
 80038bc:	4393      	bics	r3, r2
 80038be:	001a      	movs	r2, r3
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	699b      	ldr	r3, [r3, #24]
 80038c8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80038ca:	693b      	ldr	r3, [r7, #16]
 80038cc:	22f0      	movs	r2, #240	; 0xf0
 80038ce:	4393      	bics	r3, r2
 80038d0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	011b      	lsls	r3, r3, #4
 80038d6:	693a      	ldr	r2, [r7, #16]
 80038d8:	4313      	orrs	r3, r2
 80038da:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80038dc:	697b      	ldr	r3, [r7, #20]
 80038de:	220a      	movs	r2, #10
 80038e0:	4393      	bics	r3, r2
 80038e2:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80038e4:	697a      	ldr	r2, [r7, #20]
 80038e6:	68bb      	ldr	r3, [r7, #8]
 80038e8:	4313      	orrs	r3, r2
 80038ea:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	693a      	ldr	r2, [r7, #16]
 80038f0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	697a      	ldr	r2, [r7, #20]
 80038f6:	621a      	str	r2, [r3, #32]
}
 80038f8:	46c0      	nop			; (mov r8, r8)
 80038fa:	46bd      	mov	sp, r7
 80038fc:	b006      	add	sp, #24
 80038fe:	bd80      	pop	{r7, pc}

08003900 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b086      	sub	sp, #24
 8003904:	af00      	add	r7, sp, #0
 8003906:	60f8      	str	r0, [r7, #12]
 8003908:	60b9      	str	r1, [r7, #8]
 800390a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	6a1b      	ldr	r3, [r3, #32]
 8003910:	2210      	movs	r2, #16
 8003912:	4393      	bics	r3, r2
 8003914:	001a      	movs	r2, r3
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	699b      	ldr	r3, [r3, #24]
 800391e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	6a1b      	ldr	r3, [r3, #32]
 8003924:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003926:	697b      	ldr	r3, [r7, #20]
 8003928:	4a0d      	ldr	r2, [pc, #52]	; (8003960 <TIM_TI2_ConfigInputStage+0x60>)
 800392a:	4013      	ands	r3, r2
 800392c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	031b      	lsls	r3, r3, #12
 8003932:	697a      	ldr	r2, [r7, #20]
 8003934:	4313      	orrs	r3, r2
 8003936:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003938:	693b      	ldr	r3, [r7, #16]
 800393a:	22a0      	movs	r2, #160	; 0xa0
 800393c:	4393      	bics	r3, r2
 800393e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003940:	68bb      	ldr	r3, [r7, #8]
 8003942:	011b      	lsls	r3, r3, #4
 8003944:	693a      	ldr	r2, [r7, #16]
 8003946:	4313      	orrs	r3, r2
 8003948:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	697a      	ldr	r2, [r7, #20]
 800394e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	693a      	ldr	r2, [r7, #16]
 8003954:	621a      	str	r2, [r3, #32]
}
 8003956:	46c0      	nop			; (mov r8, r8)
 8003958:	46bd      	mov	sp, r7
 800395a:	b006      	add	sp, #24
 800395c:	bd80      	pop	{r7, pc}
 800395e:	46c0      	nop			; (mov r8, r8)
 8003960:	ffff0fff 	.word	0xffff0fff

08003964 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b084      	sub	sp, #16
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
 800396c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	689b      	ldr	r3, [r3, #8]
 8003972:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	2270      	movs	r2, #112	; 0x70
 8003978:	4393      	bics	r3, r2
 800397a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800397c:	683a      	ldr	r2, [r7, #0]
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	4313      	orrs	r3, r2
 8003982:	2207      	movs	r2, #7
 8003984:	4313      	orrs	r3, r2
 8003986:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	68fa      	ldr	r2, [r7, #12]
 800398c:	609a      	str	r2, [r3, #8]
}
 800398e:	46c0      	nop			; (mov r8, r8)
 8003990:	46bd      	mov	sp, r7
 8003992:	b004      	add	sp, #16
 8003994:	bd80      	pop	{r7, pc}
	...

08003998 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b086      	sub	sp, #24
 800399c:	af00      	add	r7, sp, #0
 800399e:	60f8      	str	r0, [r7, #12]
 80039a0:	60b9      	str	r1, [r7, #8]
 80039a2:	607a      	str	r2, [r7, #4]
 80039a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	689b      	ldr	r3, [r3, #8]
 80039aa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80039ac:	697b      	ldr	r3, [r7, #20]
 80039ae:	4a09      	ldr	r2, [pc, #36]	; (80039d4 <TIM_ETR_SetConfig+0x3c>)
 80039b0:	4013      	ands	r3, r2
 80039b2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	021a      	lsls	r2, r3, #8
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	431a      	orrs	r2, r3
 80039bc:	68bb      	ldr	r3, [r7, #8]
 80039be:	4313      	orrs	r3, r2
 80039c0:	697a      	ldr	r2, [r7, #20]
 80039c2:	4313      	orrs	r3, r2
 80039c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	697a      	ldr	r2, [r7, #20]
 80039ca:	609a      	str	r2, [r3, #8]
}
 80039cc:	46c0      	nop			; (mov r8, r8)
 80039ce:	46bd      	mov	sp, r7
 80039d0:	b006      	add	sp, #24
 80039d2:	bd80      	pop	{r7, pc}
 80039d4:	ffff00ff 	.word	0xffff00ff

080039d8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b086      	sub	sp, #24
 80039dc:	af00      	add	r7, sp, #0
 80039de:	60f8      	str	r0, [r7, #12]
 80039e0:	60b9      	str	r1, [r7, #8]
 80039e2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80039e4:	68bb      	ldr	r3, [r7, #8]
 80039e6:	221f      	movs	r2, #31
 80039e8:	4013      	ands	r3, r2
 80039ea:	2201      	movs	r2, #1
 80039ec:	409a      	lsls	r2, r3
 80039ee:	0013      	movs	r3, r2
 80039f0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	6a1b      	ldr	r3, [r3, #32]
 80039f6:	697a      	ldr	r2, [r7, #20]
 80039f8:	43d2      	mvns	r2, r2
 80039fa:	401a      	ands	r2, r3
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	6a1a      	ldr	r2, [r3, #32]
 8003a04:	68bb      	ldr	r3, [r7, #8]
 8003a06:	211f      	movs	r1, #31
 8003a08:	400b      	ands	r3, r1
 8003a0a:	6879      	ldr	r1, [r7, #4]
 8003a0c:	4099      	lsls	r1, r3
 8003a0e:	000b      	movs	r3, r1
 8003a10:	431a      	orrs	r2, r3
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	621a      	str	r2, [r3, #32]
}
 8003a16:	46c0      	nop			; (mov r8, r8)
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	b006      	add	sp, #24
 8003a1c:	bd80      	pop	{r7, pc}
	...

08003a20 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b084      	sub	sp, #16
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
 8003a28:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2238      	movs	r2, #56	; 0x38
 8003a2e:	5c9b      	ldrb	r3, [r3, r2]
 8003a30:	2b01      	cmp	r3, #1
 8003a32:	d101      	bne.n	8003a38 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003a34:	2302      	movs	r3, #2
 8003a36:	e03d      	b.n	8003ab4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2238      	movs	r2, #56	; 0x38
 8003a3c:	2101      	movs	r1, #1
 8003a3e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2239      	movs	r2, #57	; 0x39
 8003a44:	2102      	movs	r1, #2
 8003a46:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	689b      	ldr	r3, [r3, #8]
 8003a56:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	2270      	movs	r2, #112	; 0x70
 8003a5c:	4393      	bics	r3, r2
 8003a5e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	68fa      	ldr	r2, [r7, #12]
 8003a66:	4313      	orrs	r3, r2
 8003a68:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	68fa      	ldr	r2, [r7, #12]
 8003a70:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681a      	ldr	r2, [r3, #0]
 8003a76:	2380      	movs	r3, #128	; 0x80
 8003a78:	05db      	lsls	r3, r3, #23
 8003a7a:	429a      	cmp	r2, r3
 8003a7c:	d004      	beq.n	8003a88 <HAL_TIMEx_MasterConfigSynchronization+0x68>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4a0e      	ldr	r2, [pc, #56]	; (8003abc <HAL_TIMEx_MasterConfigSynchronization+0x9c>)
 8003a84:	4293      	cmp	r3, r2
 8003a86:	d10c      	bne.n	8003aa2 <HAL_TIMEx_MasterConfigSynchronization+0x82>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003a88:	68bb      	ldr	r3, [r7, #8]
 8003a8a:	2280      	movs	r2, #128	; 0x80
 8003a8c:	4393      	bics	r3, r2
 8003a8e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	685b      	ldr	r3, [r3, #4]
 8003a94:	68ba      	ldr	r2, [r7, #8]
 8003a96:	4313      	orrs	r3, r2
 8003a98:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	68ba      	ldr	r2, [r7, #8]
 8003aa0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2239      	movs	r2, #57	; 0x39
 8003aa6:	2101      	movs	r1, #1
 8003aa8:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2238      	movs	r2, #56	; 0x38
 8003aae:	2100      	movs	r1, #0
 8003ab0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003ab2:	2300      	movs	r3, #0
}
 8003ab4:	0018      	movs	r0, r3
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	b004      	add	sp, #16
 8003aba:	bd80      	pop	{r7, pc}
 8003abc:	40010800 	.word	0x40010800

08003ac0 <__libc_init_array>:
 8003ac0:	b570      	push	{r4, r5, r6, lr}
 8003ac2:	2600      	movs	r6, #0
 8003ac4:	4d0c      	ldr	r5, [pc, #48]	; (8003af8 <__libc_init_array+0x38>)
 8003ac6:	4c0d      	ldr	r4, [pc, #52]	; (8003afc <__libc_init_array+0x3c>)
 8003ac8:	1b64      	subs	r4, r4, r5
 8003aca:	10a4      	asrs	r4, r4, #2
 8003acc:	42a6      	cmp	r6, r4
 8003ace:	d109      	bne.n	8003ae4 <__libc_init_array+0x24>
 8003ad0:	2600      	movs	r6, #0
 8003ad2:	f000 f821 	bl	8003b18 <_init>
 8003ad6:	4d0a      	ldr	r5, [pc, #40]	; (8003b00 <__libc_init_array+0x40>)
 8003ad8:	4c0a      	ldr	r4, [pc, #40]	; (8003b04 <__libc_init_array+0x44>)
 8003ada:	1b64      	subs	r4, r4, r5
 8003adc:	10a4      	asrs	r4, r4, #2
 8003ade:	42a6      	cmp	r6, r4
 8003ae0:	d105      	bne.n	8003aee <__libc_init_array+0x2e>
 8003ae2:	bd70      	pop	{r4, r5, r6, pc}
 8003ae4:	00b3      	lsls	r3, r6, #2
 8003ae6:	58eb      	ldr	r3, [r5, r3]
 8003ae8:	4798      	blx	r3
 8003aea:	3601      	adds	r6, #1
 8003aec:	e7ee      	b.n	8003acc <__libc_init_array+0xc>
 8003aee:	00b3      	lsls	r3, r6, #2
 8003af0:	58eb      	ldr	r3, [r5, r3]
 8003af2:	4798      	blx	r3
 8003af4:	3601      	adds	r6, #1
 8003af6:	e7f2      	b.n	8003ade <__libc_init_array+0x1e>
 8003af8:	08003c14 	.word	0x08003c14
 8003afc:	08003c14 	.word	0x08003c14
 8003b00:	08003c14 	.word	0x08003c14
 8003b04:	08003c18 	.word	0x08003c18

08003b08 <memset>:
 8003b08:	0003      	movs	r3, r0
 8003b0a:	1882      	adds	r2, r0, r2
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d100      	bne.n	8003b12 <memset+0xa>
 8003b10:	4770      	bx	lr
 8003b12:	7019      	strb	r1, [r3, #0]
 8003b14:	3301      	adds	r3, #1
 8003b16:	e7f9      	b.n	8003b0c <memset+0x4>

08003b18 <_init>:
 8003b18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b1a:	46c0      	nop			; (mov r8, r8)
 8003b1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b1e:	bc08      	pop	{r3}
 8003b20:	469e      	mov	lr, r3
 8003b22:	4770      	bx	lr

08003b24 <_fini>:
 8003b24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b26:	46c0      	nop			; (mov r8, r8)
 8003b28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b2a:	bc08      	pop	{r3}
 8003b2c:	469e      	mov	lr, r3
 8003b2e:	4770      	bx	lr
