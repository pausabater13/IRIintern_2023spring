
blink_led.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001738  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  080017f8  080017f8  000117f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001814  08001814  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08001814  08001814  00011814  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800181c  0800181c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800181c  0800181c  0001181c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001820  08001820  00011820  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001824  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  2000000c  08001830  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  08001830  0002002c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_line   00004a49  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_info   00002b5b  00000000  00000000  00024a7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000d2a  00000000  00000000  000275d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000378  00000000  00000000  00028308  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0005bccc  00000000  00000000  00028680  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 000002f0  00000000  00000000  00084350  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0000f27b  00000000  00000000  00084640  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000938bb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000b10  00000000  00000000  0009390c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080017e0 	.word	0x080017e0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	080017e0 	.word	0x080017e0

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	0008      	movs	r0, r1
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f834 	bl	80002bc <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	46ce      	mov	lr, r9
 8000264:	4647      	mov	r7, r8
 8000266:	b580      	push	{r7, lr}
 8000268:	0007      	movs	r7, r0
 800026a:	4699      	mov	r9, r3
 800026c:	0c3b      	lsrs	r3, r7, #16
 800026e:	469c      	mov	ip, r3
 8000270:	0413      	lsls	r3, r2, #16
 8000272:	0c1b      	lsrs	r3, r3, #16
 8000274:	001d      	movs	r5, r3
 8000276:	000e      	movs	r6, r1
 8000278:	4661      	mov	r1, ip
 800027a:	0400      	lsls	r0, r0, #16
 800027c:	0c14      	lsrs	r4, r2, #16
 800027e:	0c00      	lsrs	r0, r0, #16
 8000280:	4345      	muls	r5, r0
 8000282:	434b      	muls	r3, r1
 8000284:	4360      	muls	r0, r4
 8000286:	4361      	muls	r1, r4
 8000288:	18c0      	adds	r0, r0, r3
 800028a:	0c2c      	lsrs	r4, r5, #16
 800028c:	1820      	adds	r0, r4, r0
 800028e:	468c      	mov	ip, r1
 8000290:	4283      	cmp	r3, r0
 8000292:	d903      	bls.n	800029c <__aeabi_lmul+0x3c>
 8000294:	2380      	movs	r3, #128	; 0x80
 8000296:	025b      	lsls	r3, r3, #9
 8000298:	4698      	mov	r8, r3
 800029a:	44c4      	add	ip, r8
 800029c:	4649      	mov	r1, r9
 800029e:	4379      	muls	r1, r7
 80002a0:	4372      	muls	r2, r6
 80002a2:	0c03      	lsrs	r3, r0, #16
 80002a4:	4463      	add	r3, ip
 80002a6:	042d      	lsls	r5, r5, #16
 80002a8:	0c2d      	lsrs	r5, r5, #16
 80002aa:	18c9      	adds	r1, r1, r3
 80002ac:	0400      	lsls	r0, r0, #16
 80002ae:	1940      	adds	r0, r0, r5
 80002b0:	1889      	adds	r1, r1, r2
 80002b2:	bcc0      	pop	{r6, r7}
 80002b4:	46b9      	mov	r9, r7
 80002b6:	46b0      	mov	r8, r6
 80002b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ba:	46c0      	nop			; (mov r8, r8)

080002bc <__udivmoddi4>:
 80002bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002be:	4657      	mov	r7, sl
 80002c0:	464e      	mov	r6, r9
 80002c2:	4645      	mov	r5, r8
 80002c4:	46de      	mov	lr, fp
 80002c6:	b5e0      	push	{r5, r6, r7, lr}
 80002c8:	0004      	movs	r4, r0
 80002ca:	000d      	movs	r5, r1
 80002cc:	4692      	mov	sl, r2
 80002ce:	4699      	mov	r9, r3
 80002d0:	b083      	sub	sp, #12
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d830      	bhi.n	8000338 <__udivmoddi4+0x7c>
 80002d6:	d02d      	beq.n	8000334 <__udivmoddi4+0x78>
 80002d8:	4649      	mov	r1, r9
 80002da:	4650      	mov	r0, sl
 80002dc:	f000 f8ba 	bl	8000454 <__clzdi2>
 80002e0:	0029      	movs	r1, r5
 80002e2:	0006      	movs	r6, r0
 80002e4:	0020      	movs	r0, r4
 80002e6:	f000 f8b5 	bl	8000454 <__clzdi2>
 80002ea:	1a33      	subs	r3, r6, r0
 80002ec:	4698      	mov	r8, r3
 80002ee:	3b20      	subs	r3, #32
 80002f0:	469b      	mov	fp, r3
 80002f2:	d433      	bmi.n	800035c <__udivmoddi4+0xa0>
 80002f4:	465a      	mov	r2, fp
 80002f6:	4653      	mov	r3, sl
 80002f8:	4093      	lsls	r3, r2
 80002fa:	4642      	mov	r2, r8
 80002fc:	001f      	movs	r7, r3
 80002fe:	4653      	mov	r3, sl
 8000300:	4093      	lsls	r3, r2
 8000302:	001e      	movs	r6, r3
 8000304:	42af      	cmp	r7, r5
 8000306:	d83a      	bhi.n	800037e <__udivmoddi4+0xc2>
 8000308:	42af      	cmp	r7, r5
 800030a:	d100      	bne.n	800030e <__udivmoddi4+0x52>
 800030c:	e078      	b.n	8000400 <__udivmoddi4+0x144>
 800030e:	465b      	mov	r3, fp
 8000310:	1ba4      	subs	r4, r4, r6
 8000312:	41bd      	sbcs	r5, r7
 8000314:	2b00      	cmp	r3, #0
 8000316:	da00      	bge.n	800031a <__udivmoddi4+0x5e>
 8000318:	e075      	b.n	8000406 <__udivmoddi4+0x14a>
 800031a:	2200      	movs	r2, #0
 800031c:	2300      	movs	r3, #0
 800031e:	9200      	str	r2, [sp, #0]
 8000320:	9301      	str	r3, [sp, #4]
 8000322:	2301      	movs	r3, #1
 8000324:	465a      	mov	r2, fp
 8000326:	4093      	lsls	r3, r2
 8000328:	9301      	str	r3, [sp, #4]
 800032a:	2301      	movs	r3, #1
 800032c:	4642      	mov	r2, r8
 800032e:	4093      	lsls	r3, r2
 8000330:	9300      	str	r3, [sp, #0]
 8000332:	e028      	b.n	8000386 <__udivmoddi4+0xca>
 8000334:	4282      	cmp	r2, r0
 8000336:	d9cf      	bls.n	80002d8 <__udivmoddi4+0x1c>
 8000338:	2200      	movs	r2, #0
 800033a:	2300      	movs	r3, #0
 800033c:	9200      	str	r2, [sp, #0]
 800033e:	9301      	str	r3, [sp, #4]
 8000340:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000342:	2b00      	cmp	r3, #0
 8000344:	d001      	beq.n	800034a <__udivmoddi4+0x8e>
 8000346:	601c      	str	r4, [r3, #0]
 8000348:	605d      	str	r5, [r3, #4]
 800034a:	9800      	ldr	r0, [sp, #0]
 800034c:	9901      	ldr	r1, [sp, #4]
 800034e:	b003      	add	sp, #12
 8000350:	bcf0      	pop	{r4, r5, r6, r7}
 8000352:	46bb      	mov	fp, r7
 8000354:	46b2      	mov	sl, r6
 8000356:	46a9      	mov	r9, r5
 8000358:	46a0      	mov	r8, r4
 800035a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800035c:	4642      	mov	r2, r8
 800035e:	2320      	movs	r3, #32
 8000360:	1a9b      	subs	r3, r3, r2
 8000362:	4652      	mov	r2, sl
 8000364:	40da      	lsrs	r2, r3
 8000366:	4641      	mov	r1, r8
 8000368:	0013      	movs	r3, r2
 800036a:	464a      	mov	r2, r9
 800036c:	408a      	lsls	r2, r1
 800036e:	0017      	movs	r7, r2
 8000370:	4642      	mov	r2, r8
 8000372:	431f      	orrs	r7, r3
 8000374:	4653      	mov	r3, sl
 8000376:	4093      	lsls	r3, r2
 8000378:	001e      	movs	r6, r3
 800037a:	42af      	cmp	r7, r5
 800037c:	d9c4      	bls.n	8000308 <__udivmoddi4+0x4c>
 800037e:	2200      	movs	r2, #0
 8000380:	2300      	movs	r3, #0
 8000382:	9200      	str	r2, [sp, #0]
 8000384:	9301      	str	r3, [sp, #4]
 8000386:	4643      	mov	r3, r8
 8000388:	2b00      	cmp	r3, #0
 800038a:	d0d9      	beq.n	8000340 <__udivmoddi4+0x84>
 800038c:	07fb      	lsls	r3, r7, #31
 800038e:	0872      	lsrs	r2, r6, #1
 8000390:	431a      	orrs	r2, r3
 8000392:	4646      	mov	r6, r8
 8000394:	087b      	lsrs	r3, r7, #1
 8000396:	e00e      	b.n	80003b6 <__udivmoddi4+0xfa>
 8000398:	42ab      	cmp	r3, r5
 800039a:	d101      	bne.n	80003a0 <__udivmoddi4+0xe4>
 800039c:	42a2      	cmp	r2, r4
 800039e:	d80c      	bhi.n	80003ba <__udivmoddi4+0xfe>
 80003a0:	1aa4      	subs	r4, r4, r2
 80003a2:	419d      	sbcs	r5, r3
 80003a4:	2001      	movs	r0, #1
 80003a6:	1924      	adds	r4, r4, r4
 80003a8:	416d      	adcs	r5, r5
 80003aa:	2100      	movs	r1, #0
 80003ac:	3e01      	subs	r6, #1
 80003ae:	1824      	adds	r4, r4, r0
 80003b0:	414d      	adcs	r5, r1
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	d006      	beq.n	80003c4 <__udivmoddi4+0x108>
 80003b6:	42ab      	cmp	r3, r5
 80003b8:	d9ee      	bls.n	8000398 <__udivmoddi4+0xdc>
 80003ba:	3e01      	subs	r6, #1
 80003bc:	1924      	adds	r4, r4, r4
 80003be:	416d      	adcs	r5, r5
 80003c0:	2e00      	cmp	r6, #0
 80003c2:	d1f8      	bne.n	80003b6 <__udivmoddi4+0xfa>
 80003c4:	9800      	ldr	r0, [sp, #0]
 80003c6:	9901      	ldr	r1, [sp, #4]
 80003c8:	465b      	mov	r3, fp
 80003ca:	1900      	adds	r0, r0, r4
 80003cc:	4169      	adcs	r1, r5
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	db24      	blt.n	800041c <__udivmoddi4+0x160>
 80003d2:	002b      	movs	r3, r5
 80003d4:	465a      	mov	r2, fp
 80003d6:	4644      	mov	r4, r8
 80003d8:	40d3      	lsrs	r3, r2
 80003da:	002a      	movs	r2, r5
 80003dc:	40e2      	lsrs	r2, r4
 80003de:	001c      	movs	r4, r3
 80003e0:	465b      	mov	r3, fp
 80003e2:	0015      	movs	r5, r2
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	db2a      	blt.n	800043e <__udivmoddi4+0x182>
 80003e8:	0026      	movs	r6, r4
 80003ea:	409e      	lsls	r6, r3
 80003ec:	0033      	movs	r3, r6
 80003ee:	0026      	movs	r6, r4
 80003f0:	4647      	mov	r7, r8
 80003f2:	40be      	lsls	r6, r7
 80003f4:	0032      	movs	r2, r6
 80003f6:	1a80      	subs	r0, r0, r2
 80003f8:	4199      	sbcs	r1, r3
 80003fa:	9000      	str	r0, [sp, #0]
 80003fc:	9101      	str	r1, [sp, #4]
 80003fe:	e79f      	b.n	8000340 <__udivmoddi4+0x84>
 8000400:	42a3      	cmp	r3, r4
 8000402:	d8bc      	bhi.n	800037e <__udivmoddi4+0xc2>
 8000404:	e783      	b.n	800030e <__udivmoddi4+0x52>
 8000406:	4642      	mov	r2, r8
 8000408:	2320      	movs	r3, #32
 800040a:	2100      	movs	r1, #0
 800040c:	1a9b      	subs	r3, r3, r2
 800040e:	2200      	movs	r2, #0
 8000410:	9100      	str	r1, [sp, #0]
 8000412:	9201      	str	r2, [sp, #4]
 8000414:	2201      	movs	r2, #1
 8000416:	40da      	lsrs	r2, r3
 8000418:	9201      	str	r2, [sp, #4]
 800041a:	e786      	b.n	800032a <__udivmoddi4+0x6e>
 800041c:	4642      	mov	r2, r8
 800041e:	2320      	movs	r3, #32
 8000420:	1a9b      	subs	r3, r3, r2
 8000422:	002a      	movs	r2, r5
 8000424:	4646      	mov	r6, r8
 8000426:	409a      	lsls	r2, r3
 8000428:	0023      	movs	r3, r4
 800042a:	40f3      	lsrs	r3, r6
 800042c:	4644      	mov	r4, r8
 800042e:	4313      	orrs	r3, r2
 8000430:	002a      	movs	r2, r5
 8000432:	40e2      	lsrs	r2, r4
 8000434:	001c      	movs	r4, r3
 8000436:	465b      	mov	r3, fp
 8000438:	0015      	movs	r5, r2
 800043a:	2b00      	cmp	r3, #0
 800043c:	dad4      	bge.n	80003e8 <__udivmoddi4+0x12c>
 800043e:	4642      	mov	r2, r8
 8000440:	002f      	movs	r7, r5
 8000442:	2320      	movs	r3, #32
 8000444:	0026      	movs	r6, r4
 8000446:	4097      	lsls	r7, r2
 8000448:	1a9b      	subs	r3, r3, r2
 800044a:	40de      	lsrs	r6, r3
 800044c:	003b      	movs	r3, r7
 800044e:	4333      	orrs	r3, r6
 8000450:	e7cd      	b.n	80003ee <__udivmoddi4+0x132>
 8000452:	46c0      	nop			; (mov r8, r8)

08000454 <__clzdi2>:
 8000454:	b510      	push	{r4, lr}
 8000456:	2900      	cmp	r1, #0
 8000458:	d103      	bne.n	8000462 <__clzdi2+0xe>
 800045a:	f000 f807 	bl	800046c <__clzsi2>
 800045e:	3020      	adds	r0, #32
 8000460:	e002      	b.n	8000468 <__clzdi2+0x14>
 8000462:	0008      	movs	r0, r1
 8000464:	f000 f802 	bl	800046c <__clzsi2>
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__clzsi2>:
 800046c:	211c      	movs	r1, #28
 800046e:	2301      	movs	r3, #1
 8000470:	041b      	lsls	r3, r3, #16
 8000472:	4298      	cmp	r0, r3
 8000474:	d301      	bcc.n	800047a <__clzsi2+0xe>
 8000476:	0c00      	lsrs	r0, r0, #16
 8000478:	3910      	subs	r1, #16
 800047a:	0a1b      	lsrs	r3, r3, #8
 800047c:	4298      	cmp	r0, r3
 800047e:	d301      	bcc.n	8000484 <__clzsi2+0x18>
 8000480:	0a00      	lsrs	r0, r0, #8
 8000482:	3908      	subs	r1, #8
 8000484:	091b      	lsrs	r3, r3, #4
 8000486:	4298      	cmp	r0, r3
 8000488:	d301      	bcc.n	800048e <__clzsi2+0x22>
 800048a:	0900      	lsrs	r0, r0, #4
 800048c:	3904      	subs	r1, #4
 800048e:	a202      	add	r2, pc, #8	; (adr r2, 8000498 <__clzsi2+0x2c>)
 8000490:	5c10      	ldrb	r0, [r2, r0]
 8000492:	1840      	adds	r0, r0, r1
 8000494:	4770      	bx	lr
 8000496:	46c0      	nop			; (mov r8, r8)
 8000498:	02020304 	.word	0x02020304
 800049c:	01010101 	.word	0x01010101
	...

080004a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 80004a8:	4813      	ldr	r0, [pc, #76]	; (80004f8 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 80004aa:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80004ac:	f000 f917 	bl	80006de <SystemInit>

/*Check if boot space corresponds to system memory*/

    LDR R0,=0x00000004
 80004b0:	4812      	ldr	r0, [pc, #72]	; (80004fc <LoopForever+0x6>)
    LDR R1, [R0]
 80004b2:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 80004b4:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 80004b6:	4a12      	ldr	r2, [pc, #72]	; (8000500 <LoopForever+0xa>)
    CMP R1, R2
 80004b8:	4291      	cmp	r1, r2
    BNE ApplicationStart
 80004ba:	d105      	bne.n	80004c8 <ApplicationStart>

 /*SYSCFG clock enable*/
    LDR R0,=0x40021034
 80004bc:	4811      	ldr	r0, [pc, #68]	; (8000504 <LoopForever+0xe>)
    LDR R1,=0x00000001
 80004be:	4912      	ldr	r1, [pc, #72]	; (8000508 <LoopForever+0x12>)
    STR R1, [R0]
 80004c0:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 80004c2:	4812      	ldr	r0, [pc, #72]	; (800050c <LoopForever+0x16>)
    LDR R1,=0x00000000
 80004c4:	4912      	ldr	r1, [pc, #72]	; (8000510 <LoopForever+0x1a>)
    STR R1, [R0]
 80004c6:	6001      	str	r1, [r0, #0]

080004c8 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80004c8:	4812      	ldr	r0, [pc, #72]	; (8000514 <LoopForever+0x1e>)
  ldr r1, =_edata
 80004ca:	4913      	ldr	r1, [pc, #76]	; (8000518 <LoopForever+0x22>)
  ldr r2, =_sidata
 80004cc:	4a13      	ldr	r2, [pc, #76]	; (800051c <LoopForever+0x26>)
  movs r3, #0
 80004ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004d0:	e002      	b.n	80004d8 <LoopCopyDataInit>

080004d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004d6:	3304      	adds	r3, #4

080004d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004dc:	d3f9      	bcc.n	80004d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004de:	4a10      	ldr	r2, [pc, #64]	; (8000520 <LoopForever+0x2a>)
  ldr r4, =_ebss
 80004e0:	4c10      	ldr	r4, [pc, #64]	; (8000524 <LoopForever+0x2e>)
  movs r3, #0
 80004e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004e4:	e001      	b.n	80004ea <LoopFillZerobss>

080004e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004e8:	3204      	adds	r2, #4

080004ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80004ec:	d3fb      	bcc.n	80004e6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80004ee:	f001 f94b 	bl	8001788 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80004f2:	f000 f81a 	bl	800052a <main>

080004f6 <LoopForever>:

LoopForever:
    b LoopForever
 80004f6:	e7fe      	b.n	80004f6 <LoopForever>
   ldr   r0, =_estack
 80004f8:	20000800 	.word	0x20000800
    LDR R0,=0x00000004
 80004fc:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8000500:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021034
 8000504:	40021034 	.word	0x40021034
    LDR R1,=0x00000001
 8000508:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 800050c:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8000510:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8000514:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000518:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800051c:	08001824 	.word	0x08001824
  ldr r2, =_sbss
 8000520:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000524:	2000002c 	.word	0x2000002c

08000528 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000528:	e7fe      	b.n	8000528 <ADC1_COMP_IRQHandler>

0800052a <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800052a:	b580      	push	{r7, lr}
 800052c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800052e:	f000 f8db 	bl	80006e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000532:	f000 f80f 	bl	8000554 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000536:	f000 f869 	bl	800060c <MX_GPIO_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	HAL_GPIO_TogglePin (GPIOA, GPIO_PIN_10);
 800053a:	2380      	movs	r3, #128	; 0x80
 800053c:	00da      	lsls	r2, r3, #3
 800053e:	23a0      	movs	r3, #160	; 0xa0
 8000540:	05db      	lsls	r3, r3, #23
 8000542:	0011      	movs	r1, r2
 8000544:	0018      	movs	r0, r3
 8000546:	f000 fb9a 	bl	8000c7e <HAL_GPIO_TogglePin>
	HAL_Delay (100);   /* Insert delay 100 ms */
 800054a:	2064      	movs	r0, #100	; 0x64
 800054c:	f000 f93c 	bl	80007c8 <HAL_Delay>
	HAL_GPIO_TogglePin (GPIOA, GPIO_PIN_10);
 8000550:	e7f3      	b.n	800053a <main+0x10>
	...

08000554 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000554:	b590      	push	{r4, r7, lr}
 8000556:	b093      	sub	sp, #76	; 0x4c
 8000558:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800055a:	2414      	movs	r4, #20
 800055c:	193b      	adds	r3, r7, r4
 800055e:	0018      	movs	r0, r3
 8000560:	2334      	movs	r3, #52	; 0x34
 8000562:	001a      	movs	r2, r3
 8000564:	2100      	movs	r1, #0
 8000566:	f001 f933 	bl	80017d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800056a:	003b      	movs	r3, r7
 800056c:	0018      	movs	r0, r3
 800056e:	2314      	movs	r3, #20
 8000570:	001a      	movs	r2, r3
 8000572:	2100      	movs	r1, #0
 8000574:	f001 f92c 	bl	80017d0 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000578:	4b22      	ldr	r3, [pc, #136]	; (8000604 <SystemClock_Config+0xb0>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	4a22      	ldr	r2, [pc, #136]	; (8000608 <SystemClock_Config+0xb4>)
 800057e:	401a      	ands	r2, r3
 8000580:	4b20      	ldr	r3, [pc, #128]	; (8000604 <SystemClock_Config+0xb0>)
 8000582:	2180      	movs	r1, #128	; 0x80
 8000584:	0109      	lsls	r1, r1, #4
 8000586:	430a      	orrs	r2, r1
 8000588:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800058a:	0021      	movs	r1, r4
 800058c:	187b      	adds	r3, r7, r1
 800058e:	2202      	movs	r2, #2
 8000590:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000592:	187b      	adds	r3, r7, r1
 8000594:	2201      	movs	r2, #1
 8000596:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000598:	187b      	adds	r3, r7, r1
 800059a:	2210      	movs	r2, #16
 800059c:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800059e:	187b      	adds	r3, r7, r1
 80005a0:	2202      	movs	r2, #2
 80005a2:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005a4:	187b      	adds	r3, r7, r1
 80005a6:	2200      	movs	r2, #0
 80005a8:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 80005aa:	187b      	adds	r3, r7, r1
 80005ac:	2280      	movs	r2, #128	; 0x80
 80005ae:	02d2      	lsls	r2, r2, #11
 80005b0:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 80005b2:	187b      	adds	r3, r7, r1
 80005b4:	2280      	movs	r2, #128	; 0x80
 80005b6:	03d2      	lsls	r2, r2, #15
 80005b8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ba:	187b      	adds	r3, r7, r1
 80005bc:	0018      	movs	r0, r3
 80005be:	f000 fb79 	bl	8000cb4 <HAL_RCC_OscConfig>
 80005c2:	1e03      	subs	r3, r0, #0
 80005c4:	d001      	beq.n	80005ca <SystemClock_Config+0x76>
  {
    Error_Handler();
 80005c6:	f000 f859 	bl	800067c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ca:	003b      	movs	r3, r7
 80005cc:	220f      	movs	r2, #15
 80005ce:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005d0:	003b      	movs	r3, r7
 80005d2:	2203      	movs	r2, #3
 80005d4:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005d6:	003b      	movs	r3, r7
 80005d8:	2200      	movs	r2, #0
 80005da:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005dc:	003b      	movs	r3, r7
 80005de:	2200      	movs	r2, #0
 80005e0:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005e2:	003b      	movs	r3, r7
 80005e4:	2200      	movs	r2, #0
 80005e6:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80005e8:	003b      	movs	r3, r7
 80005ea:	2101      	movs	r1, #1
 80005ec:	0018      	movs	r0, r3
 80005ee:	f000 fedd 	bl	80013ac <HAL_RCC_ClockConfig>
 80005f2:	1e03      	subs	r3, r0, #0
 80005f4:	d001      	beq.n	80005fa <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80005f6:	f000 f841 	bl	800067c <Error_Handler>
  }
}
 80005fa:	46c0      	nop			; (mov r8, r8)
 80005fc:	46bd      	mov	sp, r7
 80005fe:	b013      	add	sp, #76	; 0x4c
 8000600:	bd90      	pop	{r4, r7, pc}
 8000602:	46c0      	nop			; (mov r8, r8)
 8000604:	40007000 	.word	0x40007000
 8000608:	ffffe7ff 	.word	0xffffe7ff

0800060c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b086      	sub	sp, #24
 8000610:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000612:	1d3b      	adds	r3, r7, #4
 8000614:	0018      	movs	r0, r3
 8000616:	2314      	movs	r3, #20
 8000618:	001a      	movs	r2, r3
 800061a:	2100      	movs	r1, #0
 800061c:	f001 f8d8 	bl	80017d0 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000620:	4b15      	ldr	r3, [pc, #84]	; (8000678 <MX_GPIO_Init+0x6c>)
 8000622:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000624:	4b14      	ldr	r3, [pc, #80]	; (8000678 <MX_GPIO_Init+0x6c>)
 8000626:	2101      	movs	r1, #1
 8000628:	430a      	orrs	r2, r1
 800062a:	62da      	str	r2, [r3, #44]	; 0x2c
 800062c:	4b12      	ldr	r3, [pc, #72]	; (8000678 <MX_GPIO_Init+0x6c>)
 800062e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000630:	2201      	movs	r2, #1
 8000632:	4013      	ands	r3, r2
 8000634:	603b      	str	r3, [r7, #0]
 8000636:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000638:	2380      	movs	r3, #128	; 0x80
 800063a:	00d9      	lsls	r1, r3, #3
 800063c:	23a0      	movs	r3, #160	; 0xa0
 800063e:	05db      	lsls	r3, r3, #23
 8000640:	2200      	movs	r2, #0
 8000642:	0018      	movs	r0, r3
 8000644:	f000 fafe 	bl	8000c44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000648:	1d3b      	adds	r3, r7, #4
 800064a:	2280      	movs	r2, #128	; 0x80
 800064c:	00d2      	lsls	r2, r2, #3
 800064e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000650:	1d3b      	adds	r3, r7, #4
 8000652:	2201      	movs	r2, #1
 8000654:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000656:	1d3b      	adds	r3, r7, #4
 8000658:	2200      	movs	r2, #0
 800065a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800065c:	1d3b      	adds	r3, r7, #4
 800065e:	2200      	movs	r2, #0
 8000660:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000662:	1d3a      	adds	r2, r7, #4
 8000664:	23a0      	movs	r3, #160	; 0xa0
 8000666:	05db      	lsls	r3, r3, #23
 8000668:	0011      	movs	r1, r2
 800066a:	0018      	movs	r0, r3
 800066c:	f000 f984 	bl	8000978 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000670:	46c0      	nop			; (mov r8, r8)
 8000672:	46bd      	mov	sp, r7
 8000674:	b006      	add	sp, #24
 8000676:	bd80      	pop	{r7, pc}
 8000678:	40021000 	.word	0x40021000

0800067c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000680:	b672      	cpsid	i
}
 8000682:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000684:	e7fe      	b.n	8000684 <Error_Handler+0x8>
	...

08000688 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800068c:	4b07      	ldr	r3, [pc, #28]	; (80006ac <HAL_MspInit+0x24>)
 800068e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000690:	4b06      	ldr	r3, [pc, #24]	; (80006ac <HAL_MspInit+0x24>)
 8000692:	2101      	movs	r1, #1
 8000694:	430a      	orrs	r2, r1
 8000696:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000698:	4b04      	ldr	r3, [pc, #16]	; (80006ac <HAL_MspInit+0x24>)
 800069a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800069c:	4b03      	ldr	r3, [pc, #12]	; (80006ac <HAL_MspInit+0x24>)
 800069e:	2180      	movs	r1, #128	; 0x80
 80006a0:	0549      	lsls	r1, r1, #21
 80006a2:	430a      	orrs	r2, r1
 80006a4:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006a6:	46c0      	nop			; (mov r8, r8)
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bd80      	pop	{r7, pc}
 80006ac:	40021000 	.word	0x40021000

080006b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006b4:	e7fe      	b.n	80006b4 <NMI_Handler+0x4>

080006b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006b6:	b580      	push	{r7, lr}
 80006b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006ba:	e7fe      	b.n	80006ba <HardFault_Handler+0x4>

080006bc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80006c0:	46c0      	nop			; (mov r8, r8)
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}

080006c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006c6:	b580      	push	{r7, lr}
 80006c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006ca:	46c0      	nop			; (mov r8, r8)
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}

080006d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006d4:	f000 f85c 	bl	8000790 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006d8:	46c0      	nop			; (mov r8, r8)
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}

080006de <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80006de:	b580      	push	{r7, lr}
 80006e0:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006e2:	46c0      	nop			; (mov r8, r8)
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}

080006e8 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b082      	sub	sp, #8
 80006ec:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80006ee:	1dfb      	adds	r3, r7, #7
 80006f0:	2200      	movs	r2, #0
 80006f2:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80006f4:	4b0b      	ldr	r3, [pc, #44]	; (8000724 <HAL_Init+0x3c>)
 80006f6:	681a      	ldr	r2, [r3, #0]
 80006f8:	4b0a      	ldr	r3, [pc, #40]	; (8000724 <HAL_Init+0x3c>)
 80006fa:	2140      	movs	r1, #64	; 0x40
 80006fc:	430a      	orrs	r2, r1
 80006fe:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000700:	2003      	movs	r0, #3
 8000702:	f000 f811 	bl	8000728 <HAL_InitTick>
 8000706:	1e03      	subs	r3, r0, #0
 8000708:	d003      	beq.n	8000712 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 800070a:	1dfb      	adds	r3, r7, #7
 800070c:	2201      	movs	r2, #1
 800070e:	701a      	strb	r2, [r3, #0]
 8000710:	e001      	b.n	8000716 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000712:	f7ff ffb9 	bl	8000688 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000716:	1dfb      	adds	r3, r7, #7
 8000718:	781b      	ldrb	r3, [r3, #0]
}
 800071a:	0018      	movs	r0, r3
 800071c:	46bd      	mov	sp, r7
 800071e:	b002      	add	sp, #8
 8000720:	bd80      	pop	{r7, pc}
 8000722:	46c0      	nop			; (mov r8, r8)
 8000724:	40022000 	.word	0x40022000

08000728 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000728:	b590      	push	{r4, r7, lr}
 800072a:	b083      	sub	sp, #12
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000730:	4b14      	ldr	r3, [pc, #80]	; (8000784 <HAL_InitTick+0x5c>)
 8000732:	681c      	ldr	r4, [r3, #0]
 8000734:	4b14      	ldr	r3, [pc, #80]	; (8000788 <HAL_InitTick+0x60>)
 8000736:	781b      	ldrb	r3, [r3, #0]
 8000738:	0019      	movs	r1, r3
 800073a:	23fa      	movs	r3, #250	; 0xfa
 800073c:	0098      	lsls	r0, r3, #2
 800073e:	f7ff fce3 	bl	8000108 <__udivsi3>
 8000742:	0003      	movs	r3, r0
 8000744:	0019      	movs	r1, r3
 8000746:	0020      	movs	r0, r4
 8000748:	f7ff fcde 	bl	8000108 <__udivsi3>
 800074c:	0003      	movs	r3, r0
 800074e:	0018      	movs	r0, r3
 8000750:	f000 f905 	bl	800095e <HAL_SYSTICK_Config>
 8000754:	1e03      	subs	r3, r0, #0
 8000756:	d001      	beq.n	800075c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000758:	2301      	movs	r3, #1
 800075a:	e00f      	b.n	800077c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	2b03      	cmp	r3, #3
 8000760:	d80b      	bhi.n	800077a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000762:	6879      	ldr	r1, [r7, #4]
 8000764:	2301      	movs	r3, #1
 8000766:	425b      	negs	r3, r3
 8000768:	2200      	movs	r2, #0
 800076a:	0018      	movs	r0, r3
 800076c:	f000 f8e2 	bl	8000934 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000770:	4b06      	ldr	r3, [pc, #24]	; (800078c <HAL_InitTick+0x64>)
 8000772:	687a      	ldr	r2, [r7, #4]
 8000774:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000776:	2300      	movs	r3, #0
 8000778:	e000      	b.n	800077c <HAL_InitTick+0x54>
    return HAL_ERROR;
 800077a:	2301      	movs	r3, #1
}
 800077c:	0018      	movs	r0, r3
 800077e:	46bd      	mov	sp, r7
 8000780:	b003      	add	sp, #12
 8000782:	bd90      	pop	{r4, r7, pc}
 8000784:	20000000 	.word	0x20000000
 8000788:	20000008 	.word	0x20000008
 800078c:	20000004 	.word	0x20000004

08000790 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000794:	4b05      	ldr	r3, [pc, #20]	; (80007ac <HAL_IncTick+0x1c>)
 8000796:	781b      	ldrb	r3, [r3, #0]
 8000798:	001a      	movs	r2, r3
 800079a:	4b05      	ldr	r3, [pc, #20]	; (80007b0 <HAL_IncTick+0x20>)
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	18d2      	adds	r2, r2, r3
 80007a0:	4b03      	ldr	r3, [pc, #12]	; (80007b0 <HAL_IncTick+0x20>)
 80007a2:	601a      	str	r2, [r3, #0]
}
 80007a4:	46c0      	nop			; (mov r8, r8)
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	46c0      	nop			; (mov r8, r8)
 80007ac:	20000008 	.word	0x20000008
 80007b0:	20000028 	.word	0x20000028

080007b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0
  return uwTick;
 80007b8:	4b02      	ldr	r3, [pc, #8]	; (80007c4 <HAL_GetTick+0x10>)
 80007ba:	681b      	ldr	r3, [r3, #0]
}
 80007bc:	0018      	movs	r0, r3
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	46c0      	nop			; (mov r8, r8)
 80007c4:	20000028 	.word	0x20000028

080007c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b084      	sub	sp, #16
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80007d0:	f7ff fff0 	bl	80007b4 <HAL_GetTick>
 80007d4:	0003      	movs	r3, r0
 80007d6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80007dc:	68fb      	ldr	r3, [r7, #12]
 80007de:	3301      	adds	r3, #1
 80007e0:	d005      	beq.n	80007ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80007e2:	4b0a      	ldr	r3, [pc, #40]	; (800080c <HAL_Delay+0x44>)
 80007e4:	781b      	ldrb	r3, [r3, #0]
 80007e6:	001a      	movs	r2, r3
 80007e8:	68fb      	ldr	r3, [r7, #12]
 80007ea:	189b      	adds	r3, r3, r2
 80007ec:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80007ee:	46c0      	nop			; (mov r8, r8)
 80007f0:	f7ff ffe0 	bl	80007b4 <HAL_GetTick>
 80007f4:	0002      	movs	r2, r0
 80007f6:	68bb      	ldr	r3, [r7, #8]
 80007f8:	1ad3      	subs	r3, r2, r3
 80007fa:	68fa      	ldr	r2, [r7, #12]
 80007fc:	429a      	cmp	r2, r3
 80007fe:	d8f7      	bhi.n	80007f0 <HAL_Delay+0x28>
  {
  }
}
 8000800:	46c0      	nop			; (mov r8, r8)
 8000802:	46c0      	nop			; (mov r8, r8)
 8000804:	46bd      	mov	sp, r7
 8000806:	b004      	add	sp, #16
 8000808:	bd80      	pop	{r7, pc}
 800080a:	46c0      	nop			; (mov r8, r8)
 800080c:	20000008 	.word	0x20000008

08000810 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000810:	b590      	push	{r4, r7, lr}
 8000812:	b083      	sub	sp, #12
 8000814:	af00      	add	r7, sp, #0
 8000816:	0002      	movs	r2, r0
 8000818:	6039      	str	r1, [r7, #0]
 800081a:	1dfb      	adds	r3, r7, #7
 800081c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800081e:	1dfb      	adds	r3, r7, #7
 8000820:	781b      	ldrb	r3, [r3, #0]
 8000822:	2b7f      	cmp	r3, #127	; 0x7f
 8000824:	d828      	bhi.n	8000878 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000826:	4a2f      	ldr	r2, [pc, #188]	; (80008e4 <__NVIC_SetPriority+0xd4>)
 8000828:	1dfb      	adds	r3, r7, #7
 800082a:	781b      	ldrb	r3, [r3, #0]
 800082c:	b25b      	sxtb	r3, r3
 800082e:	089b      	lsrs	r3, r3, #2
 8000830:	33c0      	adds	r3, #192	; 0xc0
 8000832:	009b      	lsls	r3, r3, #2
 8000834:	589b      	ldr	r3, [r3, r2]
 8000836:	1dfa      	adds	r2, r7, #7
 8000838:	7812      	ldrb	r2, [r2, #0]
 800083a:	0011      	movs	r1, r2
 800083c:	2203      	movs	r2, #3
 800083e:	400a      	ands	r2, r1
 8000840:	00d2      	lsls	r2, r2, #3
 8000842:	21ff      	movs	r1, #255	; 0xff
 8000844:	4091      	lsls	r1, r2
 8000846:	000a      	movs	r2, r1
 8000848:	43d2      	mvns	r2, r2
 800084a:	401a      	ands	r2, r3
 800084c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800084e:	683b      	ldr	r3, [r7, #0]
 8000850:	019b      	lsls	r3, r3, #6
 8000852:	22ff      	movs	r2, #255	; 0xff
 8000854:	401a      	ands	r2, r3
 8000856:	1dfb      	adds	r3, r7, #7
 8000858:	781b      	ldrb	r3, [r3, #0]
 800085a:	0018      	movs	r0, r3
 800085c:	2303      	movs	r3, #3
 800085e:	4003      	ands	r3, r0
 8000860:	00db      	lsls	r3, r3, #3
 8000862:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000864:	481f      	ldr	r0, [pc, #124]	; (80008e4 <__NVIC_SetPriority+0xd4>)
 8000866:	1dfb      	adds	r3, r7, #7
 8000868:	781b      	ldrb	r3, [r3, #0]
 800086a:	b25b      	sxtb	r3, r3
 800086c:	089b      	lsrs	r3, r3, #2
 800086e:	430a      	orrs	r2, r1
 8000870:	33c0      	adds	r3, #192	; 0xc0
 8000872:	009b      	lsls	r3, r3, #2
 8000874:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000876:	e031      	b.n	80008dc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000878:	4a1b      	ldr	r2, [pc, #108]	; (80008e8 <__NVIC_SetPriority+0xd8>)
 800087a:	1dfb      	adds	r3, r7, #7
 800087c:	781b      	ldrb	r3, [r3, #0]
 800087e:	0019      	movs	r1, r3
 8000880:	230f      	movs	r3, #15
 8000882:	400b      	ands	r3, r1
 8000884:	3b08      	subs	r3, #8
 8000886:	089b      	lsrs	r3, r3, #2
 8000888:	3306      	adds	r3, #6
 800088a:	009b      	lsls	r3, r3, #2
 800088c:	18d3      	adds	r3, r2, r3
 800088e:	3304      	adds	r3, #4
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	1dfa      	adds	r2, r7, #7
 8000894:	7812      	ldrb	r2, [r2, #0]
 8000896:	0011      	movs	r1, r2
 8000898:	2203      	movs	r2, #3
 800089a:	400a      	ands	r2, r1
 800089c:	00d2      	lsls	r2, r2, #3
 800089e:	21ff      	movs	r1, #255	; 0xff
 80008a0:	4091      	lsls	r1, r2
 80008a2:	000a      	movs	r2, r1
 80008a4:	43d2      	mvns	r2, r2
 80008a6:	401a      	ands	r2, r3
 80008a8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80008aa:	683b      	ldr	r3, [r7, #0]
 80008ac:	019b      	lsls	r3, r3, #6
 80008ae:	22ff      	movs	r2, #255	; 0xff
 80008b0:	401a      	ands	r2, r3
 80008b2:	1dfb      	adds	r3, r7, #7
 80008b4:	781b      	ldrb	r3, [r3, #0]
 80008b6:	0018      	movs	r0, r3
 80008b8:	2303      	movs	r3, #3
 80008ba:	4003      	ands	r3, r0
 80008bc:	00db      	lsls	r3, r3, #3
 80008be:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008c0:	4809      	ldr	r0, [pc, #36]	; (80008e8 <__NVIC_SetPriority+0xd8>)
 80008c2:	1dfb      	adds	r3, r7, #7
 80008c4:	781b      	ldrb	r3, [r3, #0]
 80008c6:	001c      	movs	r4, r3
 80008c8:	230f      	movs	r3, #15
 80008ca:	4023      	ands	r3, r4
 80008cc:	3b08      	subs	r3, #8
 80008ce:	089b      	lsrs	r3, r3, #2
 80008d0:	430a      	orrs	r2, r1
 80008d2:	3306      	adds	r3, #6
 80008d4:	009b      	lsls	r3, r3, #2
 80008d6:	18c3      	adds	r3, r0, r3
 80008d8:	3304      	adds	r3, #4
 80008da:	601a      	str	r2, [r3, #0]
}
 80008dc:	46c0      	nop			; (mov r8, r8)
 80008de:	46bd      	mov	sp, r7
 80008e0:	b003      	add	sp, #12
 80008e2:	bd90      	pop	{r4, r7, pc}
 80008e4:	e000e100 	.word	0xe000e100
 80008e8:	e000ed00 	.word	0xe000ed00

080008ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b082      	sub	sp, #8
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	1e5a      	subs	r2, r3, #1
 80008f8:	2380      	movs	r3, #128	; 0x80
 80008fa:	045b      	lsls	r3, r3, #17
 80008fc:	429a      	cmp	r2, r3
 80008fe:	d301      	bcc.n	8000904 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000900:	2301      	movs	r3, #1
 8000902:	e010      	b.n	8000926 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000904:	4b0a      	ldr	r3, [pc, #40]	; (8000930 <SysTick_Config+0x44>)
 8000906:	687a      	ldr	r2, [r7, #4]
 8000908:	3a01      	subs	r2, #1
 800090a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800090c:	2301      	movs	r3, #1
 800090e:	425b      	negs	r3, r3
 8000910:	2103      	movs	r1, #3
 8000912:	0018      	movs	r0, r3
 8000914:	f7ff ff7c 	bl	8000810 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000918:	4b05      	ldr	r3, [pc, #20]	; (8000930 <SysTick_Config+0x44>)
 800091a:	2200      	movs	r2, #0
 800091c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800091e:	4b04      	ldr	r3, [pc, #16]	; (8000930 <SysTick_Config+0x44>)
 8000920:	2207      	movs	r2, #7
 8000922:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000924:	2300      	movs	r3, #0
}
 8000926:	0018      	movs	r0, r3
 8000928:	46bd      	mov	sp, r7
 800092a:	b002      	add	sp, #8
 800092c:	bd80      	pop	{r7, pc}
 800092e:	46c0      	nop			; (mov r8, r8)
 8000930:	e000e010 	.word	0xe000e010

08000934 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000934:	b580      	push	{r7, lr}
 8000936:	b084      	sub	sp, #16
 8000938:	af00      	add	r7, sp, #0
 800093a:	60b9      	str	r1, [r7, #8]
 800093c:	607a      	str	r2, [r7, #4]
 800093e:	210f      	movs	r1, #15
 8000940:	187b      	adds	r3, r7, r1
 8000942:	1c02      	adds	r2, r0, #0
 8000944:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000946:	68ba      	ldr	r2, [r7, #8]
 8000948:	187b      	adds	r3, r7, r1
 800094a:	781b      	ldrb	r3, [r3, #0]
 800094c:	b25b      	sxtb	r3, r3
 800094e:	0011      	movs	r1, r2
 8000950:	0018      	movs	r0, r3
 8000952:	f7ff ff5d 	bl	8000810 <__NVIC_SetPriority>
}
 8000956:	46c0      	nop			; (mov r8, r8)
 8000958:	46bd      	mov	sp, r7
 800095a:	b004      	add	sp, #16
 800095c:	bd80      	pop	{r7, pc}

0800095e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800095e:	b580      	push	{r7, lr}
 8000960:	b082      	sub	sp, #8
 8000962:	af00      	add	r7, sp, #0
 8000964:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	0018      	movs	r0, r3
 800096a:	f7ff ffbf 	bl	80008ec <SysTick_Config>
 800096e:	0003      	movs	r3, r0
}
 8000970:	0018      	movs	r0, r3
 8000972:	46bd      	mov	sp, r7
 8000974:	b002      	add	sp, #8
 8000976:	bd80      	pop	{r7, pc}

08000978 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b086      	sub	sp, #24
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
 8000980:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000982:	2300      	movs	r3, #0
 8000984:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000986:	2300      	movs	r3, #0
 8000988:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800098a:	2300      	movs	r3, #0
 800098c:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800098e:	e143      	b.n	8000c18 <HAL_GPIO_Init+0x2a0>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000990:	683b      	ldr	r3, [r7, #0]
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	2101      	movs	r1, #1
 8000996:	697a      	ldr	r2, [r7, #20]
 8000998:	4091      	lsls	r1, r2
 800099a:	000a      	movs	r2, r1
 800099c:	4013      	ands	r3, r2
 800099e:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80009a0:	68fb      	ldr	r3, [r7, #12]
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d100      	bne.n	80009a8 <HAL_GPIO_Init+0x30>
 80009a6:	e134      	b.n	8000c12 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80009a8:	683b      	ldr	r3, [r7, #0]
 80009aa:	685b      	ldr	r3, [r3, #4]
 80009ac:	2203      	movs	r2, #3
 80009ae:	4013      	ands	r3, r2
 80009b0:	2b01      	cmp	r3, #1
 80009b2:	d005      	beq.n	80009c0 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80009b4:	683b      	ldr	r3, [r7, #0]
 80009b6:	685b      	ldr	r3, [r3, #4]
 80009b8:	2203      	movs	r2, #3
 80009ba:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80009bc:	2b02      	cmp	r3, #2
 80009be:	d130      	bne.n	8000a22 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	689b      	ldr	r3, [r3, #8]
 80009c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80009c6:	697b      	ldr	r3, [r7, #20]
 80009c8:	005b      	lsls	r3, r3, #1
 80009ca:	2203      	movs	r2, #3
 80009cc:	409a      	lsls	r2, r3
 80009ce:	0013      	movs	r3, r2
 80009d0:	43da      	mvns	r2, r3
 80009d2:	693b      	ldr	r3, [r7, #16]
 80009d4:	4013      	ands	r3, r2
 80009d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80009d8:	683b      	ldr	r3, [r7, #0]
 80009da:	68da      	ldr	r2, [r3, #12]
 80009dc:	697b      	ldr	r3, [r7, #20]
 80009de:	005b      	lsls	r3, r3, #1
 80009e0:	409a      	lsls	r2, r3
 80009e2:	0013      	movs	r3, r2
 80009e4:	693a      	ldr	r2, [r7, #16]
 80009e6:	4313      	orrs	r3, r2
 80009e8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	693a      	ldr	r2, [r7, #16]
 80009ee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	685b      	ldr	r3, [r3, #4]
 80009f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80009f6:	2201      	movs	r2, #1
 80009f8:	697b      	ldr	r3, [r7, #20]
 80009fa:	409a      	lsls	r2, r3
 80009fc:	0013      	movs	r3, r2
 80009fe:	43da      	mvns	r2, r3
 8000a00:	693b      	ldr	r3, [r7, #16]
 8000a02:	4013      	ands	r3, r2
 8000a04:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000a06:	683b      	ldr	r3, [r7, #0]
 8000a08:	685b      	ldr	r3, [r3, #4]
 8000a0a:	091b      	lsrs	r3, r3, #4
 8000a0c:	2201      	movs	r2, #1
 8000a0e:	401a      	ands	r2, r3
 8000a10:	697b      	ldr	r3, [r7, #20]
 8000a12:	409a      	lsls	r2, r3
 8000a14:	0013      	movs	r3, r2
 8000a16:	693a      	ldr	r2, [r7, #16]
 8000a18:	4313      	orrs	r3, r2
 8000a1a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	693a      	ldr	r2, [r7, #16]
 8000a20:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000a22:	683b      	ldr	r3, [r7, #0]
 8000a24:	685b      	ldr	r3, [r3, #4]
 8000a26:	2203      	movs	r2, #3
 8000a28:	4013      	ands	r3, r2
 8000a2a:	2b03      	cmp	r3, #3
 8000a2c:	d017      	beq.n	8000a5e <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	68db      	ldr	r3, [r3, #12]
 8000a32:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000a34:	697b      	ldr	r3, [r7, #20]
 8000a36:	005b      	lsls	r3, r3, #1
 8000a38:	2203      	movs	r2, #3
 8000a3a:	409a      	lsls	r2, r3
 8000a3c:	0013      	movs	r3, r2
 8000a3e:	43da      	mvns	r2, r3
 8000a40:	693b      	ldr	r3, [r7, #16]
 8000a42:	4013      	ands	r3, r2
 8000a44:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000a46:	683b      	ldr	r3, [r7, #0]
 8000a48:	689a      	ldr	r2, [r3, #8]
 8000a4a:	697b      	ldr	r3, [r7, #20]
 8000a4c:	005b      	lsls	r3, r3, #1
 8000a4e:	409a      	lsls	r2, r3
 8000a50:	0013      	movs	r3, r2
 8000a52:	693a      	ldr	r2, [r7, #16]
 8000a54:	4313      	orrs	r3, r2
 8000a56:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	693a      	ldr	r2, [r7, #16]
 8000a5c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000a5e:	683b      	ldr	r3, [r7, #0]
 8000a60:	685b      	ldr	r3, [r3, #4]
 8000a62:	2203      	movs	r2, #3
 8000a64:	4013      	ands	r3, r2
 8000a66:	2b02      	cmp	r3, #2
 8000a68:	d123      	bne.n	8000ab2 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000a6a:	697b      	ldr	r3, [r7, #20]
 8000a6c:	08da      	lsrs	r2, r3, #3
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	3208      	adds	r2, #8
 8000a72:	0092      	lsls	r2, r2, #2
 8000a74:	58d3      	ldr	r3, [r2, r3]
 8000a76:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8000a78:	697b      	ldr	r3, [r7, #20]
 8000a7a:	2207      	movs	r2, #7
 8000a7c:	4013      	ands	r3, r2
 8000a7e:	009b      	lsls	r3, r3, #2
 8000a80:	220f      	movs	r2, #15
 8000a82:	409a      	lsls	r2, r3
 8000a84:	0013      	movs	r3, r2
 8000a86:	43da      	mvns	r2, r3
 8000a88:	693b      	ldr	r3, [r7, #16]
 8000a8a:	4013      	ands	r3, r2
 8000a8c:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8000a8e:	683b      	ldr	r3, [r7, #0]
 8000a90:	691a      	ldr	r2, [r3, #16]
 8000a92:	697b      	ldr	r3, [r7, #20]
 8000a94:	2107      	movs	r1, #7
 8000a96:	400b      	ands	r3, r1
 8000a98:	009b      	lsls	r3, r3, #2
 8000a9a:	409a      	lsls	r2, r3
 8000a9c:	0013      	movs	r3, r2
 8000a9e:	693a      	ldr	r2, [r7, #16]
 8000aa0:	4313      	orrs	r3, r2
 8000aa2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000aa4:	697b      	ldr	r3, [r7, #20]
 8000aa6:	08da      	lsrs	r2, r3, #3
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	3208      	adds	r2, #8
 8000aac:	0092      	lsls	r2, r2, #2
 8000aae:	6939      	ldr	r1, [r7, #16]
 8000ab0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000ab8:	697b      	ldr	r3, [r7, #20]
 8000aba:	005b      	lsls	r3, r3, #1
 8000abc:	2203      	movs	r2, #3
 8000abe:	409a      	lsls	r2, r3
 8000ac0:	0013      	movs	r3, r2
 8000ac2:	43da      	mvns	r2, r3
 8000ac4:	693b      	ldr	r3, [r7, #16]
 8000ac6:	4013      	ands	r3, r2
 8000ac8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000aca:	683b      	ldr	r3, [r7, #0]
 8000acc:	685b      	ldr	r3, [r3, #4]
 8000ace:	2203      	movs	r2, #3
 8000ad0:	401a      	ands	r2, r3
 8000ad2:	697b      	ldr	r3, [r7, #20]
 8000ad4:	005b      	lsls	r3, r3, #1
 8000ad6:	409a      	lsls	r2, r3
 8000ad8:	0013      	movs	r3, r2
 8000ada:	693a      	ldr	r2, [r7, #16]
 8000adc:	4313      	orrs	r3, r2
 8000ade:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	693a      	ldr	r2, [r7, #16]
 8000ae4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000ae6:	683b      	ldr	r3, [r7, #0]
 8000ae8:	685a      	ldr	r2, [r3, #4]
 8000aea:	23c0      	movs	r3, #192	; 0xc0
 8000aec:	029b      	lsls	r3, r3, #10
 8000aee:	4013      	ands	r3, r2
 8000af0:	d100      	bne.n	8000af4 <HAL_GPIO_Init+0x17c>
 8000af2:	e08e      	b.n	8000c12 <HAL_GPIO_Init+0x29a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000af4:	4b4e      	ldr	r3, [pc, #312]	; (8000c30 <HAL_GPIO_Init+0x2b8>)
 8000af6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000af8:	4b4d      	ldr	r3, [pc, #308]	; (8000c30 <HAL_GPIO_Init+0x2b8>)
 8000afa:	2101      	movs	r1, #1
 8000afc:	430a      	orrs	r2, r1
 8000afe:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8000b00:	4a4c      	ldr	r2, [pc, #304]	; (8000c34 <HAL_GPIO_Init+0x2bc>)
 8000b02:	697b      	ldr	r3, [r7, #20]
 8000b04:	089b      	lsrs	r3, r3, #2
 8000b06:	3302      	adds	r3, #2
 8000b08:	009b      	lsls	r3, r3, #2
 8000b0a:	589b      	ldr	r3, [r3, r2]
 8000b0c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8000b0e:	697b      	ldr	r3, [r7, #20]
 8000b10:	2203      	movs	r2, #3
 8000b12:	4013      	ands	r3, r2
 8000b14:	009b      	lsls	r3, r3, #2
 8000b16:	220f      	movs	r2, #15
 8000b18:	409a      	lsls	r2, r3
 8000b1a:	0013      	movs	r3, r2
 8000b1c:	43da      	mvns	r2, r3
 8000b1e:	693b      	ldr	r3, [r7, #16]
 8000b20:	4013      	ands	r3, r2
 8000b22:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000b24:	687a      	ldr	r2, [r7, #4]
 8000b26:	23a0      	movs	r3, #160	; 0xa0
 8000b28:	05db      	lsls	r3, r3, #23
 8000b2a:	429a      	cmp	r2, r3
 8000b2c:	d00d      	beq.n	8000b4a <HAL_GPIO_Init+0x1d2>
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	4a41      	ldr	r2, [pc, #260]	; (8000c38 <HAL_GPIO_Init+0x2c0>)
 8000b32:	4293      	cmp	r3, r2
 8000b34:	d007      	beq.n	8000b46 <HAL_GPIO_Init+0x1ce>
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	4a40      	ldr	r2, [pc, #256]	; (8000c3c <HAL_GPIO_Init+0x2c4>)
 8000b3a:	4293      	cmp	r3, r2
 8000b3c:	d101      	bne.n	8000b42 <HAL_GPIO_Init+0x1ca>
 8000b3e:	2302      	movs	r3, #2
 8000b40:	e004      	b.n	8000b4c <HAL_GPIO_Init+0x1d4>
 8000b42:	2306      	movs	r3, #6
 8000b44:	e002      	b.n	8000b4c <HAL_GPIO_Init+0x1d4>
 8000b46:	2301      	movs	r3, #1
 8000b48:	e000      	b.n	8000b4c <HAL_GPIO_Init+0x1d4>
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	697a      	ldr	r2, [r7, #20]
 8000b4e:	2103      	movs	r1, #3
 8000b50:	400a      	ands	r2, r1
 8000b52:	0092      	lsls	r2, r2, #2
 8000b54:	4093      	lsls	r3, r2
 8000b56:	693a      	ldr	r2, [r7, #16]
 8000b58:	4313      	orrs	r3, r2
 8000b5a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000b5c:	4935      	ldr	r1, [pc, #212]	; (8000c34 <HAL_GPIO_Init+0x2bc>)
 8000b5e:	697b      	ldr	r3, [r7, #20]
 8000b60:	089b      	lsrs	r3, r3, #2
 8000b62:	3302      	adds	r3, #2
 8000b64:	009b      	lsls	r3, r3, #2
 8000b66:	693a      	ldr	r2, [r7, #16]
 8000b68:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000b6a:	4b35      	ldr	r3, [pc, #212]	; (8000c40 <HAL_GPIO_Init+0x2c8>)
 8000b6c:	689b      	ldr	r3, [r3, #8]
 8000b6e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	43da      	mvns	r2, r3
 8000b74:	693b      	ldr	r3, [r7, #16]
 8000b76:	4013      	ands	r3, r2
 8000b78:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000b7a:	683b      	ldr	r3, [r7, #0]
 8000b7c:	685a      	ldr	r2, [r3, #4]
 8000b7e:	2380      	movs	r3, #128	; 0x80
 8000b80:	035b      	lsls	r3, r3, #13
 8000b82:	4013      	ands	r3, r2
 8000b84:	d003      	beq.n	8000b8e <HAL_GPIO_Init+0x216>
        {
          temp |= iocurrent;
 8000b86:	693a      	ldr	r2, [r7, #16]
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	4313      	orrs	r3, r2
 8000b8c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000b8e:	4b2c      	ldr	r3, [pc, #176]	; (8000c40 <HAL_GPIO_Init+0x2c8>)
 8000b90:	693a      	ldr	r2, [r7, #16]
 8000b92:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000b94:	4b2a      	ldr	r3, [pc, #168]	; (8000c40 <HAL_GPIO_Init+0x2c8>)
 8000b96:	68db      	ldr	r3, [r3, #12]
 8000b98:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000b9a:	68fb      	ldr	r3, [r7, #12]
 8000b9c:	43da      	mvns	r2, r3
 8000b9e:	693b      	ldr	r3, [r7, #16]
 8000ba0:	4013      	ands	r3, r2
 8000ba2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000ba4:	683b      	ldr	r3, [r7, #0]
 8000ba6:	685a      	ldr	r2, [r3, #4]
 8000ba8:	2380      	movs	r3, #128	; 0x80
 8000baa:	039b      	lsls	r3, r3, #14
 8000bac:	4013      	ands	r3, r2
 8000bae:	d003      	beq.n	8000bb8 <HAL_GPIO_Init+0x240>
        {
          temp |= iocurrent;
 8000bb0:	693a      	ldr	r2, [r7, #16]
 8000bb2:	68fb      	ldr	r3, [r7, #12]
 8000bb4:	4313      	orrs	r3, r2
 8000bb6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000bb8:	4b21      	ldr	r3, [pc, #132]	; (8000c40 <HAL_GPIO_Init+0x2c8>)
 8000bba:	693a      	ldr	r2, [r7, #16]
 8000bbc:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8000bbe:	4b20      	ldr	r3, [pc, #128]	; (8000c40 <HAL_GPIO_Init+0x2c8>)
 8000bc0:	685b      	ldr	r3, [r3, #4]
 8000bc2:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000bc4:	68fb      	ldr	r3, [r7, #12]
 8000bc6:	43da      	mvns	r2, r3
 8000bc8:	693b      	ldr	r3, [r7, #16]
 8000bca:	4013      	ands	r3, r2
 8000bcc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000bce:	683b      	ldr	r3, [r7, #0]
 8000bd0:	685a      	ldr	r2, [r3, #4]
 8000bd2:	2380      	movs	r3, #128	; 0x80
 8000bd4:	029b      	lsls	r3, r3, #10
 8000bd6:	4013      	ands	r3, r2
 8000bd8:	d003      	beq.n	8000be2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000bda:	693a      	ldr	r2, [r7, #16]
 8000bdc:	68fb      	ldr	r3, [r7, #12]
 8000bde:	4313      	orrs	r3, r2
 8000be0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000be2:	4b17      	ldr	r3, [pc, #92]	; (8000c40 <HAL_GPIO_Init+0x2c8>)
 8000be4:	693a      	ldr	r2, [r7, #16]
 8000be6:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000be8:	4b15      	ldr	r3, [pc, #84]	; (8000c40 <HAL_GPIO_Init+0x2c8>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000bee:	68fb      	ldr	r3, [r7, #12]
 8000bf0:	43da      	mvns	r2, r3
 8000bf2:	693b      	ldr	r3, [r7, #16]
 8000bf4:	4013      	ands	r3, r2
 8000bf6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000bf8:	683b      	ldr	r3, [r7, #0]
 8000bfa:	685a      	ldr	r2, [r3, #4]
 8000bfc:	2380      	movs	r3, #128	; 0x80
 8000bfe:	025b      	lsls	r3, r3, #9
 8000c00:	4013      	ands	r3, r2
 8000c02:	d003      	beq.n	8000c0c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000c04:	693a      	ldr	r2, [r7, #16]
 8000c06:	68fb      	ldr	r3, [r7, #12]
 8000c08:	4313      	orrs	r3, r2
 8000c0a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000c0c:	4b0c      	ldr	r3, [pc, #48]	; (8000c40 <HAL_GPIO_Init+0x2c8>)
 8000c0e:	693a      	ldr	r2, [r7, #16]
 8000c10:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8000c12:	697b      	ldr	r3, [r7, #20]
 8000c14:	3301      	adds	r3, #1
 8000c16:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8000c18:	683b      	ldr	r3, [r7, #0]
 8000c1a:	681a      	ldr	r2, [r3, #0]
 8000c1c:	697b      	ldr	r3, [r7, #20]
 8000c1e:	40da      	lsrs	r2, r3
 8000c20:	1e13      	subs	r3, r2, #0
 8000c22:	d000      	beq.n	8000c26 <HAL_GPIO_Init+0x2ae>
 8000c24:	e6b4      	b.n	8000990 <HAL_GPIO_Init+0x18>
  }
}
 8000c26:	46c0      	nop			; (mov r8, r8)
 8000c28:	46c0      	nop			; (mov r8, r8)
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	b006      	add	sp, #24
 8000c2e:	bd80      	pop	{r7, pc}
 8000c30:	40021000 	.word	0x40021000
 8000c34:	40010000 	.word	0x40010000
 8000c38:	50000400 	.word	0x50000400
 8000c3c:	50000800 	.word	0x50000800
 8000c40:	40010400 	.word	0x40010400

08000c44 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b082      	sub	sp, #8
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
 8000c4c:	0008      	movs	r0, r1
 8000c4e:	0011      	movs	r1, r2
 8000c50:	1cbb      	adds	r3, r7, #2
 8000c52:	1c02      	adds	r2, r0, #0
 8000c54:	801a      	strh	r2, [r3, #0]
 8000c56:	1c7b      	adds	r3, r7, #1
 8000c58:	1c0a      	adds	r2, r1, #0
 8000c5a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000c5c:	1c7b      	adds	r3, r7, #1
 8000c5e:	781b      	ldrb	r3, [r3, #0]
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d004      	beq.n	8000c6e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000c64:	1cbb      	adds	r3, r7, #2
 8000c66:	881a      	ldrh	r2, [r3, #0]
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8000c6c:	e003      	b.n	8000c76 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8000c6e:	1cbb      	adds	r3, r7, #2
 8000c70:	881a      	ldrh	r2, [r3, #0]
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000c76:	46c0      	nop			; (mov r8, r8)
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	b002      	add	sp, #8
 8000c7c:	bd80      	pop	{r7, pc}

08000c7e <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000c7e:	b580      	push	{r7, lr}
 8000c80:	b084      	sub	sp, #16
 8000c82:	af00      	add	r7, sp, #0
 8000c84:	6078      	str	r0, [r7, #4]
 8000c86:	000a      	movs	r2, r1
 8000c88:	1cbb      	adds	r3, r7, #2
 8000c8a:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	695b      	ldr	r3, [r3, #20]
 8000c90:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000c92:	1cbb      	adds	r3, r7, #2
 8000c94:	881b      	ldrh	r3, [r3, #0]
 8000c96:	68fa      	ldr	r2, [r7, #12]
 8000c98:	4013      	ands	r3, r2
 8000c9a:	041a      	lsls	r2, r3, #16
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	43db      	mvns	r3, r3
 8000ca0:	1cb9      	adds	r1, r7, #2
 8000ca2:	8809      	ldrh	r1, [r1, #0]
 8000ca4:	400b      	ands	r3, r1
 8000ca6:	431a      	orrs	r2, r3
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	619a      	str	r2, [r3, #24]
}
 8000cac:	46c0      	nop			; (mov r8, r8)
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	b004      	add	sp, #16
 8000cb2:	bd80      	pop	{r7, pc}

08000cb4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000cb4:	b5b0      	push	{r4, r5, r7, lr}
 8000cb6:	b08a      	sub	sp, #40	; 0x28
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d102      	bne.n	8000cc8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000cc2:	2301      	movs	r3, #1
 8000cc4:	f000 fb6c 	bl	80013a0 <HAL_RCC_OscConfig+0x6ec>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000cc8:	4bc8      	ldr	r3, [pc, #800]	; (8000fec <HAL_RCC_OscConfig+0x338>)
 8000cca:	68db      	ldr	r3, [r3, #12]
 8000ccc:	220c      	movs	r2, #12
 8000cce:	4013      	ands	r3, r2
 8000cd0:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000cd2:	4bc6      	ldr	r3, [pc, #792]	; (8000fec <HAL_RCC_OscConfig+0x338>)
 8000cd4:	68da      	ldr	r2, [r3, #12]
 8000cd6:	2380      	movs	r3, #128	; 0x80
 8000cd8:	025b      	lsls	r3, r3, #9
 8000cda:	4013      	ands	r3, r2
 8000cdc:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	2201      	movs	r2, #1
 8000ce4:	4013      	ands	r3, r2
 8000ce6:	d100      	bne.n	8000cea <HAL_RCC_OscConfig+0x36>
 8000ce8:	e07d      	b.n	8000de6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000cea:	69fb      	ldr	r3, [r7, #28]
 8000cec:	2b08      	cmp	r3, #8
 8000cee:	d007      	beq.n	8000d00 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000cf0:	69fb      	ldr	r3, [r7, #28]
 8000cf2:	2b0c      	cmp	r3, #12
 8000cf4:	d112      	bne.n	8000d1c <HAL_RCC_OscConfig+0x68>
 8000cf6:	69ba      	ldr	r2, [r7, #24]
 8000cf8:	2380      	movs	r3, #128	; 0x80
 8000cfa:	025b      	lsls	r3, r3, #9
 8000cfc:	429a      	cmp	r2, r3
 8000cfe:	d10d      	bne.n	8000d1c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d00:	4bba      	ldr	r3, [pc, #744]	; (8000fec <HAL_RCC_OscConfig+0x338>)
 8000d02:	681a      	ldr	r2, [r3, #0]
 8000d04:	2380      	movs	r3, #128	; 0x80
 8000d06:	029b      	lsls	r3, r3, #10
 8000d08:	4013      	ands	r3, r2
 8000d0a:	d100      	bne.n	8000d0e <HAL_RCC_OscConfig+0x5a>
 8000d0c:	e06a      	b.n	8000de4 <HAL_RCC_OscConfig+0x130>
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	685b      	ldr	r3, [r3, #4]
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d166      	bne.n	8000de4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8000d16:	2301      	movs	r3, #1
 8000d18:	f000 fb42 	bl	80013a0 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	685a      	ldr	r2, [r3, #4]
 8000d20:	2380      	movs	r3, #128	; 0x80
 8000d22:	025b      	lsls	r3, r3, #9
 8000d24:	429a      	cmp	r2, r3
 8000d26:	d107      	bne.n	8000d38 <HAL_RCC_OscConfig+0x84>
 8000d28:	4bb0      	ldr	r3, [pc, #704]	; (8000fec <HAL_RCC_OscConfig+0x338>)
 8000d2a:	681a      	ldr	r2, [r3, #0]
 8000d2c:	4baf      	ldr	r3, [pc, #700]	; (8000fec <HAL_RCC_OscConfig+0x338>)
 8000d2e:	2180      	movs	r1, #128	; 0x80
 8000d30:	0249      	lsls	r1, r1, #9
 8000d32:	430a      	orrs	r2, r1
 8000d34:	601a      	str	r2, [r3, #0]
 8000d36:	e027      	b.n	8000d88 <HAL_RCC_OscConfig+0xd4>
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	685a      	ldr	r2, [r3, #4]
 8000d3c:	23a0      	movs	r3, #160	; 0xa0
 8000d3e:	02db      	lsls	r3, r3, #11
 8000d40:	429a      	cmp	r2, r3
 8000d42:	d10e      	bne.n	8000d62 <HAL_RCC_OscConfig+0xae>
 8000d44:	4ba9      	ldr	r3, [pc, #676]	; (8000fec <HAL_RCC_OscConfig+0x338>)
 8000d46:	681a      	ldr	r2, [r3, #0]
 8000d48:	4ba8      	ldr	r3, [pc, #672]	; (8000fec <HAL_RCC_OscConfig+0x338>)
 8000d4a:	2180      	movs	r1, #128	; 0x80
 8000d4c:	02c9      	lsls	r1, r1, #11
 8000d4e:	430a      	orrs	r2, r1
 8000d50:	601a      	str	r2, [r3, #0]
 8000d52:	4ba6      	ldr	r3, [pc, #664]	; (8000fec <HAL_RCC_OscConfig+0x338>)
 8000d54:	681a      	ldr	r2, [r3, #0]
 8000d56:	4ba5      	ldr	r3, [pc, #660]	; (8000fec <HAL_RCC_OscConfig+0x338>)
 8000d58:	2180      	movs	r1, #128	; 0x80
 8000d5a:	0249      	lsls	r1, r1, #9
 8000d5c:	430a      	orrs	r2, r1
 8000d5e:	601a      	str	r2, [r3, #0]
 8000d60:	e012      	b.n	8000d88 <HAL_RCC_OscConfig+0xd4>
 8000d62:	4ba2      	ldr	r3, [pc, #648]	; (8000fec <HAL_RCC_OscConfig+0x338>)
 8000d64:	681a      	ldr	r2, [r3, #0]
 8000d66:	4ba1      	ldr	r3, [pc, #644]	; (8000fec <HAL_RCC_OscConfig+0x338>)
 8000d68:	49a1      	ldr	r1, [pc, #644]	; (8000ff0 <HAL_RCC_OscConfig+0x33c>)
 8000d6a:	400a      	ands	r2, r1
 8000d6c:	601a      	str	r2, [r3, #0]
 8000d6e:	4b9f      	ldr	r3, [pc, #636]	; (8000fec <HAL_RCC_OscConfig+0x338>)
 8000d70:	681a      	ldr	r2, [r3, #0]
 8000d72:	2380      	movs	r3, #128	; 0x80
 8000d74:	025b      	lsls	r3, r3, #9
 8000d76:	4013      	ands	r3, r2
 8000d78:	60fb      	str	r3, [r7, #12]
 8000d7a:	68fb      	ldr	r3, [r7, #12]
 8000d7c:	4b9b      	ldr	r3, [pc, #620]	; (8000fec <HAL_RCC_OscConfig+0x338>)
 8000d7e:	681a      	ldr	r2, [r3, #0]
 8000d80:	4b9a      	ldr	r3, [pc, #616]	; (8000fec <HAL_RCC_OscConfig+0x338>)
 8000d82:	499c      	ldr	r1, [pc, #624]	; (8000ff4 <HAL_RCC_OscConfig+0x340>)
 8000d84:	400a      	ands	r2, r1
 8000d86:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	685b      	ldr	r3, [r3, #4]
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d014      	beq.n	8000dba <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d90:	f7ff fd10 	bl	80007b4 <HAL_GetTick>
 8000d94:	0003      	movs	r3, r0
 8000d96:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000d98:	e008      	b.n	8000dac <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d9a:	f7ff fd0b 	bl	80007b4 <HAL_GetTick>
 8000d9e:	0002      	movs	r2, r0
 8000da0:	697b      	ldr	r3, [r7, #20]
 8000da2:	1ad3      	subs	r3, r2, r3
 8000da4:	2b64      	cmp	r3, #100	; 0x64
 8000da6:	d901      	bls.n	8000dac <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8000da8:	2303      	movs	r3, #3
 8000daa:	e2f9      	b.n	80013a0 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000dac:	4b8f      	ldr	r3, [pc, #572]	; (8000fec <HAL_RCC_OscConfig+0x338>)
 8000dae:	681a      	ldr	r2, [r3, #0]
 8000db0:	2380      	movs	r3, #128	; 0x80
 8000db2:	029b      	lsls	r3, r3, #10
 8000db4:	4013      	ands	r3, r2
 8000db6:	d0f0      	beq.n	8000d9a <HAL_RCC_OscConfig+0xe6>
 8000db8:	e015      	b.n	8000de6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000dba:	f7ff fcfb 	bl	80007b4 <HAL_GetTick>
 8000dbe:	0003      	movs	r3, r0
 8000dc0:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000dc2:	e008      	b.n	8000dd6 <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000dc4:	f7ff fcf6 	bl	80007b4 <HAL_GetTick>
 8000dc8:	0002      	movs	r2, r0
 8000dca:	697b      	ldr	r3, [r7, #20]
 8000dcc:	1ad3      	subs	r3, r2, r3
 8000dce:	2b64      	cmp	r3, #100	; 0x64
 8000dd0:	d901      	bls.n	8000dd6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8000dd2:	2303      	movs	r3, #3
 8000dd4:	e2e4      	b.n	80013a0 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000dd6:	4b85      	ldr	r3, [pc, #532]	; (8000fec <HAL_RCC_OscConfig+0x338>)
 8000dd8:	681a      	ldr	r2, [r3, #0]
 8000dda:	2380      	movs	r3, #128	; 0x80
 8000ddc:	029b      	lsls	r3, r3, #10
 8000dde:	4013      	ands	r3, r2
 8000de0:	d1f0      	bne.n	8000dc4 <HAL_RCC_OscConfig+0x110>
 8000de2:	e000      	b.n	8000de6 <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000de4:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	2202      	movs	r2, #2
 8000dec:	4013      	ands	r3, r2
 8000dee:	d100      	bne.n	8000df2 <HAL_RCC_OscConfig+0x13e>
 8000df0:	e099      	b.n	8000f26 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	68db      	ldr	r3, [r3, #12]
 8000df6:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8000df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dfa:	2220      	movs	r2, #32
 8000dfc:	4013      	ands	r3, r2
 8000dfe:	d009      	beq.n	8000e14 <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8000e00:	4b7a      	ldr	r3, [pc, #488]	; (8000fec <HAL_RCC_OscConfig+0x338>)
 8000e02:	681a      	ldr	r2, [r3, #0]
 8000e04:	4b79      	ldr	r3, [pc, #484]	; (8000fec <HAL_RCC_OscConfig+0x338>)
 8000e06:	2120      	movs	r1, #32
 8000e08:	430a      	orrs	r2, r1
 8000e0a:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8000e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e0e:	2220      	movs	r2, #32
 8000e10:	4393      	bics	r3, r2
 8000e12:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000e14:	69fb      	ldr	r3, [r7, #28]
 8000e16:	2b04      	cmp	r3, #4
 8000e18:	d005      	beq.n	8000e26 <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000e1a:	69fb      	ldr	r3, [r7, #28]
 8000e1c:	2b0c      	cmp	r3, #12
 8000e1e:	d13e      	bne.n	8000e9e <HAL_RCC_OscConfig+0x1ea>
 8000e20:	69bb      	ldr	r3, [r7, #24]
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d13b      	bne.n	8000e9e <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8000e26:	4b71      	ldr	r3, [pc, #452]	; (8000fec <HAL_RCC_OscConfig+0x338>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	2204      	movs	r2, #4
 8000e2c:	4013      	ands	r3, r2
 8000e2e:	d004      	beq.n	8000e3a <HAL_RCC_OscConfig+0x186>
 8000e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d101      	bne.n	8000e3a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8000e36:	2301      	movs	r3, #1
 8000e38:	e2b2      	b.n	80013a0 <HAL_RCC_OscConfig+0x6ec>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e3a:	4b6c      	ldr	r3, [pc, #432]	; (8000fec <HAL_RCC_OscConfig+0x338>)
 8000e3c:	685b      	ldr	r3, [r3, #4]
 8000e3e:	4a6e      	ldr	r2, [pc, #440]	; (8000ff8 <HAL_RCC_OscConfig+0x344>)
 8000e40:	4013      	ands	r3, r2
 8000e42:	0019      	movs	r1, r3
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	691b      	ldr	r3, [r3, #16]
 8000e48:	021a      	lsls	r2, r3, #8
 8000e4a:	4b68      	ldr	r3, [pc, #416]	; (8000fec <HAL_RCC_OscConfig+0x338>)
 8000e4c:	430a      	orrs	r2, r1
 8000e4e:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8000e50:	4b66      	ldr	r3, [pc, #408]	; (8000fec <HAL_RCC_OscConfig+0x338>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	2209      	movs	r2, #9
 8000e56:	4393      	bics	r3, r2
 8000e58:	0019      	movs	r1, r3
 8000e5a:	4b64      	ldr	r3, [pc, #400]	; (8000fec <HAL_RCC_OscConfig+0x338>)
 8000e5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000e5e:	430a      	orrs	r2, r1
 8000e60:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000e62:	f000 fbeb 	bl	800163c <HAL_RCC_GetSysClockFreq>
 8000e66:	0001      	movs	r1, r0
 8000e68:	4b60      	ldr	r3, [pc, #384]	; (8000fec <HAL_RCC_OscConfig+0x338>)
 8000e6a:	68db      	ldr	r3, [r3, #12]
 8000e6c:	091b      	lsrs	r3, r3, #4
 8000e6e:	220f      	movs	r2, #15
 8000e70:	4013      	ands	r3, r2
 8000e72:	4a62      	ldr	r2, [pc, #392]	; (8000ffc <HAL_RCC_OscConfig+0x348>)
 8000e74:	5cd3      	ldrb	r3, [r2, r3]
 8000e76:	000a      	movs	r2, r1
 8000e78:	40da      	lsrs	r2, r3
 8000e7a:	4b61      	ldr	r3, [pc, #388]	; (8001000 <HAL_RCC_OscConfig+0x34c>)
 8000e7c:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8000e7e:	4b61      	ldr	r3, [pc, #388]	; (8001004 <HAL_RCC_OscConfig+0x350>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	2513      	movs	r5, #19
 8000e84:	197c      	adds	r4, r7, r5
 8000e86:	0018      	movs	r0, r3
 8000e88:	f7ff fc4e 	bl	8000728 <HAL_InitTick>
 8000e8c:	0003      	movs	r3, r0
 8000e8e:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8000e90:	197b      	adds	r3, r7, r5
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d046      	beq.n	8000f26 <HAL_RCC_OscConfig+0x272>
      {
        return status;
 8000e98:	197b      	adds	r3, r7, r5
 8000e9a:	781b      	ldrb	r3, [r3, #0]
 8000e9c:	e280      	b.n	80013a0 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8000e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d027      	beq.n	8000ef4 <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8000ea4:	4b51      	ldr	r3, [pc, #324]	; (8000fec <HAL_RCC_OscConfig+0x338>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	2209      	movs	r2, #9
 8000eaa:	4393      	bics	r3, r2
 8000eac:	0019      	movs	r1, r3
 8000eae:	4b4f      	ldr	r3, [pc, #316]	; (8000fec <HAL_RCC_OscConfig+0x338>)
 8000eb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000eb2:	430a      	orrs	r2, r1
 8000eb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000eb6:	f7ff fc7d 	bl	80007b4 <HAL_GetTick>
 8000eba:	0003      	movs	r3, r0
 8000ebc:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000ebe:	e008      	b.n	8000ed2 <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000ec0:	f7ff fc78 	bl	80007b4 <HAL_GetTick>
 8000ec4:	0002      	movs	r2, r0
 8000ec6:	697b      	ldr	r3, [r7, #20]
 8000ec8:	1ad3      	subs	r3, r2, r3
 8000eca:	2b02      	cmp	r3, #2
 8000ecc:	d901      	bls.n	8000ed2 <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 8000ece:	2303      	movs	r3, #3
 8000ed0:	e266      	b.n	80013a0 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000ed2:	4b46      	ldr	r3, [pc, #280]	; (8000fec <HAL_RCC_OscConfig+0x338>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	2204      	movs	r2, #4
 8000ed8:	4013      	ands	r3, r2
 8000eda:	d0f1      	beq.n	8000ec0 <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000edc:	4b43      	ldr	r3, [pc, #268]	; (8000fec <HAL_RCC_OscConfig+0x338>)
 8000ede:	685b      	ldr	r3, [r3, #4]
 8000ee0:	4a45      	ldr	r2, [pc, #276]	; (8000ff8 <HAL_RCC_OscConfig+0x344>)
 8000ee2:	4013      	ands	r3, r2
 8000ee4:	0019      	movs	r1, r3
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	691b      	ldr	r3, [r3, #16]
 8000eea:	021a      	lsls	r2, r3, #8
 8000eec:	4b3f      	ldr	r3, [pc, #252]	; (8000fec <HAL_RCC_OscConfig+0x338>)
 8000eee:	430a      	orrs	r2, r1
 8000ef0:	605a      	str	r2, [r3, #4]
 8000ef2:	e018      	b.n	8000f26 <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000ef4:	4b3d      	ldr	r3, [pc, #244]	; (8000fec <HAL_RCC_OscConfig+0x338>)
 8000ef6:	681a      	ldr	r2, [r3, #0]
 8000ef8:	4b3c      	ldr	r3, [pc, #240]	; (8000fec <HAL_RCC_OscConfig+0x338>)
 8000efa:	2101      	movs	r1, #1
 8000efc:	438a      	bics	r2, r1
 8000efe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f00:	f7ff fc58 	bl	80007b4 <HAL_GetTick>
 8000f04:	0003      	movs	r3, r0
 8000f06:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8000f08:	e008      	b.n	8000f1c <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000f0a:	f7ff fc53 	bl	80007b4 <HAL_GetTick>
 8000f0e:	0002      	movs	r2, r0
 8000f10:	697b      	ldr	r3, [r7, #20]
 8000f12:	1ad3      	subs	r3, r2, r3
 8000f14:	2b02      	cmp	r3, #2
 8000f16:	d901      	bls.n	8000f1c <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8000f18:	2303      	movs	r3, #3
 8000f1a:	e241      	b.n	80013a0 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8000f1c:	4b33      	ldr	r3, [pc, #204]	; (8000fec <HAL_RCC_OscConfig+0x338>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	2204      	movs	r2, #4
 8000f22:	4013      	ands	r3, r2
 8000f24:	d1f1      	bne.n	8000f0a <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	2210      	movs	r2, #16
 8000f2c:	4013      	ands	r3, r2
 8000f2e:	d100      	bne.n	8000f32 <HAL_RCC_OscConfig+0x27e>
 8000f30:	e0a1      	b.n	8001076 <HAL_RCC_OscConfig+0x3c2>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000f32:	69fb      	ldr	r3, [r7, #28]
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d140      	bne.n	8000fba <HAL_RCC_OscConfig+0x306>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000f38:	4b2c      	ldr	r3, [pc, #176]	; (8000fec <HAL_RCC_OscConfig+0x338>)
 8000f3a:	681a      	ldr	r2, [r3, #0]
 8000f3c:	2380      	movs	r3, #128	; 0x80
 8000f3e:	009b      	lsls	r3, r3, #2
 8000f40:	4013      	ands	r3, r2
 8000f42:	d005      	beq.n	8000f50 <HAL_RCC_OscConfig+0x29c>
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	699b      	ldr	r3, [r3, #24]
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d101      	bne.n	8000f50 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8000f4c:	2301      	movs	r3, #1
 8000f4e:	e227      	b.n	80013a0 <HAL_RCC_OscConfig+0x6ec>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000f50:	4b26      	ldr	r3, [pc, #152]	; (8000fec <HAL_RCC_OscConfig+0x338>)
 8000f52:	685b      	ldr	r3, [r3, #4]
 8000f54:	4a2c      	ldr	r2, [pc, #176]	; (8001008 <HAL_RCC_OscConfig+0x354>)
 8000f56:	4013      	ands	r3, r2
 8000f58:	0019      	movs	r1, r3
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	6a1a      	ldr	r2, [r3, #32]
 8000f5e:	4b23      	ldr	r3, [pc, #140]	; (8000fec <HAL_RCC_OscConfig+0x338>)
 8000f60:	430a      	orrs	r2, r1
 8000f62:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000f64:	4b21      	ldr	r3, [pc, #132]	; (8000fec <HAL_RCC_OscConfig+0x338>)
 8000f66:	685b      	ldr	r3, [r3, #4]
 8000f68:	021b      	lsls	r3, r3, #8
 8000f6a:	0a19      	lsrs	r1, r3, #8
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	69db      	ldr	r3, [r3, #28]
 8000f70:	061a      	lsls	r2, r3, #24
 8000f72:	4b1e      	ldr	r3, [pc, #120]	; (8000fec <HAL_RCC_OscConfig+0x338>)
 8000f74:	430a      	orrs	r2, r1
 8000f76:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	6a1b      	ldr	r3, [r3, #32]
 8000f7c:	0b5b      	lsrs	r3, r3, #13
 8000f7e:	3301      	adds	r3, #1
 8000f80:	2280      	movs	r2, #128	; 0x80
 8000f82:	0212      	lsls	r2, r2, #8
 8000f84:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8000f86:	4b19      	ldr	r3, [pc, #100]	; (8000fec <HAL_RCC_OscConfig+0x338>)
 8000f88:	68db      	ldr	r3, [r3, #12]
 8000f8a:	091b      	lsrs	r3, r3, #4
 8000f8c:	210f      	movs	r1, #15
 8000f8e:	400b      	ands	r3, r1
 8000f90:	491a      	ldr	r1, [pc, #104]	; (8000ffc <HAL_RCC_OscConfig+0x348>)
 8000f92:	5ccb      	ldrb	r3, [r1, r3]
 8000f94:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8000f96:	4b1a      	ldr	r3, [pc, #104]	; (8001000 <HAL_RCC_OscConfig+0x34c>)
 8000f98:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8000f9a:	4b1a      	ldr	r3, [pc, #104]	; (8001004 <HAL_RCC_OscConfig+0x350>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	2513      	movs	r5, #19
 8000fa0:	197c      	adds	r4, r7, r5
 8000fa2:	0018      	movs	r0, r3
 8000fa4:	f7ff fbc0 	bl	8000728 <HAL_InitTick>
 8000fa8:	0003      	movs	r3, r0
 8000faa:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8000fac:	197b      	adds	r3, r7, r5
 8000fae:	781b      	ldrb	r3, [r3, #0]
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d060      	beq.n	8001076 <HAL_RCC_OscConfig+0x3c2>
        {
          return status;
 8000fb4:	197b      	adds	r3, r7, r5
 8000fb6:	781b      	ldrb	r3, [r3, #0]
 8000fb8:	e1f2      	b.n	80013a0 <HAL_RCC_OscConfig+0x6ec>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	699b      	ldr	r3, [r3, #24]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d03f      	beq.n	8001042 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000fc2:	4b0a      	ldr	r3, [pc, #40]	; (8000fec <HAL_RCC_OscConfig+0x338>)
 8000fc4:	681a      	ldr	r2, [r3, #0]
 8000fc6:	4b09      	ldr	r3, [pc, #36]	; (8000fec <HAL_RCC_OscConfig+0x338>)
 8000fc8:	2180      	movs	r1, #128	; 0x80
 8000fca:	0049      	lsls	r1, r1, #1
 8000fcc:	430a      	orrs	r2, r1
 8000fce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fd0:	f7ff fbf0 	bl	80007b4 <HAL_GetTick>
 8000fd4:	0003      	movs	r3, r0
 8000fd6:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8000fd8:	e018      	b.n	800100c <HAL_RCC_OscConfig+0x358>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000fda:	f7ff fbeb 	bl	80007b4 <HAL_GetTick>
 8000fde:	0002      	movs	r2, r0
 8000fe0:	697b      	ldr	r3, [r7, #20]
 8000fe2:	1ad3      	subs	r3, r2, r3
 8000fe4:	2b02      	cmp	r3, #2
 8000fe6:	d911      	bls.n	800100c <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 8000fe8:	2303      	movs	r3, #3
 8000fea:	e1d9      	b.n	80013a0 <HAL_RCC_OscConfig+0x6ec>
 8000fec:	40021000 	.word	0x40021000
 8000ff0:	fffeffff 	.word	0xfffeffff
 8000ff4:	fffbffff 	.word	0xfffbffff
 8000ff8:	ffffe0ff 	.word	0xffffe0ff
 8000ffc:	080017f8 	.word	0x080017f8
 8001000:	20000000 	.word	0x20000000
 8001004:	20000004 	.word	0x20000004
 8001008:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800100c:	4bc9      	ldr	r3, [pc, #804]	; (8001334 <HAL_RCC_OscConfig+0x680>)
 800100e:	681a      	ldr	r2, [r3, #0]
 8001010:	2380      	movs	r3, #128	; 0x80
 8001012:	009b      	lsls	r3, r3, #2
 8001014:	4013      	ands	r3, r2
 8001016:	d0e0      	beq.n	8000fda <HAL_RCC_OscConfig+0x326>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001018:	4bc6      	ldr	r3, [pc, #792]	; (8001334 <HAL_RCC_OscConfig+0x680>)
 800101a:	685b      	ldr	r3, [r3, #4]
 800101c:	4ac6      	ldr	r2, [pc, #792]	; (8001338 <HAL_RCC_OscConfig+0x684>)
 800101e:	4013      	ands	r3, r2
 8001020:	0019      	movs	r1, r3
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	6a1a      	ldr	r2, [r3, #32]
 8001026:	4bc3      	ldr	r3, [pc, #780]	; (8001334 <HAL_RCC_OscConfig+0x680>)
 8001028:	430a      	orrs	r2, r1
 800102a:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800102c:	4bc1      	ldr	r3, [pc, #772]	; (8001334 <HAL_RCC_OscConfig+0x680>)
 800102e:	685b      	ldr	r3, [r3, #4]
 8001030:	021b      	lsls	r3, r3, #8
 8001032:	0a19      	lsrs	r1, r3, #8
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	69db      	ldr	r3, [r3, #28]
 8001038:	061a      	lsls	r2, r3, #24
 800103a:	4bbe      	ldr	r3, [pc, #760]	; (8001334 <HAL_RCC_OscConfig+0x680>)
 800103c:	430a      	orrs	r2, r1
 800103e:	605a      	str	r2, [r3, #4]
 8001040:	e019      	b.n	8001076 <HAL_RCC_OscConfig+0x3c2>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001042:	4bbc      	ldr	r3, [pc, #752]	; (8001334 <HAL_RCC_OscConfig+0x680>)
 8001044:	681a      	ldr	r2, [r3, #0]
 8001046:	4bbb      	ldr	r3, [pc, #748]	; (8001334 <HAL_RCC_OscConfig+0x680>)
 8001048:	49bc      	ldr	r1, [pc, #752]	; (800133c <HAL_RCC_OscConfig+0x688>)
 800104a:	400a      	ands	r2, r1
 800104c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800104e:	f7ff fbb1 	bl	80007b4 <HAL_GetTick>
 8001052:	0003      	movs	r3, r0
 8001054:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001056:	e008      	b.n	800106a <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001058:	f7ff fbac 	bl	80007b4 <HAL_GetTick>
 800105c:	0002      	movs	r2, r0
 800105e:	697b      	ldr	r3, [r7, #20]
 8001060:	1ad3      	subs	r3, r2, r3
 8001062:	2b02      	cmp	r3, #2
 8001064:	d901      	bls.n	800106a <HAL_RCC_OscConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 8001066:	2303      	movs	r3, #3
 8001068:	e19a      	b.n	80013a0 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800106a:	4bb2      	ldr	r3, [pc, #712]	; (8001334 <HAL_RCC_OscConfig+0x680>)
 800106c:	681a      	ldr	r2, [r3, #0]
 800106e:	2380      	movs	r3, #128	; 0x80
 8001070:	009b      	lsls	r3, r3, #2
 8001072:	4013      	ands	r3, r2
 8001074:	d1f0      	bne.n	8001058 <HAL_RCC_OscConfig+0x3a4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	2208      	movs	r2, #8
 800107c:	4013      	ands	r3, r2
 800107e:	d036      	beq.n	80010ee <HAL_RCC_OscConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	695b      	ldr	r3, [r3, #20]
 8001084:	2b00      	cmp	r3, #0
 8001086:	d019      	beq.n	80010bc <HAL_RCC_OscConfig+0x408>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001088:	4baa      	ldr	r3, [pc, #680]	; (8001334 <HAL_RCC_OscConfig+0x680>)
 800108a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800108c:	4ba9      	ldr	r3, [pc, #676]	; (8001334 <HAL_RCC_OscConfig+0x680>)
 800108e:	2101      	movs	r1, #1
 8001090:	430a      	orrs	r2, r1
 8001092:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001094:	f7ff fb8e 	bl	80007b4 <HAL_GetTick>
 8001098:	0003      	movs	r3, r0
 800109a:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800109c:	e008      	b.n	80010b0 <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800109e:	f7ff fb89 	bl	80007b4 <HAL_GetTick>
 80010a2:	0002      	movs	r2, r0
 80010a4:	697b      	ldr	r3, [r7, #20]
 80010a6:	1ad3      	subs	r3, r2, r3
 80010a8:	2b02      	cmp	r3, #2
 80010aa:	d901      	bls.n	80010b0 <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 80010ac:	2303      	movs	r3, #3
 80010ae:	e177      	b.n	80013a0 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80010b0:	4ba0      	ldr	r3, [pc, #640]	; (8001334 <HAL_RCC_OscConfig+0x680>)
 80010b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80010b4:	2202      	movs	r2, #2
 80010b6:	4013      	ands	r3, r2
 80010b8:	d0f1      	beq.n	800109e <HAL_RCC_OscConfig+0x3ea>
 80010ba:	e018      	b.n	80010ee <HAL_RCC_OscConfig+0x43a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80010bc:	4b9d      	ldr	r3, [pc, #628]	; (8001334 <HAL_RCC_OscConfig+0x680>)
 80010be:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80010c0:	4b9c      	ldr	r3, [pc, #624]	; (8001334 <HAL_RCC_OscConfig+0x680>)
 80010c2:	2101      	movs	r1, #1
 80010c4:	438a      	bics	r2, r1
 80010c6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010c8:	f7ff fb74 	bl	80007b4 <HAL_GetTick>
 80010cc:	0003      	movs	r3, r0
 80010ce:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80010d0:	e008      	b.n	80010e4 <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80010d2:	f7ff fb6f 	bl	80007b4 <HAL_GetTick>
 80010d6:	0002      	movs	r2, r0
 80010d8:	697b      	ldr	r3, [r7, #20]
 80010da:	1ad3      	subs	r3, r2, r3
 80010dc:	2b02      	cmp	r3, #2
 80010de:	d901      	bls.n	80010e4 <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 80010e0:	2303      	movs	r3, #3
 80010e2:	e15d      	b.n	80013a0 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80010e4:	4b93      	ldr	r3, [pc, #588]	; (8001334 <HAL_RCC_OscConfig+0x680>)
 80010e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80010e8:	2202      	movs	r2, #2
 80010ea:	4013      	ands	r3, r2
 80010ec:	d1f1      	bne.n	80010d2 <HAL_RCC_OscConfig+0x41e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	2204      	movs	r2, #4
 80010f4:	4013      	ands	r3, r2
 80010f6:	d100      	bne.n	80010fa <HAL_RCC_OscConfig+0x446>
 80010f8:	e0ae      	b.n	8001258 <HAL_RCC_OscConfig+0x5a4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80010fa:	2023      	movs	r0, #35	; 0x23
 80010fc:	183b      	adds	r3, r7, r0
 80010fe:	2200      	movs	r2, #0
 8001100:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001102:	4b8c      	ldr	r3, [pc, #560]	; (8001334 <HAL_RCC_OscConfig+0x680>)
 8001104:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001106:	2380      	movs	r3, #128	; 0x80
 8001108:	055b      	lsls	r3, r3, #21
 800110a:	4013      	ands	r3, r2
 800110c:	d109      	bne.n	8001122 <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800110e:	4b89      	ldr	r3, [pc, #548]	; (8001334 <HAL_RCC_OscConfig+0x680>)
 8001110:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001112:	4b88      	ldr	r3, [pc, #544]	; (8001334 <HAL_RCC_OscConfig+0x680>)
 8001114:	2180      	movs	r1, #128	; 0x80
 8001116:	0549      	lsls	r1, r1, #21
 8001118:	430a      	orrs	r2, r1
 800111a:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 800111c:	183b      	adds	r3, r7, r0
 800111e:	2201      	movs	r2, #1
 8001120:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001122:	4b87      	ldr	r3, [pc, #540]	; (8001340 <HAL_RCC_OscConfig+0x68c>)
 8001124:	681a      	ldr	r2, [r3, #0]
 8001126:	2380      	movs	r3, #128	; 0x80
 8001128:	005b      	lsls	r3, r3, #1
 800112a:	4013      	ands	r3, r2
 800112c:	d11a      	bne.n	8001164 <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800112e:	4b84      	ldr	r3, [pc, #528]	; (8001340 <HAL_RCC_OscConfig+0x68c>)
 8001130:	681a      	ldr	r2, [r3, #0]
 8001132:	4b83      	ldr	r3, [pc, #524]	; (8001340 <HAL_RCC_OscConfig+0x68c>)
 8001134:	2180      	movs	r1, #128	; 0x80
 8001136:	0049      	lsls	r1, r1, #1
 8001138:	430a      	orrs	r2, r1
 800113a:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800113c:	f7ff fb3a 	bl	80007b4 <HAL_GetTick>
 8001140:	0003      	movs	r3, r0
 8001142:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001144:	e008      	b.n	8001158 <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001146:	f7ff fb35 	bl	80007b4 <HAL_GetTick>
 800114a:	0002      	movs	r2, r0
 800114c:	697b      	ldr	r3, [r7, #20]
 800114e:	1ad3      	subs	r3, r2, r3
 8001150:	2b64      	cmp	r3, #100	; 0x64
 8001152:	d901      	bls.n	8001158 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 8001154:	2303      	movs	r3, #3
 8001156:	e123      	b.n	80013a0 <HAL_RCC_OscConfig+0x6ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001158:	4b79      	ldr	r3, [pc, #484]	; (8001340 <HAL_RCC_OscConfig+0x68c>)
 800115a:	681a      	ldr	r2, [r3, #0]
 800115c:	2380      	movs	r3, #128	; 0x80
 800115e:	005b      	lsls	r3, r3, #1
 8001160:	4013      	ands	r3, r2
 8001162:	d0f0      	beq.n	8001146 <HAL_RCC_OscConfig+0x492>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	689a      	ldr	r2, [r3, #8]
 8001168:	2380      	movs	r3, #128	; 0x80
 800116a:	005b      	lsls	r3, r3, #1
 800116c:	429a      	cmp	r2, r3
 800116e:	d107      	bne.n	8001180 <HAL_RCC_OscConfig+0x4cc>
 8001170:	4b70      	ldr	r3, [pc, #448]	; (8001334 <HAL_RCC_OscConfig+0x680>)
 8001172:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001174:	4b6f      	ldr	r3, [pc, #444]	; (8001334 <HAL_RCC_OscConfig+0x680>)
 8001176:	2180      	movs	r1, #128	; 0x80
 8001178:	0049      	lsls	r1, r1, #1
 800117a:	430a      	orrs	r2, r1
 800117c:	651a      	str	r2, [r3, #80]	; 0x50
 800117e:	e031      	b.n	80011e4 <HAL_RCC_OscConfig+0x530>
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	689b      	ldr	r3, [r3, #8]
 8001184:	2b00      	cmp	r3, #0
 8001186:	d10c      	bne.n	80011a2 <HAL_RCC_OscConfig+0x4ee>
 8001188:	4b6a      	ldr	r3, [pc, #424]	; (8001334 <HAL_RCC_OscConfig+0x680>)
 800118a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800118c:	4b69      	ldr	r3, [pc, #420]	; (8001334 <HAL_RCC_OscConfig+0x680>)
 800118e:	496b      	ldr	r1, [pc, #428]	; (800133c <HAL_RCC_OscConfig+0x688>)
 8001190:	400a      	ands	r2, r1
 8001192:	651a      	str	r2, [r3, #80]	; 0x50
 8001194:	4b67      	ldr	r3, [pc, #412]	; (8001334 <HAL_RCC_OscConfig+0x680>)
 8001196:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001198:	4b66      	ldr	r3, [pc, #408]	; (8001334 <HAL_RCC_OscConfig+0x680>)
 800119a:	496a      	ldr	r1, [pc, #424]	; (8001344 <HAL_RCC_OscConfig+0x690>)
 800119c:	400a      	ands	r2, r1
 800119e:	651a      	str	r2, [r3, #80]	; 0x50
 80011a0:	e020      	b.n	80011e4 <HAL_RCC_OscConfig+0x530>
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	689a      	ldr	r2, [r3, #8]
 80011a6:	23a0      	movs	r3, #160	; 0xa0
 80011a8:	00db      	lsls	r3, r3, #3
 80011aa:	429a      	cmp	r2, r3
 80011ac:	d10e      	bne.n	80011cc <HAL_RCC_OscConfig+0x518>
 80011ae:	4b61      	ldr	r3, [pc, #388]	; (8001334 <HAL_RCC_OscConfig+0x680>)
 80011b0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80011b2:	4b60      	ldr	r3, [pc, #384]	; (8001334 <HAL_RCC_OscConfig+0x680>)
 80011b4:	2180      	movs	r1, #128	; 0x80
 80011b6:	00c9      	lsls	r1, r1, #3
 80011b8:	430a      	orrs	r2, r1
 80011ba:	651a      	str	r2, [r3, #80]	; 0x50
 80011bc:	4b5d      	ldr	r3, [pc, #372]	; (8001334 <HAL_RCC_OscConfig+0x680>)
 80011be:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80011c0:	4b5c      	ldr	r3, [pc, #368]	; (8001334 <HAL_RCC_OscConfig+0x680>)
 80011c2:	2180      	movs	r1, #128	; 0x80
 80011c4:	0049      	lsls	r1, r1, #1
 80011c6:	430a      	orrs	r2, r1
 80011c8:	651a      	str	r2, [r3, #80]	; 0x50
 80011ca:	e00b      	b.n	80011e4 <HAL_RCC_OscConfig+0x530>
 80011cc:	4b59      	ldr	r3, [pc, #356]	; (8001334 <HAL_RCC_OscConfig+0x680>)
 80011ce:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80011d0:	4b58      	ldr	r3, [pc, #352]	; (8001334 <HAL_RCC_OscConfig+0x680>)
 80011d2:	495a      	ldr	r1, [pc, #360]	; (800133c <HAL_RCC_OscConfig+0x688>)
 80011d4:	400a      	ands	r2, r1
 80011d6:	651a      	str	r2, [r3, #80]	; 0x50
 80011d8:	4b56      	ldr	r3, [pc, #344]	; (8001334 <HAL_RCC_OscConfig+0x680>)
 80011da:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80011dc:	4b55      	ldr	r3, [pc, #340]	; (8001334 <HAL_RCC_OscConfig+0x680>)
 80011de:	4959      	ldr	r1, [pc, #356]	; (8001344 <HAL_RCC_OscConfig+0x690>)
 80011e0:	400a      	ands	r2, r1
 80011e2:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	689b      	ldr	r3, [r3, #8]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d015      	beq.n	8001218 <HAL_RCC_OscConfig+0x564>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011ec:	f7ff fae2 	bl	80007b4 <HAL_GetTick>
 80011f0:	0003      	movs	r3, r0
 80011f2:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80011f4:	e009      	b.n	800120a <HAL_RCC_OscConfig+0x556>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80011f6:	f7ff fadd 	bl	80007b4 <HAL_GetTick>
 80011fa:	0002      	movs	r2, r0
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	1ad3      	subs	r3, r2, r3
 8001200:	4a51      	ldr	r2, [pc, #324]	; (8001348 <HAL_RCC_OscConfig+0x694>)
 8001202:	4293      	cmp	r3, r2
 8001204:	d901      	bls.n	800120a <HAL_RCC_OscConfig+0x556>
        {
          return HAL_TIMEOUT;
 8001206:	2303      	movs	r3, #3
 8001208:	e0ca      	b.n	80013a0 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800120a:	4b4a      	ldr	r3, [pc, #296]	; (8001334 <HAL_RCC_OscConfig+0x680>)
 800120c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800120e:	2380      	movs	r3, #128	; 0x80
 8001210:	009b      	lsls	r3, r3, #2
 8001212:	4013      	ands	r3, r2
 8001214:	d0ef      	beq.n	80011f6 <HAL_RCC_OscConfig+0x542>
 8001216:	e014      	b.n	8001242 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001218:	f7ff facc 	bl	80007b4 <HAL_GetTick>
 800121c:	0003      	movs	r3, r0
 800121e:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001220:	e009      	b.n	8001236 <HAL_RCC_OscConfig+0x582>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001222:	f7ff fac7 	bl	80007b4 <HAL_GetTick>
 8001226:	0002      	movs	r2, r0
 8001228:	697b      	ldr	r3, [r7, #20]
 800122a:	1ad3      	subs	r3, r2, r3
 800122c:	4a46      	ldr	r2, [pc, #280]	; (8001348 <HAL_RCC_OscConfig+0x694>)
 800122e:	4293      	cmp	r3, r2
 8001230:	d901      	bls.n	8001236 <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
 8001232:	2303      	movs	r3, #3
 8001234:	e0b4      	b.n	80013a0 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001236:	4b3f      	ldr	r3, [pc, #252]	; (8001334 <HAL_RCC_OscConfig+0x680>)
 8001238:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800123a:	2380      	movs	r3, #128	; 0x80
 800123c:	009b      	lsls	r3, r3, #2
 800123e:	4013      	ands	r3, r2
 8001240:	d1ef      	bne.n	8001222 <HAL_RCC_OscConfig+0x56e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001242:	2323      	movs	r3, #35	; 0x23
 8001244:	18fb      	adds	r3, r7, r3
 8001246:	781b      	ldrb	r3, [r3, #0]
 8001248:	2b01      	cmp	r3, #1
 800124a:	d105      	bne.n	8001258 <HAL_RCC_OscConfig+0x5a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800124c:	4b39      	ldr	r3, [pc, #228]	; (8001334 <HAL_RCC_OscConfig+0x680>)
 800124e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001250:	4b38      	ldr	r3, [pc, #224]	; (8001334 <HAL_RCC_OscConfig+0x680>)
 8001252:	493e      	ldr	r1, [pc, #248]	; (800134c <HAL_RCC_OscConfig+0x698>)
 8001254:	400a      	ands	r2, r1
 8001256:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800125c:	2b00      	cmp	r3, #0
 800125e:	d100      	bne.n	8001262 <HAL_RCC_OscConfig+0x5ae>
 8001260:	e09d      	b.n	800139e <HAL_RCC_OscConfig+0x6ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001262:	69fb      	ldr	r3, [r7, #28]
 8001264:	2b0c      	cmp	r3, #12
 8001266:	d100      	bne.n	800126a <HAL_RCC_OscConfig+0x5b6>
 8001268:	e076      	b.n	8001358 <HAL_RCC_OscConfig+0x6a4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800126e:	2b02      	cmp	r3, #2
 8001270:	d145      	bne.n	80012fe <HAL_RCC_OscConfig+0x64a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001272:	4b30      	ldr	r3, [pc, #192]	; (8001334 <HAL_RCC_OscConfig+0x680>)
 8001274:	681a      	ldr	r2, [r3, #0]
 8001276:	4b2f      	ldr	r3, [pc, #188]	; (8001334 <HAL_RCC_OscConfig+0x680>)
 8001278:	4935      	ldr	r1, [pc, #212]	; (8001350 <HAL_RCC_OscConfig+0x69c>)
 800127a:	400a      	ands	r2, r1
 800127c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800127e:	f7ff fa99 	bl	80007b4 <HAL_GetTick>
 8001282:	0003      	movs	r3, r0
 8001284:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001286:	e008      	b.n	800129a <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001288:	f7ff fa94 	bl	80007b4 <HAL_GetTick>
 800128c:	0002      	movs	r2, r0
 800128e:	697b      	ldr	r3, [r7, #20]
 8001290:	1ad3      	subs	r3, r2, r3
 8001292:	2b02      	cmp	r3, #2
 8001294:	d901      	bls.n	800129a <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 8001296:	2303      	movs	r3, #3
 8001298:	e082      	b.n	80013a0 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800129a:	4b26      	ldr	r3, [pc, #152]	; (8001334 <HAL_RCC_OscConfig+0x680>)
 800129c:	681a      	ldr	r2, [r3, #0]
 800129e:	2380      	movs	r3, #128	; 0x80
 80012a0:	049b      	lsls	r3, r3, #18
 80012a2:	4013      	ands	r3, r2
 80012a4:	d1f0      	bne.n	8001288 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80012a6:	4b23      	ldr	r3, [pc, #140]	; (8001334 <HAL_RCC_OscConfig+0x680>)
 80012a8:	68db      	ldr	r3, [r3, #12]
 80012aa:	4a2a      	ldr	r2, [pc, #168]	; (8001354 <HAL_RCC_OscConfig+0x6a0>)
 80012ac:	4013      	ands	r3, r2
 80012ae:	0019      	movs	r1, r3
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012b8:	431a      	orrs	r2, r3
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012be:	431a      	orrs	r2, r3
 80012c0:	4b1c      	ldr	r3, [pc, #112]	; (8001334 <HAL_RCC_OscConfig+0x680>)
 80012c2:	430a      	orrs	r2, r1
 80012c4:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80012c6:	4b1b      	ldr	r3, [pc, #108]	; (8001334 <HAL_RCC_OscConfig+0x680>)
 80012c8:	681a      	ldr	r2, [r3, #0]
 80012ca:	4b1a      	ldr	r3, [pc, #104]	; (8001334 <HAL_RCC_OscConfig+0x680>)
 80012cc:	2180      	movs	r1, #128	; 0x80
 80012ce:	0449      	lsls	r1, r1, #17
 80012d0:	430a      	orrs	r2, r1
 80012d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012d4:	f7ff fa6e 	bl	80007b4 <HAL_GetTick>
 80012d8:	0003      	movs	r3, r0
 80012da:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80012dc:	e008      	b.n	80012f0 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80012de:	f7ff fa69 	bl	80007b4 <HAL_GetTick>
 80012e2:	0002      	movs	r2, r0
 80012e4:	697b      	ldr	r3, [r7, #20]
 80012e6:	1ad3      	subs	r3, r2, r3
 80012e8:	2b02      	cmp	r3, #2
 80012ea:	d901      	bls.n	80012f0 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 80012ec:	2303      	movs	r3, #3
 80012ee:	e057      	b.n	80013a0 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80012f0:	4b10      	ldr	r3, [pc, #64]	; (8001334 <HAL_RCC_OscConfig+0x680>)
 80012f2:	681a      	ldr	r2, [r3, #0]
 80012f4:	2380      	movs	r3, #128	; 0x80
 80012f6:	049b      	lsls	r3, r3, #18
 80012f8:	4013      	ands	r3, r2
 80012fa:	d0f0      	beq.n	80012de <HAL_RCC_OscConfig+0x62a>
 80012fc:	e04f      	b.n	800139e <HAL_RCC_OscConfig+0x6ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012fe:	4b0d      	ldr	r3, [pc, #52]	; (8001334 <HAL_RCC_OscConfig+0x680>)
 8001300:	681a      	ldr	r2, [r3, #0]
 8001302:	4b0c      	ldr	r3, [pc, #48]	; (8001334 <HAL_RCC_OscConfig+0x680>)
 8001304:	4912      	ldr	r1, [pc, #72]	; (8001350 <HAL_RCC_OscConfig+0x69c>)
 8001306:	400a      	ands	r2, r1
 8001308:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800130a:	f7ff fa53 	bl	80007b4 <HAL_GetTick>
 800130e:	0003      	movs	r3, r0
 8001310:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001312:	e008      	b.n	8001326 <HAL_RCC_OscConfig+0x672>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001314:	f7ff fa4e 	bl	80007b4 <HAL_GetTick>
 8001318:	0002      	movs	r2, r0
 800131a:	697b      	ldr	r3, [r7, #20]
 800131c:	1ad3      	subs	r3, r2, r3
 800131e:	2b02      	cmp	r3, #2
 8001320:	d901      	bls.n	8001326 <HAL_RCC_OscConfig+0x672>
          {
            return HAL_TIMEOUT;
 8001322:	2303      	movs	r3, #3
 8001324:	e03c      	b.n	80013a0 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001326:	4b03      	ldr	r3, [pc, #12]	; (8001334 <HAL_RCC_OscConfig+0x680>)
 8001328:	681a      	ldr	r2, [r3, #0]
 800132a:	2380      	movs	r3, #128	; 0x80
 800132c:	049b      	lsls	r3, r3, #18
 800132e:	4013      	ands	r3, r2
 8001330:	d1f0      	bne.n	8001314 <HAL_RCC_OscConfig+0x660>
 8001332:	e034      	b.n	800139e <HAL_RCC_OscConfig+0x6ea>
 8001334:	40021000 	.word	0x40021000
 8001338:	ffff1fff 	.word	0xffff1fff
 800133c:	fffffeff 	.word	0xfffffeff
 8001340:	40007000 	.word	0x40007000
 8001344:	fffffbff 	.word	0xfffffbff
 8001348:	00001388 	.word	0x00001388
 800134c:	efffffff 	.word	0xefffffff
 8001350:	feffffff 	.word	0xfeffffff
 8001354:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800135c:	2b01      	cmp	r3, #1
 800135e:	d101      	bne.n	8001364 <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
 8001360:	2301      	movs	r3, #1
 8001362:	e01d      	b.n	80013a0 <HAL_RCC_OscConfig+0x6ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001364:	4b10      	ldr	r3, [pc, #64]	; (80013a8 <HAL_RCC_OscConfig+0x6f4>)
 8001366:	68db      	ldr	r3, [r3, #12]
 8001368:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800136a:	69ba      	ldr	r2, [r7, #24]
 800136c:	2380      	movs	r3, #128	; 0x80
 800136e:	025b      	lsls	r3, r3, #9
 8001370:	401a      	ands	r2, r3
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001376:	429a      	cmp	r2, r3
 8001378:	d10f      	bne.n	800139a <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800137a:	69ba      	ldr	r2, [r7, #24]
 800137c:	23f0      	movs	r3, #240	; 0xf0
 800137e:	039b      	lsls	r3, r3, #14
 8001380:	401a      	ands	r2, r3
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001386:	429a      	cmp	r2, r3
 8001388:	d107      	bne.n	800139a <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800138a:	69ba      	ldr	r2, [r7, #24]
 800138c:	23c0      	movs	r3, #192	; 0xc0
 800138e:	041b      	lsls	r3, r3, #16
 8001390:	401a      	ands	r2, r3
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001396:	429a      	cmp	r2, r3
 8001398:	d001      	beq.n	800139e <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_ERROR;
 800139a:	2301      	movs	r3, #1
 800139c:	e000      	b.n	80013a0 <HAL_RCC_OscConfig+0x6ec>
        }
      }
    }
  }
  return HAL_OK;
 800139e:	2300      	movs	r3, #0
}
 80013a0:	0018      	movs	r0, r3
 80013a2:	46bd      	mov	sp, r7
 80013a4:	b00a      	add	sp, #40	; 0x28
 80013a6:	bdb0      	pop	{r4, r5, r7, pc}
 80013a8:	40021000 	.word	0x40021000

080013ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80013ac:	b5b0      	push	{r4, r5, r7, lr}
 80013ae:	b084      	sub	sp, #16
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
 80013b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d101      	bne.n	80013c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80013bc:	2301      	movs	r3, #1
 80013be:	e128      	b.n	8001612 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80013c0:	4b96      	ldr	r3, [pc, #600]	; (800161c <HAL_RCC_ClockConfig+0x270>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	2201      	movs	r2, #1
 80013c6:	4013      	ands	r3, r2
 80013c8:	683a      	ldr	r2, [r7, #0]
 80013ca:	429a      	cmp	r2, r3
 80013cc:	d91e      	bls.n	800140c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013ce:	4b93      	ldr	r3, [pc, #588]	; (800161c <HAL_RCC_ClockConfig+0x270>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	2201      	movs	r2, #1
 80013d4:	4393      	bics	r3, r2
 80013d6:	0019      	movs	r1, r3
 80013d8:	4b90      	ldr	r3, [pc, #576]	; (800161c <HAL_RCC_ClockConfig+0x270>)
 80013da:	683a      	ldr	r2, [r7, #0]
 80013dc:	430a      	orrs	r2, r1
 80013de:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80013e0:	f7ff f9e8 	bl	80007b4 <HAL_GetTick>
 80013e4:	0003      	movs	r3, r0
 80013e6:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80013e8:	e009      	b.n	80013fe <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80013ea:	f7ff f9e3 	bl	80007b4 <HAL_GetTick>
 80013ee:	0002      	movs	r2, r0
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	1ad3      	subs	r3, r2, r3
 80013f4:	4a8a      	ldr	r2, [pc, #552]	; (8001620 <HAL_RCC_ClockConfig+0x274>)
 80013f6:	4293      	cmp	r3, r2
 80013f8:	d901      	bls.n	80013fe <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80013fa:	2303      	movs	r3, #3
 80013fc:	e109      	b.n	8001612 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80013fe:	4b87      	ldr	r3, [pc, #540]	; (800161c <HAL_RCC_ClockConfig+0x270>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	2201      	movs	r2, #1
 8001404:	4013      	ands	r3, r2
 8001406:	683a      	ldr	r2, [r7, #0]
 8001408:	429a      	cmp	r2, r3
 800140a:	d1ee      	bne.n	80013ea <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	2202      	movs	r2, #2
 8001412:	4013      	ands	r3, r2
 8001414:	d009      	beq.n	800142a <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001416:	4b83      	ldr	r3, [pc, #524]	; (8001624 <HAL_RCC_ClockConfig+0x278>)
 8001418:	68db      	ldr	r3, [r3, #12]
 800141a:	22f0      	movs	r2, #240	; 0xf0
 800141c:	4393      	bics	r3, r2
 800141e:	0019      	movs	r1, r3
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	689a      	ldr	r2, [r3, #8]
 8001424:	4b7f      	ldr	r3, [pc, #508]	; (8001624 <HAL_RCC_ClockConfig+0x278>)
 8001426:	430a      	orrs	r2, r1
 8001428:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	2201      	movs	r2, #1
 8001430:	4013      	ands	r3, r2
 8001432:	d100      	bne.n	8001436 <HAL_RCC_ClockConfig+0x8a>
 8001434:	e089      	b.n	800154a <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	2b02      	cmp	r3, #2
 800143c:	d107      	bne.n	800144e <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800143e:	4b79      	ldr	r3, [pc, #484]	; (8001624 <HAL_RCC_ClockConfig+0x278>)
 8001440:	681a      	ldr	r2, [r3, #0]
 8001442:	2380      	movs	r3, #128	; 0x80
 8001444:	029b      	lsls	r3, r3, #10
 8001446:	4013      	ands	r3, r2
 8001448:	d120      	bne.n	800148c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800144a:	2301      	movs	r3, #1
 800144c:	e0e1      	b.n	8001612 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	2b03      	cmp	r3, #3
 8001454:	d107      	bne.n	8001466 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001456:	4b73      	ldr	r3, [pc, #460]	; (8001624 <HAL_RCC_ClockConfig+0x278>)
 8001458:	681a      	ldr	r2, [r3, #0]
 800145a:	2380      	movs	r3, #128	; 0x80
 800145c:	049b      	lsls	r3, r3, #18
 800145e:	4013      	ands	r3, r2
 8001460:	d114      	bne.n	800148c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001462:	2301      	movs	r3, #1
 8001464:	e0d5      	b.n	8001612 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	685b      	ldr	r3, [r3, #4]
 800146a:	2b01      	cmp	r3, #1
 800146c:	d106      	bne.n	800147c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800146e:	4b6d      	ldr	r3, [pc, #436]	; (8001624 <HAL_RCC_ClockConfig+0x278>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	2204      	movs	r2, #4
 8001474:	4013      	ands	r3, r2
 8001476:	d109      	bne.n	800148c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001478:	2301      	movs	r3, #1
 800147a:	e0ca      	b.n	8001612 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800147c:	4b69      	ldr	r3, [pc, #420]	; (8001624 <HAL_RCC_ClockConfig+0x278>)
 800147e:	681a      	ldr	r2, [r3, #0]
 8001480:	2380      	movs	r3, #128	; 0x80
 8001482:	009b      	lsls	r3, r3, #2
 8001484:	4013      	ands	r3, r2
 8001486:	d101      	bne.n	800148c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001488:	2301      	movs	r3, #1
 800148a:	e0c2      	b.n	8001612 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800148c:	4b65      	ldr	r3, [pc, #404]	; (8001624 <HAL_RCC_ClockConfig+0x278>)
 800148e:	68db      	ldr	r3, [r3, #12]
 8001490:	2203      	movs	r2, #3
 8001492:	4393      	bics	r3, r2
 8001494:	0019      	movs	r1, r3
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	685a      	ldr	r2, [r3, #4]
 800149a:	4b62      	ldr	r3, [pc, #392]	; (8001624 <HAL_RCC_ClockConfig+0x278>)
 800149c:	430a      	orrs	r2, r1
 800149e:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80014a0:	f7ff f988 	bl	80007b4 <HAL_GetTick>
 80014a4:	0003      	movs	r3, r0
 80014a6:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	2b02      	cmp	r3, #2
 80014ae:	d111      	bne.n	80014d4 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80014b0:	e009      	b.n	80014c6 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014b2:	f7ff f97f 	bl	80007b4 <HAL_GetTick>
 80014b6:	0002      	movs	r2, r0
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	1ad3      	subs	r3, r2, r3
 80014bc:	4a58      	ldr	r2, [pc, #352]	; (8001620 <HAL_RCC_ClockConfig+0x274>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	d901      	bls.n	80014c6 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 80014c2:	2303      	movs	r3, #3
 80014c4:	e0a5      	b.n	8001612 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80014c6:	4b57      	ldr	r3, [pc, #348]	; (8001624 <HAL_RCC_ClockConfig+0x278>)
 80014c8:	68db      	ldr	r3, [r3, #12]
 80014ca:	220c      	movs	r2, #12
 80014cc:	4013      	ands	r3, r2
 80014ce:	2b08      	cmp	r3, #8
 80014d0:	d1ef      	bne.n	80014b2 <HAL_RCC_ClockConfig+0x106>
 80014d2:	e03a      	b.n	800154a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	2b03      	cmp	r3, #3
 80014da:	d111      	bne.n	8001500 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80014dc:	e009      	b.n	80014f2 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014de:	f7ff f969 	bl	80007b4 <HAL_GetTick>
 80014e2:	0002      	movs	r2, r0
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	1ad3      	subs	r3, r2, r3
 80014e8:	4a4d      	ldr	r2, [pc, #308]	; (8001620 <HAL_RCC_ClockConfig+0x274>)
 80014ea:	4293      	cmp	r3, r2
 80014ec:	d901      	bls.n	80014f2 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 80014ee:	2303      	movs	r3, #3
 80014f0:	e08f      	b.n	8001612 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80014f2:	4b4c      	ldr	r3, [pc, #304]	; (8001624 <HAL_RCC_ClockConfig+0x278>)
 80014f4:	68db      	ldr	r3, [r3, #12]
 80014f6:	220c      	movs	r2, #12
 80014f8:	4013      	ands	r3, r2
 80014fa:	2b0c      	cmp	r3, #12
 80014fc:	d1ef      	bne.n	80014de <HAL_RCC_ClockConfig+0x132>
 80014fe:	e024      	b.n	800154a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	2b01      	cmp	r3, #1
 8001506:	d11b      	bne.n	8001540 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001508:	e009      	b.n	800151e <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800150a:	f7ff f953 	bl	80007b4 <HAL_GetTick>
 800150e:	0002      	movs	r2, r0
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	1ad3      	subs	r3, r2, r3
 8001514:	4a42      	ldr	r2, [pc, #264]	; (8001620 <HAL_RCC_ClockConfig+0x274>)
 8001516:	4293      	cmp	r3, r2
 8001518:	d901      	bls.n	800151e <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 800151a:	2303      	movs	r3, #3
 800151c:	e079      	b.n	8001612 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800151e:	4b41      	ldr	r3, [pc, #260]	; (8001624 <HAL_RCC_ClockConfig+0x278>)
 8001520:	68db      	ldr	r3, [r3, #12]
 8001522:	220c      	movs	r2, #12
 8001524:	4013      	ands	r3, r2
 8001526:	2b04      	cmp	r3, #4
 8001528:	d1ef      	bne.n	800150a <HAL_RCC_ClockConfig+0x15e>
 800152a:	e00e      	b.n	800154a <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800152c:	f7ff f942 	bl	80007b4 <HAL_GetTick>
 8001530:	0002      	movs	r2, r0
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	1ad3      	subs	r3, r2, r3
 8001536:	4a3a      	ldr	r2, [pc, #232]	; (8001620 <HAL_RCC_ClockConfig+0x274>)
 8001538:	4293      	cmp	r3, r2
 800153a:	d901      	bls.n	8001540 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 800153c:	2303      	movs	r3, #3
 800153e:	e068      	b.n	8001612 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001540:	4b38      	ldr	r3, [pc, #224]	; (8001624 <HAL_RCC_ClockConfig+0x278>)
 8001542:	68db      	ldr	r3, [r3, #12]
 8001544:	220c      	movs	r2, #12
 8001546:	4013      	ands	r3, r2
 8001548:	d1f0      	bne.n	800152c <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800154a:	4b34      	ldr	r3, [pc, #208]	; (800161c <HAL_RCC_ClockConfig+0x270>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	2201      	movs	r2, #1
 8001550:	4013      	ands	r3, r2
 8001552:	683a      	ldr	r2, [r7, #0]
 8001554:	429a      	cmp	r2, r3
 8001556:	d21e      	bcs.n	8001596 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001558:	4b30      	ldr	r3, [pc, #192]	; (800161c <HAL_RCC_ClockConfig+0x270>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	2201      	movs	r2, #1
 800155e:	4393      	bics	r3, r2
 8001560:	0019      	movs	r1, r3
 8001562:	4b2e      	ldr	r3, [pc, #184]	; (800161c <HAL_RCC_ClockConfig+0x270>)
 8001564:	683a      	ldr	r2, [r7, #0]
 8001566:	430a      	orrs	r2, r1
 8001568:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800156a:	f7ff f923 	bl	80007b4 <HAL_GetTick>
 800156e:	0003      	movs	r3, r0
 8001570:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001572:	e009      	b.n	8001588 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001574:	f7ff f91e 	bl	80007b4 <HAL_GetTick>
 8001578:	0002      	movs	r2, r0
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	1ad3      	subs	r3, r2, r3
 800157e:	4a28      	ldr	r2, [pc, #160]	; (8001620 <HAL_RCC_ClockConfig+0x274>)
 8001580:	4293      	cmp	r3, r2
 8001582:	d901      	bls.n	8001588 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8001584:	2303      	movs	r3, #3
 8001586:	e044      	b.n	8001612 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001588:	4b24      	ldr	r3, [pc, #144]	; (800161c <HAL_RCC_ClockConfig+0x270>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	2201      	movs	r2, #1
 800158e:	4013      	ands	r3, r2
 8001590:	683a      	ldr	r2, [r7, #0]
 8001592:	429a      	cmp	r2, r3
 8001594:	d1ee      	bne.n	8001574 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	2204      	movs	r2, #4
 800159c:	4013      	ands	r3, r2
 800159e:	d009      	beq.n	80015b4 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80015a0:	4b20      	ldr	r3, [pc, #128]	; (8001624 <HAL_RCC_ClockConfig+0x278>)
 80015a2:	68db      	ldr	r3, [r3, #12]
 80015a4:	4a20      	ldr	r2, [pc, #128]	; (8001628 <HAL_RCC_ClockConfig+0x27c>)
 80015a6:	4013      	ands	r3, r2
 80015a8:	0019      	movs	r1, r3
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	68da      	ldr	r2, [r3, #12]
 80015ae:	4b1d      	ldr	r3, [pc, #116]	; (8001624 <HAL_RCC_ClockConfig+0x278>)
 80015b0:	430a      	orrs	r2, r1
 80015b2:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	2208      	movs	r2, #8
 80015ba:	4013      	ands	r3, r2
 80015bc:	d00a      	beq.n	80015d4 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80015be:	4b19      	ldr	r3, [pc, #100]	; (8001624 <HAL_RCC_ClockConfig+0x278>)
 80015c0:	68db      	ldr	r3, [r3, #12]
 80015c2:	4a1a      	ldr	r2, [pc, #104]	; (800162c <HAL_RCC_ClockConfig+0x280>)
 80015c4:	4013      	ands	r3, r2
 80015c6:	0019      	movs	r1, r3
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	691b      	ldr	r3, [r3, #16]
 80015cc:	00da      	lsls	r2, r3, #3
 80015ce:	4b15      	ldr	r3, [pc, #84]	; (8001624 <HAL_RCC_ClockConfig+0x278>)
 80015d0:	430a      	orrs	r2, r1
 80015d2:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80015d4:	f000 f832 	bl	800163c <HAL_RCC_GetSysClockFreq>
 80015d8:	0001      	movs	r1, r0
 80015da:	4b12      	ldr	r3, [pc, #72]	; (8001624 <HAL_RCC_ClockConfig+0x278>)
 80015dc:	68db      	ldr	r3, [r3, #12]
 80015de:	091b      	lsrs	r3, r3, #4
 80015e0:	220f      	movs	r2, #15
 80015e2:	4013      	ands	r3, r2
 80015e4:	4a12      	ldr	r2, [pc, #72]	; (8001630 <HAL_RCC_ClockConfig+0x284>)
 80015e6:	5cd3      	ldrb	r3, [r2, r3]
 80015e8:	000a      	movs	r2, r1
 80015ea:	40da      	lsrs	r2, r3
 80015ec:	4b11      	ldr	r3, [pc, #68]	; (8001634 <HAL_RCC_ClockConfig+0x288>)
 80015ee:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80015f0:	4b11      	ldr	r3, [pc, #68]	; (8001638 <HAL_RCC_ClockConfig+0x28c>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	250b      	movs	r5, #11
 80015f6:	197c      	adds	r4, r7, r5
 80015f8:	0018      	movs	r0, r3
 80015fa:	f7ff f895 	bl	8000728 <HAL_InitTick>
 80015fe:	0003      	movs	r3, r0
 8001600:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8001602:	197b      	adds	r3, r7, r5
 8001604:	781b      	ldrb	r3, [r3, #0]
 8001606:	2b00      	cmp	r3, #0
 8001608:	d002      	beq.n	8001610 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 800160a:	197b      	adds	r3, r7, r5
 800160c:	781b      	ldrb	r3, [r3, #0]
 800160e:	e000      	b.n	8001612 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8001610:	2300      	movs	r3, #0
}
 8001612:	0018      	movs	r0, r3
 8001614:	46bd      	mov	sp, r7
 8001616:	b004      	add	sp, #16
 8001618:	bdb0      	pop	{r4, r5, r7, pc}
 800161a:	46c0      	nop			; (mov r8, r8)
 800161c:	40022000 	.word	0x40022000
 8001620:	00001388 	.word	0x00001388
 8001624:	40021000 	.word	0x40021000
 8001628:	fffff8ff 	.word	0xfffff8ff
 800162c:	ffffc7ff 	.word	0xffffc7ff
 8001630:	080017f8 	.word	0x080017f8
 8001634:	20000000 	.word	0x20000000
 8001638:	20000004 	.word	0x20000004

0800163c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800163c:	b5b0      	push	{r4, r5, r7, lr}
 800163e:	b08e      	sub	sp, #56	; 0x38
 8001640:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8001642:	4b4c      	ldr	r3, [pc, #304]	; (8001774 <HAL_RCC_GetSysClockFreq+0x138>)
 8001644:	68db      	ldr	r3, [r3, #12]
 8001646:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001648:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800164a:	230c      	movs	r3, #12
 800164c:	4013      	ands	r3, r2
 800164e:	2b0c      	cmp	r3, #12
 8001650:	d014      	beq.n	800167c <HAL_RCC_GetSysClockFreq+0x40>
 8001652:	d900      	bls.n	8001656 <HAL_RCC_GetSysClockFreq+0x1a>
 8001654:	e07b      	b.n	800174e <HAL_RCC_GetSysClockFreq+0x112>
 8001656:	2b04      	cmp	r3, #4
 8001658:	d002      	beq.n	8001660 <HAL_RCC_GetSysClockFreq+0x24>
 800165a:	2b08      	cmp	r3, #8
 800165c:	d00b      	beq.n	8001676 <HAL_RCC_GetSysClockFreq+0x3a>
 800165e:	e076      	b.n	800174e <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001660:	4b44      	ldr	r3, [pc, #272]	; (8001774 <HAL_RCC_GetSysClockFreq+0x138>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	2210      	movs	r2, #16
 8001666:	4013      	ands	r3, r2
 8001668:	d002      	beq.n	8001670 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 800166a:	4b43      	ldr	r3, [pc, #268]	; (8001778 <HAL_RCC_GetSysClockFreq+0x13c>)
 800166c:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 800166e:	e07c      	b.n	800176a <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8001670:	4b42      	ldr	r3, [pc, #264]	; (800177c <HAL_RCC_GetSysClockFreq+0x140>)
 8001672:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001674:	e079      	b.n	800176a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001676:	4b42      	ldr	r3, [pc, #264]	; (8001780 <HAL_RCC_GetSysClockFreq+0x144>)
 8001678:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800167a:	e076      	b.n	800176a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800167c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800167e:	0c9a      	lsrs	r2, r3, #18
 8001680:	230f      	movs	r3, #15
 8001682:	401a      	ands	r2, r3
 8001684:	4b3f      	ldr	r3, [pc, #252]	; (8001784 <HAL_RCC_GetSysClockFreq+0x148>)
 8001686:	5c9b      	ldrb	r3, [r3, r2]
 8001688:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800168a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800168c:	0d9a      	lsrs	r2, r3, #22
 800168e:	2303      	movs	r3, #3
 8001690:	4013      	ands	r3, r2
 8001692:	3301      	adds	r3, #1
 8001694:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001696:	4b37      	ldr	r3, [pc, #220]	; (8001774 <HAL_RCC_GetSysClockFreq+0x138>)
 8001698:	68da      	ldr	r2, [r3, #12]
 800169a:	2380      	movs	r3, #128	; 0x80
 800169c:	025b      	lsls	r3, r3, #9
 800169e:	4013      	ands	r3, r2
 80016a0:	d01a      	beq.n	80016d8 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80016a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016a4:	61bb      	str	r3, [r7, #24]
 80016a6:	2300      	movs	r3, #0
 80016a8:	61fb      	str	r3, [r7, #28]
 80016aa:	4a35      	ldr	r2, [pc, #212]	; (8001780 <HAL_RCC_GetSysClockFreq+0x144>)
 80016ac:	2300      	movs	r3, #0
 80016ae:	69b8      	ldr	r0, [r7, #24]
 80016b0:	69f9      	ldr	r1, [r7, #28]
 80016b2:	f7fe fdd5 	bl	8000260 <__aeabi_lmul>
 80016b6:	0002      	movs	r2, r0
 80016b8:	000b      	movs	r3, r1
 80016ba:	0010      	movs	r0, r2
 80016bc:	0019      	movs	r1, r3
 80016be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016c0:	613b      	str	r3, [r7, #16]
 80016c2:	2300      	movs	r3, #0
 80016c4:	617b      	str	r3, [r7, #20]
 80016c6:	693a      	ldr	r2, [r7, #16]
 80016c8:	697b      	ldr	r3, [r7, #20]
 80016ca:	f7fe fda9 	bl	8000220 <__aeabi_uldivmod>
 80016ce:	0002      	movs	r2, r0
 80016d0:	000b      	movs	r3, r1
 80016d2:	0013      	movs	r3, r2
 80016d4:	637b      	str	r3, [r7, #52]	; 0x34
 80016d6:	e037      	b.n	8001748 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80016d8:	4b26      	ldr	r3, [pc, #152]	; (8001774 <HAL_RCC_GetSysClockFreq+0x138>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	2210      	movs	r2, #16
 80016de:	4013      	ands	r3, r2
 80016e0:	d01a      	beq.n	8001718 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 80016e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016e4:	60bb      	str	r3, [r7, #8]
 80016e6:	2300      	movs	r3, #0
 80016e8:	60fb      	str	r3, [r7, #12]
 80016ea:	4a23      	ldr	r2, [pc, #140]	; (8001778 <HAL_RCC_GetSysClockFreq+0x13c>)
 80016ec:	2300      	movs	r3, #0
 80016ee:	68b8      	ldr	r0, [r7, #8]
 80016f0:	68f9      	ldr	r1, [r7, #12]
 80016f2:	f7fe fdb5 	bl	8000260 <__aeabi_lmul>
 80016f6:	0002      	movs	r2, r0
 80016f8:	000b      	movs	r3, r1
 80016fa:	0010      	movs	r0, r2
 80016fc:	0019      	movs	r1, r3
 80016fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001700:	603b      	str	r3, [r7, #0]
 8001702:	2300      	movs	r3, #0
 8001704:	607b      	str	r3, [r7, #4]
 8001706:	683a      	ldr	r2, [r7, #0]
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	f7fe fd89 	bl	8000220 <__aeabi_uldivmod>
 800170e:	0002      	movs	r2, r0
 8001710:	000b      	movs	r3, r1
 8001712:	0013      	movs	r3, r2
 8001714:	637b      	str	r3, [r7, #52]	; 0x34
 8001716:	e017      	b.n	8001748 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800171a:	0018      	movs	r0, r3
 800171c:	2300      	movs	r3, #0
 800171e:	0019      	movs	r1, r3
 8001720:	4a16      	ldr	r2, [pc, #88]	; (800177c <HAL_RCC_GetSysClockFreq+0x140>)
 8001722:	2300      	movs	r3, #0
 8001724:	f7fe fd9c 	bl	8000260 <__aeabi_lmul>
 8001728:	0002      	movs	r2, r0
 800172a:	000b      	movs	r3, r1
 800172c:	0010      	movs	r0, r2
 800172e:	0019      	movs	r1, r3
 8001730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001732:	001c      	movs	r4, r3
 8001734:	2300      	movs	r3, #0
 8001736:	001d      	movs	r5, r3
 8001738:	0022      	movs	r2, r4
 800173a:	002b      	movs	r3, r5
 800173c:	f7fe fd70 	bl	8000220 <__aeabi_uldivmod>
 8001740:	0002      	movs	r2, r0
 8001742:	000b      	movs	r3, r1
 8001744:	0013      	movs	r3, r2
 8001746:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8001748:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800174a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800174c:	e00d      	b.n	800176a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800174e:	4b09      	ldr	r3, [pc, #36]	; (8001774 <HAL_RCC_GetSysClockFreq+0x138>)
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	0b5b      	lsrs	r3, r3, #13
 8001754:	2207      	movs	r2, #7
 8001756:	4013      	ands	r3, r2
 8001758:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800175a:	6a3b      	ldr	r3, [r7, #32]
 800175c:	3301      	adds	r3, #1
 800175e:	2280      	movs	r2, #128	; 0x80
 8001760:	0212      	lsls	r2, r2, #8
 8001762:	409a      	lsls	r2, r3
 8001764:	0013      	movs	r3, r2
 8001766:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001768:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800176a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800176c:	0018      	movs	r0, r3
 800176e:	46bd      	mov	sp, r7
 8001770:	b00e      	add	sp, #56	; 0x38
 8001772:	bdb0      	pop	{r4, r5, r7, pc}
 8001774:	40021000 	.word	0x40021000
 8001778:	003d0900 	.word	0x003d0900
 800177c:	00f42400 	.word	0x00f42400
 8001780:	007a1200 	.word	0x007a1200
 8001784:	08001808 	.word	0x08001808

08001788 <__libc_init_array>:
 8001788:	b570      	push	{r4, r5, r6, lr}
 800178a:	2600      	movs	r6, #0
 800178c:	4d0c      	ldr	r5, [pc, #48]	; (80017c0 <__libc_init_array+0x38>)
 800178e:	4c0d      	ldr	r4, [pc, #52]	; (80017c4 <__libc_init_array+0x3c>)
 8001790:	1b64      	subs	r4, r4, r5
 8001792:	10a4      	asrs	r4, r4, #2
 8001794:	42a6      	cmp	r6, r4
 8001796:	d109      	bne.n	80017ac <__libc_init_array+0x24>
 8001798:	2600      	movs	r6, #0
 800179a:	f000 f821 	bl	80017e0 <_init>
 800179e:	4d0a      	ldr	r5, [pc, #40]	; (80017c8 <__libc_init_array+0x40>)
 80017a0:	4c0a      	ldr	r4, [pc, #40]	; (80017cc <__libc_init_array+0x44>)
 80017a2:	1b64      	subs	r4, r4, r5
 80017a4:	10a4      	asrs	r4, r4, #2
 80017a6:	42a6      	cmp	r6, r4
 80017a8:	d105      	bne.n	80017b6 <__libc_init_array+0x2e>
 80017aa:	bd70      	pop	{r4, r5, r6, pc}
 80017ac:	00b3      	lsls	r3, r6, #2
 80017ae:	58eb      	ldr	r3, [r5, r3]
 80017b0:	4798      	blx	r3
 80017b2:	3601      	adds	r6, #1
 80017b4:	e7ee      	b.n	8001794 <__libc_init_array+0xc>
 80017b6:	00b3      	lsls	r3, r6, #2
 80017b8:	58eb      	ldr	r3, [r5, r3]
 80017ba:	4798      	blx	r3
 80017bc:	3601      	adds	r6, #1
 80017be:	e7f2      	b.n	80017a6 <__libc_init_array+0x1e>
 80017c0:	0800181c 	.word	0x0800181c
 80017c4:	0800181c 	.word	0x0800181c
 80017c8:	0800181c 	.word	0x0800181c
 80017cc:	08001820 	.word	0x08001820

080017d0 <memset>:
 80017d0:	0003      	movs	r3, r0
 80017d2:	1882      	adds	r2, r0, r2
 80017d4:	4293      	cmp	r3, r2
 80017d6:	d100      	bne.n	80017da <memset+0xa>
 80017d8:	4770      	bx	lr
 80017da:	7019      	strb	r1, [r3, #0]
 80017dc:	3301      	adds	r3, #1
 80017de:	e7f9      	b.n	80017d4 <memset+0x4>

080017e0 <_init>:
 80017e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017e2:	46c0      	nop			; (mov r8, r8)
 80017e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80017e6:	bc08      	pop	{r3}
 80017e8:	469e      	mov	lr, r3
 80017ea:	4770      	bx	lr

080017ec <_fini>:
 80017ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017ee:	46c0      	nop			; (mov r8, r8)
 80017f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80017f2:	bc08      	pop	{r3}
 80017f4:	469e      	mov	lr, r3
 80017f6:	4770      	bx	lr
