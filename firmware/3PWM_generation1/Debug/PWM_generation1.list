
PWM_generation1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002cdc  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  08002d9c  08002d9c  00012d9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002e78  08002e78  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08002e78  08002e78  00012e78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002e80  08002e80  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002e80  08002e80  00012e80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002e84  08002e84  00012e84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08002e88  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000064  20000014  08002e9c  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000078  08002e9c  00020078  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006984  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000012c0  00000000  00000000  000269c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000790  00000000  00000000  00027c80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000006e8  00000000  00000000  00028410  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000fe87  00000000  00000000  00028af8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007ed3  00000000  00000000  0003897f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000630ff  00000000  00000000  00040852  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000a3951  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001c7c  00000000  00000000  000a39a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000014 	.word	0x20000014
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002d84 	.word	0x08002d84

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000018 	.word	0x20000018
 8000104:	08002d84 	.word	0x08002d84

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	0008      	movs	r0, r1
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f84c 	bl	80002ec <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	46ce      	mov	lr, r9
 8000264:	4647      	mov	r7, r8
 8000266:	b580      	push	{r7, lr}
 8000268:	0007      	movs	r7, r0
 800026a:	4699      	mov	r9, r3
 800026c:	0c3b      	lsrs	r3, r7, #16
 800026e:	469c      	mov	ip, r3
 8000270:	0413      	lsls	r3, r2, #16
 8000272:	0c1b      	lsrs	r3, r3, #16
 8000274:	001d      	movs	r5, r3
 8000276:	000e      	movs	r6, r1
 8000278:	4661      	mov	r1, ip
 800027a:	0400      	lsls	r0, r0, #16
 800027c:	0c14      	lsrs	r4, r2, #16
 800027e:	0c00      	lsrs	r0, r0, #16
 8000280:	4345      	muls	r5, r0
 8000282:	434b      	muls	r3, r1
 8000284:	4360      	muls	r0, r4
 8000286:	4361      	muls	r1, r4
 8000288:	18c0      	adds	r0, r0, r3
 800028a:	0c2c      	lsrs	r4, r5, #16
 800028c:	1820      	adds	r0, r4, r0
 800028e:	468c      	mov	ip, r1
 8000290:	4283      	cmp	r3, r0
 8000292:	d903      	bls.n	800029c <__aeabi_lmul+0x3c>
 8000294:	2380      	movs	r3, #128	; 0x80
 8000296:	025b      	lsls	r3, r3, #9
 8000298:	4698      	mov	r8, r3
 800029a:	44c4      	add	ip, r8
 800029c:	4649      	mov	r1, r9
 800029e:	4379      	muls	r1, r7
 80002a0:	4372      	muls	r2, r6
 80002a2:	0c03      	lsrs	r3, r0, #16
 80002a4:	4463      	add	r3, ip
 80002a6:	042d      	lsls	r5, r5, #16
 80002a8:	0c2d      	lsrs	r5, r5, #16
 80002aa:	18c9      	adds	r1, r1, r3
 80002ac:	0400      	lsls	r0, r0, #16
 80002ae:	1940      	adds	r0, r0, r5
 80002b0:	1889      	adds	r1, r1, r2
 80002b2:	bcc0      	pop	{r6, r7}
 80002b4:	46b9      	mov	r9, r7
 80002b6:	46b0      	mov	r8, r6
 80002b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ba:	46c0      	nop			; (mov r8, r8)

080002bc <__aeabi_f2uiz>:
 80002bc:	219e      	movs	r1, #158	; 0x9e
 80002be:	b510      	push	{r4, lr}
 80002c0:	05c9      	lsls	r1, r1, #23
 80002c2:	1c04      	adds	r4, r0, #0
 80002c4:	f000 fd5c 	bl	8000d80 <__aeabi_fcmpge>
 80002c8:	2800      	cmp	r0, #0
 80002ca:	d103      	bne.n	80002d4 <__aeabi_f2uiz+0x18>
 80002cc:	1c20      	adds	r0, r4, #0
 80002ce:	f000 fcc5 	bl	8000c5c <__aeabi_f2iz>
 80002d2:	bd10      	pop	{r4, pc}
 80002d4:	219e      	movs	r1, #158	; 0x9e
 80002d6:	1c20      	adds	r0, r4, #0
 80002d8:	05c9      	lsls	r1, r1, #23
 80002da:	f000 fb11 	bl	8000900 <__aeabi_fsub>
 80002de:	f000 fcbd 	bl	8000c5c <__aeabi_f2iz>
 80002e2:	2380      	movs	r3, #128	; 0x80
 80002e4:	061b      	lsls	r3, r3, #24
 80002e6:	469c      	mov	ip, r3
 80002e8:	4460      	add	r0, ip
 80002ea:	e7f2      	b.n	80002d2 <__aeabi_f2uiz+0x16>

080002ec <__udivmoddi4>:
 80002ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002ee:	4657      	mov	r7, sl
 80002f0:	464e      	mov	r6, r9
 80002f2:	4645      	mov	r5, r8
 80002f4:	46de      	mov	lr, fp
 80002f6:	b5e0      	push	{r5, r6, r7, lr}
 80002f8:	0004      	movs	r4, r0
 80002fa:	000d      	movs	r5, r1
 80002fc:	4692      	mov	sl, r2
 80002fe:	4699      	mov	r9, r3
 8000300:	b083      	sub	sp, #12
 8000302:	428b      	cmp	r3, r1
 8000304:	d830      	bhi.n	8000368 <__udivmoddi4+0x7c>
 8000306:	d02d      	beq.n	8000364 <__udivmoddi4+0x78>
 8000308:	4649      	mov	r1, r9
 800030a:	4650      	mov	r0, sl
 800030c:	f000 fd60 	bl	8000dd0 <__clzdi2>
 8000310:	0029      	movs	r1, r5
 8000312:	0006      	movs	r6, r0
 8000314:	0020      	movs	r0, r4
 8000316:	f000 fd5b 	bl	8000dd0 <__clzdi2>
 800031a:	1a33      	subs	r3, r6, r0
 800031c:	4698      	mov	r8, r3
 800031e:	3b20      	subs	r3, #32
 8000320:	469b      	mov	fp, r3
 8000322:	d433      	bmi.n	800038c <__udivmoddi4+0xa0>
 8000324:	465a      	mov	r2, fp
 8000326:	4653      	mov	r3, sl
 8000328:	4093      	lsls	r3, r2
 800032a:	4642      	mov	r2, r8
 800032c:	001f      	movs	r7, r3
 800032e:	4653      	mov	r3, sl
 8000330:	4093      	lsls	r3, r2
 8000332:	001e      	movs	r6, r3
 8000334:	42af      	cmp	r7, r5
 8000336:	d83a      	bhi.n	80003ae <__udivmoddi4+0xc2>
 8000338:	42af      	cmp	r7, r5
 800033a:	d100      	bne.n	800033e <__udivmoddi4+0x52>
 800033c:	e078      	b.n	8000430 <__udivmoddi4+0x144>
 800033e:	465b      	mov	r3, fp
 8000340:	1ba4      	subs	r4, r4, r6
 8000342:	41bd      	sbcs	r5, r7
 8000344:	2b00      	cmp	r3, #0
 8000346:	da00      	bge.n	800034a <__udivmoddi4+0x5e>
 8000348:	e075      	b.n	8000436 <__udivmoddi4+0x14a>
 800034a:	2200      	movs	r2, #0
 800034c:	2300      	movs	r3, #0
 800034e:	9200      	str	r2, [sp, #0]
 8000350:	9301      	str	r3, [sp, #4]
 8000352:	2301      	movs	r3, #1
 8000354:	465a      	mov	r2, fp
 8000356:	4093      	lsls	r3, r2
 8000358:	9301      	str	r3, [sp, #4]
 800035a:	2301      	movs	r3, #1
 800035c:	4642      	mov	r2, r8
 800035e:	4093      	lsls	r3, r2
 8000360:	9300      	str	r3, [sp, #0]
 8000362:	e028      	b.n	80003b6 <__udivmoddi4+0xca>
 8000364:	4282      	cmp	r2, r0
 8000366:	d9cf      	bls.n	8000308 <__udivmoddi4+0x1c>
 8000368:	2200      	movs	r2, #0
 800036a:	2300      	movs	r3, #0
 800036c:	9200      	str	r2, [sp, #0]
 800036e:	9301      	str	r3, [sp, #4]
 8000370:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000372:	2b00      	cmp	r3, #0
 8000374:	d001      	beq.n	800037a <__udivmoddi4+0x8e>
 8000376:	601c      	str	r4, [r3, #0]
 8000378:	605d      	str	r5, [r3, #4]
 800037a:	9800      	ldr	r0, [sp, #0]
 800037c:	9901      	ldr	r1, [sp, #4]
 800037e:	b003      	add	sp, #12
 8000380:	bcf0      	pop	{r4, r5, r6, r7}
 8000382:	46bb      	mov	fp, r7
 8000384:	46b2      	mov	sl, r6
 8000386:	46a9      	mov	r9, r5
 8000388:	46a0      	mov	r8, r4
 800038a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800038c:	4642      	mov	r2, r8
 800038e:	2320      	movs	r3, #32
 8000390:	1a9b      	subs	r3, r3, r2
 8000392:	4652      	mov	r2, sl
 8000394:	40da      	lsrs	r2, r3
 8000396:	4641      	mov	r1, r8
 8000398:	0013      	movs	r3, r2
 800039a:	464a      	mov	r2, r9
 800039c:	408a      	lsls	r2, r1
 800039e:	0017      	movs	r7, r2
 80003a0:	4642      	mov	r2, r8
 80003a2:	431f      	orrs	r7, r3
 80003a4:	4653      	mov	r3, sl
 80003a6:	4093      	lsls	r3, r2
 80003a8:	001e      	movs	r6, r3
 80003aa:	42af      	cmp	r7, r5
 80003ac:	d9c4      	bls.n	8000338 <__udivmoddi4+0x4c>
 80003ae:	2200      	movs	r2, #0
 80003b0:	2300      	movs	r3, #0
 80003b2:	9200      	str	r2, [sp, #0]
 80003b4:	9301      	str	r3, [sp, #4]
 80003b6:	4643      	mov	r3, r8
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	d0d9      	beq.n	8000370 <__udivmoddi4+0x84>
 80003bc:	07fb      	lsls	r3, r7, #31
 80003be:	0872      	lsrs	r2, r6, #1
 80003c0:	431a      	orrs	r2, r3
 80003c2:	4646      	mov	r6, r8
 80003c4:	087b      	lsrs	r3, r7, #1
 80003c6:	e00e      	b.n	80003e6 <__udivmoddi4+0xfa>
 80003c8:	42ab      	cmp	r3, r5
 80003ca:	d101      	bne.n	80003d0 <__udivmoddi4+0xe4>
 80003cc:	42a2      	cmp	r2, r4
 80003ce:	d80c      	bhi.n	80003ea <__udivmoddi4+0xfe>
 80003d0:	1aa4      	subs	r4, r4, r2
 80003d2:	419d      	sbcs	r5, r3
 80003d4:	2001      	movs	r0, #1
 80003d6:	1924      	adds	r4, r4, r4
 80003d8:	416d      	adcs	r5, r5
 80003da:	2100      	movs	r1, #0
 80003dc:	3e01      	subs	r6, #1
 80003de:	1824      	adds	r4, r4, r0
 80003e0:	414d      	adcs	r5, r1
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d006      	beq.n	80003f4 <__udivmoddi4+0x108>
 80003e6:	42ab      	cmp	r3, r5
 80003e8:	d9ee      	bls.n	80003c8 <__udivmoddi4+0xdc>
 80003ea:	3e01      	subs	r6, #1
 80003ec:	1924      	adds	r4, r4, r4
 80003ee:	416d      	adcs	r5, r5
 80003f0:	2e00      	cmp	r6, #0
 80003f2:	d1f8      	bne.n	80003e6 <__udivmoddi4+0xfa>
 80003f4:	9800      	ldr	r0, [sp, #0]
 80003f6:	9901      	ldr	r1, [sp, #4]
 80003f8:	465b      	mov	r3, fp
 80003fa:	1900      	adds	r0, r0, r4
 80003fc:	4169      	adcs	r1, r5
 80003fe:	2b00      	cmp	r3, #0
 8000400:	db24      	blt.n	800044c <__udivmoddi4+0x160>
 8000402:	002b      	movs	r3, r5
 8000404:	465a      	mov	r2, fp
 8000406:	4644      	mov	r4, r8
 8000408:	40d3      	lsrs	r3, r2
 800040a:	002a      	movs	r2, r5
 800040c:	40e2      	lsrs	r2, r4
 800040e:	001c      	movs	r4, r3
 8000410:	465b      	mov	r3, fp
 8000412:	0015      	movs	r5, r2
 8000414:	2b00      	cmp	r3, #0
 8000416:	db2a      	blt.n	800046e <__udivmoddi4+0x182>
 8000418:	0026      	movs	r6, r4
 800041a:	409e      	lsls	r6, r3
 800041c:	0033      	movs	r3, r6
 800041e:	0026      	movs	r6, r4
 8000420:	4647      	mov	r7, r8
 8000422:	40be      	lsls	r6, r7
 8000424:	0032      	movs	r2, r6
 8000426:	1a80      	subs	r0, r0, r2
 8000428:	4199      	sbcs	r1, r3
 800042a:	9000      	str	r0, [sp, #0]
 800042c:	9101      	str	r1, [sp, #4]
 800042e:	e79f      	b.n	8000370 <__udivmoddi4+0x84>
 8000430:	42a3      	cmp	r3, r4
 8000432:	d8bc      	bhi.n	80003ae <__udivmoddi4+0xc2>
 8000434:	e783      	b.n	800033e <__udivmoddi4+0x52>
 8000436:	4642      	mov	r2, r8
 8000438:	2320      	movs	r3, #32
 800043a:	2100      	movs	r1, #0
 800043c:	1a9b      	subs	r3, r3, r2
 800043e:	2200      	movs	r2, #0
 8000440:	9100      	str	r1, [sp, #0]
 8000442:	9201      	str	r2, [sp, #4]
 8000444:	2201      	movs	r2, #1
 8000446:	40da      	lsrs	r2, r3
 8000448:	9201      	str	r2, [sp, #4]
 800044a:	e786      	b.n	800035a <__udivmoddi4+0x6e>
 800044c:	4642      	mov	r2, r8
 800044e:	2320      	movs	r3, #32
 8000450:	1a9b      	subs	r3, r3, r2
 8000452:	002a      	movs	r2, r5
 8000454:	4646      	mov	r6, r8
 8000456:	409a      	lsls	r2, r3
 8000458:	0023      	movs	r3, r4
 800045a:	40f3      	lsrs	r3, r6
 800045c:	4644      	mov	r4, r8
 800045e:	4313      	orrs	r3, r2
 8000460:	002a      	movs	r2, r5
 8000462:	40e2      	lsrs	r2, r4
 8000464:	001c      	movs	r4, r3
 8000466:	465b      	mov	r3, fp
 8000468:	0015      	movs	r5, r2
 800046a:	2b00      	cmp	r3, #0
 800046c:	dad4      	bge.n	8000418 <__udivmoddi4+0x12c>
 800046e:	4642      	mov	r2, r8
 8000470:	002f      	movs	r7, r5
 8000472:	2320      	movs	r3, #32
 8000474:	0026      	movs	r6, r4
 8000476:	4097      	lsls	r7, r2
 8000478:	1a9b      	subs	r3, r3, r2
 800047a:	40de      	lsrs	r6, r3
 800047c:	003b      	movs	r3, r7
 800047e:	4333      	orrs	r3, r6
 8000480:	e7cd      	b.n	800041e <__udivmoddi4+0x132>
 8000482:	46c0      	nop			; (mov r8, r8)

08000484 <__aeabi_fdiv>:
 8000484:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000486:	464f      	mov	r7, r9
 8000488:	4646      	mov	r6, r8
 800048a:	46d6      	mov	lr, sl
 800048c:	0245      	lsls	r5, r0, #9
 800048e:	b5c0      	push	{r6, r7, lr}
 8000490:	0047      	lsls	r7, r0, #1
 8000492:	1c0c      	adds	r4, r1, #0
 8000494:	0a6d      	lsrs	r5, r5, #9
 8000496:	0e3f      	lsrs	r7, r7, #24
 8000498:	0fc6      	lsrs	r6, r0, #31
 800049a:	2f00      	cmp	r7, #0
 800049c:	d100      	bne.n	80004a0 <__aeabi_fdiv+0x1c>
 800049e:	e070      	b.n	8000582 <__aeabi_fdiv+0xfe>
 80004a0:	2fff      	cmp	r7, #255	; 0xff
 80004a2:	d100      	bne.n	80004a6 <__aeabi_fdiv+0x22>
 80004a4:	e075      	b.n	8000592 <__aeabi_fdiv+0x10e>
 80004a6:	00eb      	lsls	r3, r5, #3
 80004a8:	2580      	movs	r5, #128	; 0x80
 80004aa:	04ed      	lsls	r5, r5, #19
 80004ac:	431d      	orrs	r5, r3
 80004ae:	2300      	movs	r3, #0
 80004b0:	4699      	mov	r9, r3
 80004b2:	469a      	mov	sl, r3
 80004b4:	3f7f      	subs	r7, #127	; 0x7f
 80004b6:	0260      	lsls	r0, r4, #9
 80004b8:	0a43      	lsrs	r3, r0, #9
 80004ba:	4698      	mov	r8, r3
 80004bc:	0063      	lsls	r3, r4, #1
 80004be:	0e1b      	lsrs	r3, r3, #24
 80004c0:	0fe4      	lsrs	r4, r4, #31
 80004c2:	2b00      	cmp	r3, #0
 80004c4:	d04e      	beq.n	8000564 <__aeabi_fdiv+0xe0>
 80004c6:	2bff      	cmp	r3, #255	; 0xff
 80004c8:	d046      	beq.n	8000558 <__aeabi_fdiv+0xd4>
 80004ca:	4642      	mov	r2, r8
 80004cc:	00d0      	lsls	r0, r2, #3
 80004ce:	2280      	movs	r2, #128	; 0x80
 80004d0:	04d2      	lsls	r2, r2, #19
 80004d2:	4302      	orrs	r2, r0
 80004d4:	4690      	mov	r8, r2
 80004d6:	2200      	movs	r2, #0
 80004d8:	3b7f      	subs	r3, #127	; 0x7f
 80004da:	0031      	movs	r1, r6
 80004dc:	1aff      	subs	r7, r7, r3
 80004de:	464b      	mov	r3, r9
 80004e0:	4061      	eors	r1, r4
 80004e2:	b2c9      	uxtb	r1, r1
 80004e4:	4313      	orrs	r3, r2
 80004e6:	2b0f      	cmp	r3, #15
 80004e8:	d900      	bls.n	80004ec <__aeabi_fdiv+0x68>
 80004ea:	e0b5      	b.n	8000658 <__aeabi_fdiv+0x1d4>
 80004ec:	486e      	ldr	r0, [pc, #440]	; (80006a8 <__aeabi_fdiv+0x224>)
 80004ee:	009b      	lsls	r3, r3, #2
 80004f0:	58c3      	ldr	r3, [r0, r3]
 80004f2:	469f      	mov	pc, r3
 80004f4:	2300      	movs	r3, #0
 80004f6:	4698      	mov	r8, r3
 80004f8:	0026      	movs	r6, r4
 80004fa:	4645      	mov	r5, r8
 80004fc:	4692      	mov	sl, r2
 80004fe:	4653      	mov	r3, sl
 8000500:	2b02      	cmp	r3, #2
 8000502:	d100      	bne.n	8000506 <__aeabi_fdiv+0x82>
 8000504:	e089      	b.n	800061a <__aeabi_fdiv+0x196>
 8000506:	2b03      	cmp	r3, #3
 8000508:	d100      	bne.n	800050c <__aeabi_fdiv+0x88>
 800050a:	e09e      	b.n	800064a <__aeabi_fdiv+0x1c6>
 800050c:	2b01      	cmp	r3, #1
 800050e:	d018      	beq.n	8000542 <__aeabi_fdiv+0xbe>
 8000510:	003b      	movs	r3, r7
 8000512:	337f      	adds	r3, #127	; 0x7f
 8000514:	2b00      	cmp	r3, #0
 8000516:	dd69      	ble.n	80005ec <__aeabi_fdiv+0x168>
 8000518:	076a      	lsls	r2, r5, #29
 800051a:	d004      	beq.n	8000526 <__aeabi_fdiv+0xa2>
 800051c:	220f      	movs	r2, #15
 800051e:	402a      	ands	r2, r5
 8000520:	2a04      	cmp	r2, #4
 8000522:	d000      	beq.n	8000526 <__aeabi_fdiv+0xa2>
 8000524:	3504      	adds	r5, #4
 8000526:	012a      	lsls	r2, r5, #4
 8000528:	d503      	bpl.n	8000532 <__aeabi_fdiv+0xae>
 800052a:	4b60      	ldr	r3, [pc, #384]	; (80006ac <__aeabi_fdiv+0x228>)
 800052c:	401d      	ands	r5, r3
 800052e:	003b      	movs	r3, r7
 8000530:	3380      	adds	r3, #128	; 0x80
 8000532:	2bfe      	cmp	r3, #254	; 0xfe
 8000534:	dd00      	ble.n	8000538 <__aeabi_fdiv+0xb4>
 8000536:	e070      	b.n	800061a <__aeabi_fdiv+0x196>
 8000538:	01ad      	lsls	r5, r5, #6
 800053a:	0a6d      	lsrs	r5, r5, #9
 800053c:	b2d8      	uxtb	r0, r3
 800053e:	e002      	b.n	8000546 <__aeabi_fdiv+0xc2>
 8000540:	000e      	movs	r6, r1
 8000542:	2000      	movs	r0, #0
 8000544:	2500      	movs	r5, #0
 8000546:	05c0      	lsls	r0, r0, #23
 8000548:	4328      	orrs	r0, r5
 800054a:	07f6      	lsls	r6, r6, #31
 800054c:	4330      	orrs	r0, r6
 800054e:	bce0      	pop	{r5, r6, r7}
 8000550:	46ba      	mov	sl, r7
 8000552:	46b1      	mov	r9, r6
 8000554:	46a8      	mov	r8, r5
 8000556:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000558:	4643      	mov	r3, r8
 800055a:	2b00      	cmp	r3, #0
 800055c:	d13f      	bne.n	80005de <__aeabi_fdiv+0x15a>
 800055e:	2202      	movs	r2, #2
 8000560:	3fff      	subs	r7, #255	; 0xff
 8000562:	e003      	b.n	800056c <__aeabi_fdiv+0xe8>
 8000564:	4643      	mov	r3, r8
 8000566:	2b00      	cmp	r3, #0
 8000568:	d12d      	bne.n	80005c6 <__aeabi_fdiv+0x142>
 800056a:	2201      	movs	r2, #1
 800056c:	0031      	movs	r1, r6
 800056e:	464b      	mov	r3, r9
 8000570:	4061      	eors	r1, r4
 8000572:	b2c9      	uxtb	r1, r1
 8000574:	4313      	orrs	r3, r2
 8000576:	2b0f      	cmp	r3, #15
 8000578:	d834      	bhi.n	80005e4 <__aeabi_fdiv+0x160>
 800057a:	484d      	ldr	r0, [pc, #308]	; (80006b0 <__aeabi_fdiv+0x22c>)
 800057c:	009b      	lsls	r3, r3, #2
 800057e:	58c3      	ldr	r3, [r0, r3]
 8000580:	469f      	mov	pc, r3
 8000582:	2d00      	cmp	r5, #0
 8000584:	d113      	bne.n	80005ae <__aeabi_fdiv+0x12a>
 8000586:	2304      	movs	r3, #4
 8000588:	4699      	mov	r9, r3
 800058a:	3b03      	subs	r3, #3
 800058c:	2700      	movs	r7, #0
 800058e:	469a      	mov	sl, r3
 8000590:	e791      	b.n	80004b6 <__aeabi_fdiv+0x32>
 8000592:	2d00      	cmp	r5, #0
 8000594:	d105      	bne.n	80005a2 <__aeabi_fdiv+0x11e>
 8000596:	2308      	movs	r3, #8
 8000598:	4699      	mov	r9, r3
 800059a:	3b06      	subs	r3, #6
 800059c:	27ff      	movs	r7, #255	; 0xff
 800059e:	469a      	mov	sl, r3
 80005a0:	e789      	b.n	80004b6 <__aeabi_fdiv+0x32>
 80005a2:	230c      	movs	r3, #12
 80005a4:	4699      	mov	r9, r3
 80005a6:	3b09      	subs	r3, #9
 80005a8:	27ff      	movs	r7, #255	; 0xff
 80005aa:	469a      	mov	sl, r3
 80005ac:	e783      	b.n	80004b6 <__aeabi_fdiv+0x32>
 80005ae:	0028      	movs	r0, r5
 80005b0:	f000 fbf0 	bl	8000d94 <__clzsi2>
 80005b4:	2776      	movs	r7, #118	; 0x76
 80005b6:	1f43      	subs	r3, r0, #5
 80005b8:	409d      	lsls	r5, r3
 80005ba:	2300      	movs	r3, #0
 80005bc:	427f      	negs	r7, r7
 80005be:	4699      	mov	r9, r3
 80005c0:	469a      	mov	sl, r3
 80005c2:	1a3f      	subs	r7, r7, r0
 80005c4:	e777      	b.n	80004b6 <__aeabi_fdiv+0x32>
 80005c6:	4640      	mov	r0, r8
 80005c8:	f000 fbe4 	bl	8000d94 <__clzsi2>
 80005cc:	4642      	mov	r2, r8
 80005ce:	1f43      	subs	r3, r0, #5
 80005d0:	409a      	lsls	r2, r3
 80005d2:	2376      	movs	r3, #118	; 0x76
 80005d4:	425b      	negs	r3, r3
 80005d6:	4690      	mov	r8, r2
 80005d8:	1a1b      	subs	r3, r3, r0
 80005da:	2200      	movs	r2, #0
 80005dc:	e77d      	b.n	80004da <__aeabi_fdiv+0x56>
 80005de:	23ff      	movs	r3, #255	; 0xff
 80005e0:	2203      	movs	r2, #3
 80005e2:	e77a      	b.n	80004da <__aeabi_fdiv+0x56>
 80005e4:	000e      	movs	r6, r1
 80005e6:	20ff      	movs	r0, #255	; 0xff
 80005e8:	2500      	movs	r5, #0
 80005ea:	e7ac      	b.n	8000546 <__aeabi_fdiv+0xc2>
 80005ec:	2001      	movs	r0, #1
 80005ee:	1ac0      	subs	r0, r0, r3
 80005f0:	281b      	cmp	r0, #27
 80005f2:	dca6      	bgt.n	8000542 <__aeabi_fdiv+0xbe>
 80005f4:	379e      	adds	r7, #158	; 0x9e
 80005f6:	002a      	movs	r2, r5
 80005f8:	40bd      	lsls	r5, r7
 80005fa:	40c2      	lsrs	r2, r0
 80005fc:	1e6b      	subs	r3, r5, #1
 80005fe:	419d      	sbcs	r5, r3
 8000600:	4315      	orrs	r5, r2
 8000602:	076b      	lsls	r3, r5, #29
 8000604:	d004      	beq.n	8000610 <__aeabi_fdiv+0x18c>
 8000606:	230f      	movs	r3, #15
 8000608:	402b      	ands	r3, r5
 800060a:	2b04      	cmp	r3, #4
 800060c:	d000      	beq.n	8000610 <__aeabi_fdiv+0x18c>
 800060e:	3504      	adds	r5, #4
 8000610:	016b      	lsls	r3, r5, #5
 8000612:	d544      	bpl.n	800069e <__aeabi_fdiv+0x21a>
 8000614:	2001      	movs	r0, #1
 8000616:	2500      	movs	r5, #0
 8000618:	e795      	b.n	8000546 <__aeabi_fdiv+0xc2>
 800061a:	20ff      	movs	r0, #255	; 0xff
 800061c:	2500      	movs	r5, #0
 800061e:	e792      	b.n	8000546 <__aeabi_fdiv+0xc2>
 8000620:	2580      	movs	r5, #128	; 0x80
 8000622:	2600      	movs	r6, #0
 8000624:	20ff      	movs	r0, #255	; 0xff
 8000626:	03ed      	lsls	r5, r5, #15
 8000628:	e78d      	b.n	8000546 <__aeabi_fdiv+0xc2>
 800062a:	2300      	movs	r3, #0
 800062c:	4698      	mov	r8, r3
 800062e:	2080      	movs	r0, #128	; 0x80
 8000630:	03c0      	lsls	r0, r0, #15
 8000632:	4205      	tst	r5, r0
 8000634:	d009      	beq.n	800064a <__aeabi_fdiv+0x1c6>
 8000636:	4643      	mov	r3, r8
 8000638:	4203      	tst	r3, r0
 800063a:	d106      	bne.n	800064a <__aeabi_fdiv+0x1c6>
 800063c:	4645      	mov	r5, r8
 800063e:	4305      	orrs	r5, r0
 8000640:	026d      	lsls	r5, r5, #9
 8000642:	0026      	movs	r6, r4
 8000644:	20ff      	movs	r0, #255	; 0xff
 8000646:	0a6d      	lsrs	r5, r5, #9
 8000648:	e77d      	b.n	8000546 <__aeabi_fdiv+0xc2>
 800064a:	2080      	movs	r0, #128	; 0x80
 800064c:	03c0      	lsls	r0, r0, #15
 800064e:	4305      	orrs	r5, r0
 8000650:	026d      	lsls	r5, r5, #9
 8000652:	20ff      	movs	r0, #255	; 0xff
 8000654:	0a6d      	lsrs	r5, r5, #9
 8000656:	e776      	b.n	8000546 <__aeabi_fdiv+0xc2>
 8000658:	4642      	mov	r2, r8
 800065a:	016b      	lsls	r3, r5, #5
 800065c:	0150      	lsls	r0, r2, #5
 800065e:	4283      	cmp	r3, r0
 8000660:	d219      	bcs.n	8000696 <__aeabi_fdiv+0x212>
 8000662:	221b      	movs	r2, #27
 8000664:	2500      	movs	r5, #0
 8000666:	3f01      	subs	r7, #1
 8000668:	2601      	movs	r6, #1
 800066a:	001c      	movs	r4, r3
 800066c:	006d      	lsls	r5, r5, #1
 800066e:	005b      	lsls	r3, r3, #1
 8000670:	2c00      	cmp	r4, #0
 8000672:	db01      	blt.n	8000678 <__aeabi_fdiv+0x1f4>
 8000674:	4298      	cmp	r0, r3
 8000676:	d801      	bhi.n	800067c <__aeabi_fdiv+0x1f8>
 8000678:	1a1b      	subs	r3, r3, r0
 800067a:	4335      	orrs	r5, r6
 800067c:	3a01      	subs	r2, #1
 800067e:	2a00      	cmp	r2, #0
 8000680:	d1f3      	bne.n	800066a <__aeabi_fdiv+0x1e6>
 8000682:	1e5a      	subs	r2, r3, #1
 8000684:	4193      	sbcs	r3, r2
 8000686:	431d      	orrs	r5, r3
 8000688:	003b      	movs	r3, r7
 800068a:	337f      	adds	r3, #127	; 0x7f
 800068c:	000e      	movs	r6, r1
 800068e:	2b00      	cmp	r3, #0
 8000690:	dd00      	ble.n	8000694 <__aeabi_fdiv+0x210>
 8000692:	e741      	b.n	8000518 <__aeabi_fdiv+0x94>
 8000694:	e7aa      	b.n	80005ec <__aeabi_fdiv+0x168>
 8000696:	221a      	movs	r2, #26
 8000698:	2501      	movs	r5, #1
 800069a:	1a1b      	subs	r3, r3, r0
 800069c:	e7e4      	b.n	8000668 <__aeabi_fdiv+0x1e4>
 800069e:	01ad      	lsls	r5, r5, #6
 80006a0:	2000      	movs	r0, #0
 80006a2:	0a6d      	lsrs	r5, r5, #9
 80006a4:	e74f      	b.n	8000546 <__aeabi_fdiv+0xc2>
 80006a6:	46c0      	nop			; (mov r8, r8)
 80006a8:	08002d9c 	.word	0x08002d9c
 80006ac:	f7ffffff 	.word	0xf7ffffff
 80006b0:	08002ddc 	.word	0x08002ddc

080006b4 <__aeabi_fmul>:
 80006b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006b6:	464f      	mov	r7, r9
 80006b8:	4646      	mov	r6, r8
 80006ba:	46d6      	mov	lr, sl
 80006bc:	0244      	lsls	r4, r0, #9
 80006be:	0045      	lsls	r5, r0, #1
 80006c0:	b5c0      	push	{r6, r7, lr}
 80006c2:	0a64      	lsrs	r4, r4, #9
 80006c4:	1c0f      	adds	r7, r1, #0
 80006c6:	0e2d      	lsrs	r5, r5, #24
 80006c8:	0fc6      	lsrs	r6, r0, #31
 80006ca:	2d00      	cmp	r5, #0
 80006cc:	d100      	bne.n	80006d0 <__aeabi_fmul+0x1c>
 80006ce:	e08d      	b.n	80007ec <__aeabi_fmul+0x138>
 80006d0:	2dff      	cmp	r5, #255	; 0xff
 80006d2:	d100      	bne.n	80006d6 <__aeabi_fmul+0x22>
 80006d4:	e092      	b.n	80007fc <__aeabi_fmul+0x148>
 80006d6:	2300      	movs	r3, #0
 80006d8:	2080      	movs	r0, #128	; 0x80
 80006da:	4699      	mov	r9, r3
 80006dc:	469a      	mov	sl, r3
 80006de:	00e4      	lsls	r4, r4, #3
 80006e0:	04c0      	lsls	r0, r0, #19
 80006e2:	4304      	orrs	r4, r0
 80006e4:	3d7f      	subs	r5, #127	; 0x7f
 80006e6:	0278      	lsls	r0, r7, #9
 80006e8:	0a43      	lsrs	r3, r0, #9
 80006ea:	4698      	mov	r8, r3
 80006ec:	007b      	lsls	r3, r7, #1
 80006ee:	0e1b      	lsrs	r3, r3, #24
 80006f0:	0fff      	lsrs	r7, r7, #31
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d100      	bne.n	80006f8 <__aeabi_fmul+0x44>
 80006f6:	e070      	b.n	80007da <__aeabi_fmul+0x126>
 80006f8:	2bff      	cmp	r3, #255	; 0xff
 80006fa:	d100      	bne.n	80006fe <__aeabi_fmul+0x4a>
 80006fc:	e086      	b.n	800080c <__aeabi_fmul+0x158>
 80006fe:	4642      	mov	r2, r8
 8000700:	00d0      	lsls	r0, r2, #3
 8000702:	2280      	movs	r2, #128	; 0x80
 8000704:	3b7f      	subs	r3, #127	; 0x7f
 8000706:	18ed      	adds	r5, r5, r3
 8000708:	2300      	movs	r3, #0
 800070a:	04d2      	lsls	r2, r2, #19
 800070c:	4302      	orrs	r2, r0
 800070e:	4690      	mov	r8, r2
 8000710:	469c      	mov	ip, r3
 8000712:	0031      	movs	r1, r6
 8000714:	464b      	mov	r3, r9
 8000716:	4079      	eors	r1, r7
 8000718:	1c68      	adds	r0, r5, #1
 800071a:	2b0f      	cmp	r3, #15
 800071c:	d81c      	bhi.n	8000758 <__aeabi_fmul+0xa4>
 800071e:	4a76      	ldr	r2, [pc, #472]	; (80008f8 <__aeabi_fmul+0x244>)
 8000720:	009b      	lsls	r3, r3, #2
 8000722:	58d3      	ldr	r3, [r2, r3]
 8000724:	469f      	mov	pc, r3
 8000726:	0039      	movs	r1, r7
 8000728:	4644      	mov	r4, r8
 800072a:	46e2      	mov	sl, ip
 800072c:	4653      	mov	r3, sl
 800072e:	2b02      	cmp	r3, #2
 8000730:	d00f      	beq.n	8000752 <__aeabi_fmul+0x9e>
 8000732:	2b03      	cmp	r3, #3
 8000734:	d100      	bne.n	8000738 <__aeabi_fmul+0x84>
 8000736:	e0d7      	b.n	80008e8 <__aeabi_fmul+0x234>
 8000738:	2b01      	cmp	r3, #1
 800073a:	d137      	bne.n	80007ac <__aeabi_fmul+0xf8>
 800073c:	2000      	movs	r0, #0
 800073e:	2400      	movs	r4, #0
 8000740:	05c0      	lsls	r0, r0, #23
 8000742:	4320      	orrs	r0, r4
 8000744:	07c9      	lsls	r1, r1, #31
 8000746:	4308      	orrs	r0, r1
 8000748:	bce0      	pop	{r5, r6, r7}
 800074a:	46ba      	mov	sl, r7
 800074c:	46b1      	mov	r9, r6
 800074e:	46a8      	mov	r8, r5
 8000750:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000752:	20ff      	movs	r0, #255	; 0xff
 8000754:	2400      	movs	r4, #0
 8000756:	e7f3      	b.n	8000740 <__aeabi_fmul+0x8c>
 8000758:	0c26      	lsrs	r6, r4, #16
 800075a:	0424      	lsls	r4, r4, #16
 800075c:	0c22      	lsrs	r2, r4, #16
 800075e:	4644      	mov	r4, r8
 8000760:	0424      	lsls	r4, r4, #16
 8000762:	0c24      	lsrs	r4, r4, #16
 8000764:	4643      	mov	r3, r8
 8000766:	0027      	movs	r7, r4
 8000768:	0c1b      	lsrs	r3, r3, #16
 800076a:	4357      	muls	r7, r2
 800076c:	4374      	muls	r4, r6
 800076e:	435a      	muls	r2, r3
 8000770:	435e      	muls	r6, r3
 8000772:	1912      	adds	r2, r2, r4
 8000774:	0c3b      	lsrs	r3, r7, #16
 8000776:	189b      	adds	r3, r3, r2
 8000778:	429c      	cmp	r4, r3
 800077a:	d903      	bls.n	8000784 <__aeabi_fmul+0xd0>
 800077c:	2280      	movs	r2, #128	; 0x80
 800077e:	0252      	lsls	r2, r2, #9
 8000780:	4694      	mov	ip, r2
 8000782:	4466      	add	r6, ip
 8000784:	043f      	lsls	r7, r7, #16
 8000786:	041a      	lsls	r2, r3, #16
 8000788:	0c3f      	lsrs	r7, r7, #16
 800078a:	19d2      	adds	r2, r2, r7
 800078c:	0194      	lsls	r4, r2, #6
 800078e:	1e67      	subs	r7, r4, #1
 8000790:	41bc      	sbcs	r4, r7
 8000792:	0c1b      	lsrs	r3, r3, #16
 8000794:	0e92      	lsrs	r2, r2, #26
 8000796:	199b      	adds	r3, r3, r6
 8000798:	4314      	orrs	r4, r2
 800079a:	019b      	lsls	r3, r3, #6
 800079c:	431c      	orrs	r4, r3
 800079e:	011b      	lsls	r3, r3, #4
 80007a0:	d400      	bmi.n	80007a4 <__aeabi_fmul+0xf0>
 80007a2:	e09b      	b.n	80008dc <__aeabi_fmul+0x228>
 80007a4:	2301      	movs	r3, #1
 80007a6:	0862      	lsrs	r2, r4, #1
 80007a8:	401c      	ands	r4, r3
 80007aa:	4314      	orrs	r4, r2
 80007ac:	0002      	movs	r2, r0
 80007ae:	327f      	adds	r2, #127	; 0x7f
 80007b0:	2a00      	cmp	r2, #0
 80007b2:	dd64      	ble.n	800087e <__aeabi_fmul+0x1ca>
 80007b4:	0763      	lsls	r3, r4, #29
 80007b6:	d004      	beq.n	80007c2 <__aeabi_fmul+0x10e>
 80007b8:	230f      	movs	r3, #15
 80007ba:	4023      	ands	r3, r4
 80007bc:	2b04      	cmp	r3, #4
 80007be:	d000      	beq.n	80007c2 <__aeabi_fmul+0x10e>
 80007c0:	3404      	adds	r4, #4
 80007c2:	0123      	lsls	r3, r4, #4
 80007c4:	d503      	bpl.n	80007ce <__aeabi_fmul+0x11a>
 80007c6:	0002      	movs	r2, r0
 80007c8:	4b4c      	ldr	r3, [pc, #304]	; (80008fc <__aeabi_fmul+0x248>)
 80007ca:	3280      	adds	r2, #128	; 0x80
 80007cc:	401c      	ands	r4, r3
 80007ce:	2afe      	cmp	r2, #254	; 0xfe
 80007d0:	dcbf      	bgt.n	8000752 <__aeabi_fmul+0x9e>
 80007d2:	01a4      	lsls	r4, r4, #6
 80007d4:	0a64      	lsrs	r4, r4, #9
 80007d6:	b2d0      	uxtb	r0, r2
 80007d8:	e7b2      	b.n	8000740 <__aeabi_fmul+0x8c>
 80007da:	4643      	mov	r3, r8
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d13d      	bne.n	800085c <__aeabi_fmul+0x1a8>
 80007e0:	464a      	mov	r2, r9
 80007e2:	3301      	adds	r3, #1
 80007e4:	431a      	orrs	r2, r3
 80007e6:	4691      	mov	r9, r2
 80007e8:	469c      	mov	ip, r3
 80007ea:	e792      	b.n	8000712 <__aeabi_fmul+0x5e>
 80007ec:	2c00      	cmp	r4, #0
 80007ee:	d129      	bne.n	8000844 <__aeabi_fmul+0x190>
 80007f0:	2304      	movs	r3, #4
 80007f2:	4699      	mov	r9, r3
 80007f4:	3b03      	subs	r3, #3
 80007f6:	2500      	movs	r5, #0
 80007f8:	469a      	mov	sl, r3
 80007fa:	e774      	b.n	80006e6 <__aeabi_fmul+0x32>
 80007fc:	2c00      	cmp	r4, #0
 80007fe:	d11b      	bne.n	8000838 <__aeabi_fmul+0x184>
 8000800:	2308      	movs	r3, #8
 8000802:	4699      	mov	r9, r3
 8000804:	3b06      	subs	r3, #6
 8000806:	25ff      	movs	r5, #255	; 0xff
 8000808:	469a      	mov	sl, r3
 800080a:	e76c      	b.n	80006e6 <__aeabi_fmul+0x32>
 800080c:	4643      	mov	r3, r8
 800080e:	35ff      	adds	r5, #255	; 0xff
 8000810:	2b00      	cmp	r3, #0
 8000812:	d10b      	bne.n	800082c <__aeabi_fmul+0x178>
 8000814:	2302      	movs	r3, #2
 8000816:	464a      	mov	r2, r9
 8000818:	431a      	orrs	r2, r3
 800081a:	4691      	mov	r9, r2
 800081c:	469c      	mov	ip, r3
 800081e:	e778      	b.n	8000712 <__aeabi_fmul+0x5e>
 8000820:	4653      	mov	r3, sl
 8000822:	0031      	movs	r1, r6
 8000824:	2b02      	cmp	r3, #2
 8000826:	d000      	beq.n	800082a <__aeabi_fmul+0x176>
 8000828:	e783      	b.n	8000732 <__aeabi_fmul+0x7e>
 800082a:	e792      	b.n	8000752 <__aeabi_fmul+0x9e>
 800082c:	2303      	movs	r3, #3
 800082e:	464a      	mov	r2, r9
 8000830:	431a      	orrs	r2, r3
 8000832:	4691      	mov	r9, r2
 8000834:	469c      	mov	ip, r3
 8000836:	e76c      	b.n	8000712 <__aeabi_fmul+0x5e>
 8000838:	230c      	movs	r3, #12
 800083a:	4699      	mov	r9, r3
 800083c:	3b09      	subs	r3, #9
 800083e:	25ff      	movs	r5, #255	; 0xff
 8000840:	469a      	mov	sl, r3
 8000842:	e750      	b.n	80006e6 <__aeabi_fmul+0x32>
 8000844:	0020      	movs	r0, r4
 8000846:	f000 faa5 	bl	8000d94 <__clzsi2>
 800084a:	2576      	movs	r5, #118	; 0x76
 800084c:	1f43      	subs	r3, r0, #5
 800084e:	409c      	lsls	r4, r3
 8000850:	2300      	movs	r3, #0
 8000852:	426d      	negs	r5, r5
 8000854:	4699      	mov	r9, r3
 8000856:	469a      	mov	sl, r3
 8000858:	1a2d      	subs	r5, r5, r0
 800085a:	e744      	b.n	80006e6 <__aeabi_fmul+0x32>
 800085c:	4640      	mov	r0, r8
 800085e:	f000 fa99 	bl	8000d94 <__clzsi2>
 8000862:	4642      	mov	r2, r8
 8000864:	1f43      	subs	r3, r0, #5
 8000866:	409a      	lsls	r2, r3
 8000868:	2300      	movs	r3, #0
 800086a:	1a2d      	subs	r5, r5, r0
 800086c:	4690      	mov	r8, r2
 800086e:	469c      	mov	ip, r3
 8000870:	3d76      	subs	r5, #118	; 0x76
 8000872:	e74e      	b.n	8000712 <__aeabi_fmul+0x5e>
 8000874:	2480      	movs	r4, #128	; 0x80
 8000876:	2100      	movs	r1, #0
 8000878:	20ff      	movs	r0, #255	; 0xff
 800087a:	03e4      	lsls	r4, r4, #15
 800087c:	e760      	b.n	8000740 <__aeabi_fmul+0x8c>
 800087e:	2301      	movs	r3, #1
 8000880:	1a9b      	subs	r3, r3, r2
 8000882:	2b1b      	cmp	r3, #27
 8000884:	dd00      	ble.n	8000888 <__aeabi_fmul+0x1d4>
 8000886:	e759      	b.n	800073c <__aeabi_fmul+0x88>
 8000888:	0022      	movs	r2, r4
 800088a:	309e      	adds	r0, #158	; 0x9e
 800088c:	40da      	lsrs	r2, r3
 800088e:	4084      	lsls	r4, r0
 8000890:	0013      	movs	r3, r2
 8000892:	1e62      	subs	r2, r4, #1
 8000894:	4194      	sbcs	r4, r2
 8000896:	431c      	orrs	r4, r3
 8000898:	0763      	lsls	r3, r4, #29
 800089a:	d004      	beq.n	80008a6 <__aeabi_fmul+0x1f2>
 800089c:	230f      	movs	r3, #15
 800089e:	4023      	ands	r3, r4
 80008a0:	2b04      	cmp	r3, #4
 80008a2:	d000      	beq.n	80008a6 <__aeabi_fmul+0x1f2>
 80008a4:	3404      	adds	r4, #4
 80008a6:	0163      	lsls	r3, r4, #5
 80008a8:	d51a      	bpl.n	80008e0 <__aeabi_fmul+0x22c>
 80008aa:	2001      	movs	r0, #1
 80008ac:	2400      	movs	r4, #0
 80008ae:	e747      	b.n	8000740 <__aeabi_fmul+0x8c>
 80008b0:	2080      	movs	r0, #128	; 0x80
 80008b2:	03c0      	lsls	r0, r0, #15
 80008b4:	4204      	tst	r4, r0
 80008b6:	d009      	beq.n	80008cc <__aeabi_fmul+0x218>
 80008b8:	4643      	mov	r3, r8
 80008ba:	4203      	tst	r3, r0
 80008bc:	d106      	bne.n	80008cc <__aeabi_fmul+0x218>
 80008be:	4644      	mov	r4, r8
 80008c0:	4304      	orrs	r4, r0
 80008c2:	0264      	lsls	r4, r4, #9
 80008c4:	0039      	movs	r1, r7
 80008c6:	20ff      	movs	r0, #255	; 0xff
 80008c8:	0a64      	lsrs	r4, r4, #9
 80008ca:	e739      	b.n	8000740 <__aeabi_fmul+0x8c>
 80008cc:	2080      	movs	r0, #128	; 0x80
 80008ce:	03c0      	lsls	r0, r0, #15
 80008d0:	4304      	orrs	r4, r0
 80008d2:	0264      	lsls	r4, r4, #9
 80008d4:	0031      	movs	r1, r6
 80008d6:	20ff      	movs	r0, #255	; 0xff
 80008d8:	0a64      	lsrs	r4, r4, #9
 80008da:	e731      	b.n	8000740 <__aeabi_fmul+0x8c>
 80008dc:	0028      	movs	r0, r5
 80008de:	e765      	b.n	80007ac <__aeabi_fmul+0xf8>
 80008e0:	01a4      	lsls	r4, r4, #6
 80008e2:	2000      	movs	r0, #0
 80008e4:	0a64      	lsrs	r4, r4, #9
 80008e6:	e72b      	b.n	8000740 <__aeabi_fmul+0x8c>
 80008e8:	2080      	movs	r0, #128	; 0x80
 80008ea:	03c0      	lsls	r0, r0, #15
 80008ec:	4304      	orrs	r4, r0
 80008ee:	0264      	lsls	r4, r4, #9
 80008f0:	20ff      	movs	r0, #255	; 0xff
 80008f2:	0a64      	lsrs	r4, r4, #9
 80008f4:	e724      	b.n	8000740 <__aeabi_fmul+0x8c>
 80008f6:	46c0      	nop			; (mov r8, r8)
 80008f8:	08002e1c 	.word	0x08002e1c
 80008fc:	f7ffffff 	.word	0xf7ffffff

08000900 <__aeabi_fsub>:
 8000900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000902:	46ce      	mov	lr, r9
 8000904:	4647      	mov	r7, r8
 8000906:	0243      	lsls	r3, r0, #9
 8000908:	0a5b      	lsrs	r3, r3, #9
 800090a:	024e      	lsls	r6, r1, #9
 800090c:	00da      	lsls	r2, r3, #3
 800090e:	4694      	mov	ip, r2
 8000910:	0a72      	lsrs	r2, r6, #9
 8000912:	4691      	mov	r9, r2
 8000914:	0045      	lsls	r5, r0, #1
 8000916:	004a      	lsls	r2, r1, #1
 8000918:	b580      	push	{r7, lr}
 800091a:	0e2d      	lsrs	r5, r5, #24
 800091c:	001f      	movs	r7, r3
 800091e:	0fc4      	lsrs	r4, r0, #31
 8000920:	0e12      	lsrs	r2, r2, #24
 8000922:	0fc9      	lsrs	r1, r1, #31
 8000924:	09b6      	lsrs	r6, r6, #6
 8000926:	2aff      	cmp	r2, #255	; 0xff
 8000928:	d05b      	beq.n	80009e2 <__aeabi_fsub+0xe2>
 800092a:	2001      	movs	r0, #1
 800092c:	4041      	eors	r1, r0
 800092e:	428c      	cmp	r4, r1
 8000930:	d039      	beq.n	80009a6 <__aeabi_fsub+0xa6>
 8000932:	1aa8      	subs	r0, r5, r2
 8000934:	2800      	cmp	r0, #0
 8000936:	dd5a      	ble.n	80009ee <__aeabi_fsub+0xee>
 8000938:	2a00      	cmp	r2, #0
 800093a:	d06a      	beq.n	8000a12 <__aeabi_fsub+0x112>
 800093c:	2dff      	cmp	r5, #255	; 0xff
 800093e:	d100      	bne.n	8000942 <__aeabi_fsub+0x42>
 8000940:	e0d9      	b.n	8000af6 <__aeabi_fsub+0x1f6>
 8000942:	2280      	movs	r2, #128	; 0x80
 8000944:	04d2      	lsls	r2, r2, #19
 8000946:	4316      	orrs	r6, r2
 8000948:	281b      	cmp	r0, #27
 800094a:	dc00      	bgt.n	800094e <__aeabi_fsub+0x4e>
 800094c:	e0e9      	b.n	8000b22 <__aeabi_fsub+0x222>
 800094e:	2001      	movs	r0, #1
 8000950:	4663      	mov	r3, ip
 8000952:	1a18      	subs	r0, r3, r0
 8000954:	0143      	lsls	r3, r0, #5
 8000956:	d400      	bmi.n	800095a <__aeabi_fsub+0x5a>
 8000958:	e0b4      	b.n	8000ac4 <__aeabi_fsub+0x1c4>
 800095a:	0180      	lsls	r0, r0, #6
 800095c:	0987      	lsrs	r7, r0, #6
 800095e:	0038      	movs	r0, r7
 8000960:	f000 fa18 	bl	8000d94 <__clzsi2>
 8000964:	3805      	subs	r0, #5
 8000966:	4087      	lsls	r7, r0
 8000968:	4285      	cmp	r5, r0
 800096a:	dc00      	bgt.n	800096e <__aeabi_fsub+0x6e>
 800096c:	e0cc      	b.n	8000b08 <__aeabi_fsub+0x208>
 800096e:	1a2d      	subs	r5, r5, r0
 8000970:	48b5      	ldr	r0, [pc, #724]	; (8000c48 <__aeabi_fsub+0x348>)
 8000972:	4038      	ands	r0, r7
 8000974:	0743      	lsls	r3, r0, #29
 8000976:	d004      	beq.n	8000982 <__aeabi_fsub+0x82>
 8000978:	230f      	movs	r3, #15
 800097a:	4003      	ands	r3, r0
 800097c:	2b04      	cmp	r3, #4
 800097e:	d000      	beq.n	8000982 <__aeabi_fsub+0x82>
 8000980:	3004      	adds	r0, #4
 8000982:	0143      	lsls	r3, r0, #5
 8000984:	d400      	bmi.n	8000988 <__aeabi_fsub+0x88>
 8000986:	e0a0      	b.n	8000aca <__aeabi_fsub+0x1ca>
 8000988:	1c6a      	adds	r2, r5, #1
 800098a:	2dfe      	cmp	r5, #254	; 0xfe
 800098c:	d100      	bne.n	8000990 <__aeabi_fsub+0x90>
 800098e:	e08d      	b.n	8000aac <__aeabi_fsub+0x1ac>
 8000990:	0180      	lsls	r0, r0, #6
 8000992:	0a47      	lsrs	r7, r0, #9
 8000994:	b2d2      	uxtb	r2, r2
 8000996:	05d0      	lsls	r0, r2, #23
 8000998:	4338      	orrs	r0, r7
 800099a:	07e4      	lsls	r4, r4, #31
 800099c:	4320      	orrs	r0, r4
 800099e:	bcc0      	pop	{r6, r7}
 80009a0:	46b9      	mov	r9, r7
 80009a2:	46b0      	mov	r8, r6
 80009a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80009a6:	1aa8      	subs	r0, r5, r2
 80009a8:	4680      	mov	r8, r0
 80009aa:	2800      	cmp	r0, #0
 80009ac:	dd45      	ble.n	8000a3a <__aeabi_fsub+0x13a>
 80009ae:	2a00      	cmp	r2, #0
 80009b0:	d070      	beq.n	8000a94 <__aeabi_fsub+0x194>
 80009b2:	2dff      	cmp	r5, #255	; 0xff
 80009b4:	d100      	bne.n	80009b8 <__aeabi_fsub+0xb8>
 80009b6:	e09e      	b.n	8000af6 <__aeabi_fsub+0x1f6>
 80009b8:	2380      	movs	r3, #128	; 0x80
 80009ba:	04db      	lsls	r3, r3, #19
 80009bc:	431e      	orrs	r6, r3
 80009be:	4643      	mov	r3, r8
 80009c0:	2b1b      	cmp	r3, #27
 80009c2:	dc00      	bgt.n	80009c6 <__aeabi_fsub+0xc6>
 80009c4:	e0d2      	b.n	8000b6c <__aeabi_fsub+0x26c>
 80009c6:	2001      	movs	r0, #1
 80009c8:	4460      	add	r0, ip
 80009ca:	0143      	lsls	r3, r0, #5
 80009cc:	d57a      	bpl.n	8000ac4 <__aeabi_fsub+0x1c4>
 80009ce:	3501      	adds	r5, #1
 80009d0:	2dff      	cmp	r5, #255	; 0xff
 80009d2:	d06b      	beq.n	8000aac <__aeabi_fsub+0x1ac>
 80009d4:	2301      	movs	r3, #1
 80009d6:	4a9d      	ldr	r2, [pc, #628]	; (8000c4c <__aeabi_fsub+0x34c>)
 80009d8:	4003      	ands	r3, r0
 80009da:	0840      	lsrs	r0, r0, #1
 80009dc:	4010      	ands	r0, r2
 80009de:	4318      	orrs	r0, r3
 80009e0:	e7c8      	b.n	8000974 <__aeabi_fsub+0x74>
 80009e2:	2e00      	cmp	r6, #0
 80009e4:	d020      	beq.n	8000a28 <__aeabi_fsub+0x128>
 80009e6:	428c      	cmp	r4, r1
 80009e8:	d023      	beq.n	8000a32 <__aeabi_fsub+0x132>
 80009ea:	0028      	movs	r0, r5
 80009ec:	38ff      	subs	r0, #255	; 0xff
 80009ee:	2800      	cmp	r0, #0
 80009f0:	d039      	beq.n	8000a66 <__aeabi_fsub+0x166>
 80009f2:	1b57      	subs	r7, r2, r5
 80009f4:	2d00      	cmp	r5, #0
 80009f6:	d000      	beq.n	80009fa <__aeabi_fsub+0xfa>
 80009f8:	e09d      	b.n	8000b36 <__aeabi_fsub+0x236>
 80009fa:	4663      	mov	r3, ip
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d100      	bne.n	8000a02 <__aeabi_fsub+0x102>
 8000a00:	e0db      	b.n	8000bba <__aeabi_fsub+0x2ba>
 8000a02:	1e7b      	subs	r3, r7, #1
 8000a04:	2f01      	cmp	r7, #1
 8000a06:	d100      	bne.n	8000a0a <__aeabi_fsub+0x10a>
 8000a08:	e10d      	b.n	8000c26 <__aeabi_fsub+0x326>
 8000a0a:	2fff      	cmp	r7, #255	; 0xff
 8000a0c:	d071      	beq.n	8000af2 <__aeabi_fsub+0x1f2>
 8000a0e:	001f      	movs	r7, r3
 8000a10:	e098      	b.n	8000b44 <__aeabi_fsub+0x244>
 8000a12:	2e00      	cmp	r6, #0
 8000a14:	d100      	bne.n	8000a18 <__aeabi_fsub+0x118>
 8000a16:	e0a7      	b.n	8000b68 <__aeabi_fsub+0x268>
 8000a18:	1e42      	subs	r2, r0, #1
 8000a1a:	2801      	cmp	r0, #1
 8000a1c:	d100      	bne.n	8000a20 <__aeabi_fsub+0x120>
 8000a1e:	e0e6      	b.n	8000bee <__aeabi_fsub+0x2ee>
 8000a20:	28ff      	cmp	r0, #255	; 0xff
 8000a22:	d068      	beq.n	8000af6 <__aeabi_fsub+0x1f6>
 8000a24:	0010      	movs	r0, r2
 8000a26:	e78f      	b.n	8000948 <__aeabi_fsub+0x48>
 8000a28:	2001      	movs	r0, #1
 8000a2a:	4041      	eors	r1, r0
 8000a2c:	42a1      	cmp	r1, r4
 8000a2e:	d000      	beq.n	8000a32 <__aeabi_fsub+0x132>
 8000a30:	e77f      	b.n	8000932 <__aeabi_fsub+0x32>
 8000a32:	20ff      	movs	r0, #255	; 0xff
 8000a34:	4240      	negs	r0, r0
 8000a36:	4680      	mov	r8, r0
 8000a38:	44a8      	add	r8, r5
 8000a3a:	4640      	mov	r0, r8
 8000a3c:	2800      	cmp	r0, #0
 8000a3e:	d038      	beq.n	8000ab2 <__aeabi_fsub+0x1b2>
 8000a40:	1b51      	subs	r1, r2, r5
 8000a42:	2d00      	cmp	r5, #0
 8000a44:	d100      	bne.n	8000a48 <__aeabi_fsub+0x148>
 8000a46:	e0ae      	b.n	8000ba6 <__aeabi_fsub+0x2a6>
 8000a48:	2aff      	cmp	r2, #255	; 0xff
 8000a4a:	d100      	bne.n	8000a4e <__aeabi_fsub+0x14e>
 8000a4c:	e0df      	b.n	8000c0e <__aeabi_fsub+0x30e>
 8000a4e:	2380      	movs	r3, #128	; 0x80
 8000a50:	4660      	mov	r0, ip
 8000a52:	04db      	lsls	r3, r3, #19
 8000a54:	4318      	orrs	r0, r3
 8000a56:	4684      	mov	ip, r0
 8000a58:	291b      	cmp	r1, #27
 8000a5a:	dc00      	bgt.n	8000a5e <__aeabi_fsub+0x15e>
 8000a5c:	e0d9      	b.n	8000c12 <__aeabi_fsub+0x312>
 8000a5e:	2001      	movs	r0, #1
 8000a60:	0015      	movs	r5, r2
 8000a62:	1980      	adds	r0, r0, r6
 8000a64:	e7b1      	b.n	80009ca <__aeabi_fsub+0xca>
 8000a66:	20fe      	movs	r0, #254	; 0xfe
 8000a68:	1c6a      	adds	r2, r5, #1
 8000a6a:	4210      	tst	r0, r2
 8000a6c:	d171      	bne.n	8000b52 <__aeabi_fsub+0x252>
 8000a6e:	2d00      	cmp	r5, #0
 8000a70:	d000      	beq.n	8000a74 <__aeabi_fsub+0x174>
 8000a72:	e0a6      	b.n	8000bc2 <__aeabi_fsub+0x2c2>
 8000a74:	4663      	mov	r3, ip
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d100      	bne.n	8000a7c <__aeabi_fsub+0x17c>
 8000a7a:	e0d9      	b.n	8000c30 <__aeabi_fsub+0x330>
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	2e00      	cmp	r6, #0
 8000a80:	d100      	bne.n	8000a84 <__aeabi_fsub+0x184>
 8000a82:	e788      	b.n	8000996 <__aeabi_fsub+0x96>
 8000a84:	1b98      	subs	r0, r3, r6
 8000a86:	0143      	lsls	r3, r0, #5
 8000a88:	d400      	bmi.n	8000a8c <__aeabi_fsub+0x18c>
 8000a8a:	e0e1      	b.n	8000c50 <__aeabi_fsub+0x350>
 8000a8c:	4663      	mov	r3, ip
 8000a8e:	000c      	movs	r4, r1
 8000a90:	1af0      	subs	r0, r6, r3
 8000a92:	e76f      	b.n	8000974 <__aeabi_fsub+0x74>
 8000a94:	2e00      	cmp	r6, #0
 8000a96:	d100      	bne.n	8000a9a <__aeabi_fsub+0x19a>
 8000a98:	e0b7      	b.n	8000c0a <__aeabi_fsub+0x30a>
 8000a9a:	0002      	movs	r2, r0
 8000a9c:	3a01      	subs	r2, #1
 8000a9e:	2801      	cmp	r0, #1
 8000aa0:	d100      	bne.n	8000aa4 <__aeabi_fsub+0x1a4>
 8000aa2:	e09c      	b.n	8000bde <__aeabi_fsub+0x2de>
 8000aa4:	28ff      	cmp	r0, #255	; 0xff
 8000aa6:	d026      	beq.n	8000af6 <__aeabi_fsub+0x1f6>
 8000aa8:	4690      	mov	r8, r2
 8000aaa:	e788      	b.n	80009be <__aeabi_fsub+0xbe>
 8000aac:	22ff      	movs	r2, #255	; 0xff
 8000aae:	2700      	movs	r7, #0
 8000ab0:	e771      	b.n	8000996 <__aeabi_fsub+0x96>
 8000ab2:	20fe      	movs	r0, #254	; 0xfe
 8000ab4:	1c6a      	adds	r2, r5, #1
 8000ab6:	4210      	tst	r0, r2
 8000ab8:	d064      	beq.n	8000b84 <__aeabi_fsub+0x284>
 8000aba:	2aff      	cmp	r2, #255	; 0xff
 8000abc:	d0f6      	beq.n	8000aac <__aeabi_fsub+0x1ac>
 8000abe:	0015      	movs	r5, r2
 8000ac0:	4466      	add	r6, ip
 8000ac2:	0870      	lsrs	r0, r6, #1
 8000ac4:	0743      	lsls	r3, r0, #29
 8000ac6:	d000      	beq.n	8000aca <__aeabi_fsub+0x1ca>
 8000ac8:	e756      	b.n	8000978 <__aeabi_fsub+0x78>
 8000aca:	08c3      	lsrs	r3, r0, #3
 8000acc:	2dff      	cmp	r5, #255	; 0xff
 8000ace:	d012      	beq.n	8000af6 <__aeabi_fsub+0x1f6>
 8000ad0:	025b      	lsls	r3, r3, #9
 8000ad2:	0a5f      	lsrs	r7, r3, #9
 8000ad4:	b2ea      	uxtb	r2, r5
 8000ad6:	e75e      	b.n	8000996 <__aeabi_fsub+0x96>
 8000ad8:	4662      	mov	r2, ip
 8000ada:	2a00      	cmp	r2, #0
 8000adc:	d100      	bne.n	8000ae0 <__aeabi_fsub+0x1e0>
 8000ade:	e096      	b.n	8000c0e <__aeabi_fsub+0x30e>
 8000ae0:	2e00      	cmp	r6, #0
 8000ae2:	d008      	beq.n	8000af6 <__aeabi_fsub+0x1f6>
 8000ae4:	2280      	movs	r2, #128	; 0x80
 8000ae6:	03d2      	lsls	r2, r2, #15
 8000ae8:	4213      	tst	r3, r2
 8000aea:	d004      	beq.n	8000af6 <__aeabi_fsub+0x1f6>
 8000aec:	4648      	mov	r0, r9
 8000aee:	4210      	tst	r0, r2
 8000af0:	d101      	bne.n	8000af6 <__aeabi_fsub+0x1f6>
 8000af2:	000c      	movs	r4, r1
 8000af4:	464b      	mov	r3, r9
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d0d8      	beq.n	8000aac <__aeabi_fsub+0x1ac>
 8000afa:	2780      	movs	r7, #128	; 0x80
 8000afc:	03ff      	lsls	r7, r7, #15
 8000afe:	431f      	orrs	r7, r3
 8000b00:	027f      	lsls	r7, r7, #9
 8000b02:	22ff      	movs	r2, #255	; 0xff
 8000b04:	0a7f      	lsrs	r7, r7, #9
 8000b06:	e746      	b.n	8000996 <__aeabi_fsub+0x96>
 8000b08:	2320      	movs	r3, #32
 8000b0a:	003a      	movs	r2, r7
 8000b0c:	1b45      	subs	r5, r0, r5
 8000b0e:	0038      	movs	r0, r7
 8000b10:	3501      	adds	r5, #1
 8000b12:	40ea      	lsrs	r2, r5
 8000b14:	1b5d      	subs	r5, r3, r5
 8000b16:	40a8      	lsls	r0, r5
 8000b18:	1e43      	subs	r3, r0, #1
 8000b1a:	4198      	sbcs	r0, r3
 8000b1c:	2500      	movs	r5, #0
 8000b1e:	4310      	orrs	r0, r2
 8000b20:	e728      	b.n	8000974 <__aeabi_fsub+0x74>
 8000b22:	2320      	movs	r3, #32
 8000b24:	1a1b      	subs	r3, r3, r0
 8000b26:	0032      	movs	r2, r6
 8000b28:	409e      	lsls	r6, r3
 8000b2a:	40c2      	lsrs	r2, r0
 8000b2c:	0030      	movs	r0, r6
 8000b2e:	1e43      	subs	r3, r0, #1
 8000b30:	4198      	sbcs	r0, r3
 8000b32:	4310      	orrs	r0, r2
 8000b34:	e70c      	b.n	8000950 <__aeabi_fsub+0x50>
 8000b36:	2aff      	cmp	r2, #255	; 0xff
 8000b38:	d0db      	beq.n	8000af2 <__aeabi_fsub+0x1f2>
 8000b3a:	2380      	movs	r3, #128	; 0x80
 8000b3c:	4660      	mov	r0, ip
 8000b3e:	04db      	lsls	r3, r3, #19
 8000b40:	4318      	orrs	r0, r3
 8000b42:	4684      	mov	ip, r0
 8000b44:	2f1b      	cmp	r7, #27
 8000b46:	dd56      	ble.n	8000bf6 <__aeabi_fsub+0x2f6>
 8000b48:	2001      	movs	r0, #1
 8000b4a:	000c      	movs	r4, r1
 8000b4c:	0015      	movs	r5, r2
 8000b4e:	1a30      	subs	r0, r6, r0
 8000b50:	e700      	b.n	8000954 <__aeabi_fsub+0x54>
 8000b52:	4663      	mov	r3, ip
 8000b54:	1b9f      	subs	r7, r3, r6
 8000b56:	017b      	lsls	r3, r7, #5
 8000b58:	d43d      	bmi.n	8000bd6 <__aeabi_fsub+0x2d6>
 8000b5a:	2f00      	cmp	r7, #0
 8000b5c:	d000      	beq.n	8000b60 <__aeabi_fsub+0x260>
 8000b5e:	e6fe      	b.n	800095e <__aeabi_fsub+0x5e>
 8000b60:	2400      	movs	r4, #0
 8000b62:	2200      	movs	r2, #0
 8000b64:	2700      	movs	r7, #0
 8000b66:	e716      	b.n	8000996 <__aeabi_fsub+0x96>
 8000b68:	0005      	movs	r5, r0
 8000b6a:	e7af      	b.n	8000acc <__aeabi_fsub+0x1cc>
 8000b6c:	0032      	movs	r2, r6
 8000b6e:	4643      	mov	r3, r8
 8000b70:	4641      	mov	r1, r8
 8000b72:	40da      	lsrs	r2, r3
 8000b74:	2320      	movs	r3, #32
 8000b76:	1a5b      	subs	r3, r3, r1
 8000b78:	409e      	lsls	r6, r3
 8000b7a:	0030      	movs	r0, r6
 8000b7c:	1e43      	subs	r3, r0, #1
 8000b7e:	4198      	sbcs	r0, r3
 8000b80:	4310      	orrs	r0, r2
 8000b82:	e721      	b.n	80009c8 <__aeabi_fsub+0xc8>
 8000b84:	2d00      	cmp	r5, #0
 8000b86:	d1a7      	bne.n	8000ad8 <__aeabi_fsub+0x1d8>
 8000b88:	4663      	mov	r3, ip
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d059      	beq.n	8000c42 <__aeabi_fsub+0x342>
 8000b8e:	2200      	movs	r2, #0
 8000b90:	2e00      	cmp	r6, #0
 8000b92:	d100      	bne.n	8000b96 <__aeabi_fsub+0x296>
 8000b94:	e6ff      	b.n	8000996 <__aeabi_fsub+0x96>
 8000b96:	0030      	movs	r0, r6
 8000b98:	4460      	add	r0, ip
 8000b9a:	0143      	lsls	r3, r0, #5
 8000b9c:	d592      	bpl.n	8000ac4 <__aeabi_fsub+0x1c4>
 8000b9e:	4b2a      	ldr	r3, [pc, #168]	; (8000c48 <__aeabi_fsub+0x348>)
 8000ba0:	3501      	adds	r5, #1
 8000ba2:	4018      	ands	r0, r3
 8000ba4:	e78e      	b.n	8000ac4 <__aeabi_fsub+0x1c4>
 8000ba6:	4663      	mov	r3, ip
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d047      	beq.n	8000c3c <__aeabi_fsub+0x33c>
 8000bac:	1e4b      	subs	r3, r1, #1
 8000bae:	2901      	cmp	r1, #1
 8000bb0:	d015      	beq.n	8000bde <__aeabi_fsub+0x2de>
 8000bb2:	29ff      	cmp	r1, #255	; 0xff
 8000bb4:	d02b      	beq.n	8000c0e <__aeabi_fsub+0x30e>
 8000bb6:	0019      	movs	r1, r3
 8000bb8:	e74e      	b.n	8000a58 <__aeabi_fsub+0x158>
 8000bba:	000c      	movs	r4, r1
 8000bbc:	464b      	mov	r3, r9
 8000bbe:	003d      	movs	r5, r7
 8000bc0:	e784      	b.n	8000acc <__aeabi_fsub+0x1cc>
 8000bc2:	4662      	mov	r2, ip
 8000bc4:	2a00      	cmp	r2, #0
 8000bc6:	d18b      	bne.n	8000ae0 <__aeabi_fsub+0x1e0>
 8000bc8:	2e00      	cmp	r6, #0
 8000bca:	d192      	bne.n	8000af2 <__aeabi_fsub+0x1f2>
 8000bcc:	2780      	movs	r7, #128	; 0x80
 8000bce:	2400      	movs	r4, #0
 8000bd0:	22ff      	movs	r2, #255	; 0xff
 8000bd2:	03ff      	lsls	r7, r7, #15
 8000bd4:	e6df      	b.n	8000996 <__aeabi_fsub+0x96>
 8000bd6:	4663      	mov	r3, ip
 8000bd8:	000c      	movs	r4, r1
 8000bda:	1af7      	subs	r7, r6, r3
 8000bdc:	e6bf      	b.n	800095e <__aeabi_fsub+0x5e>
 8000bde:	0030      	movs	r0, r6
 8000be0:	4460      	add	r0, ip
 8000be2:	2501      	movs	r5, #1
 8000be4:	0143      	lsls	r3, r0, #5
 8000be6:	d400      	bmi.n	8000bea <__aeabi_fsub+0x2ea>
 8000be8:	e76c      	b.n	8000ac4 <__aeabi_fsub+0x1c4>
 8000bea:	2502      	movs	r5, #2
 8000bec:	e6f2      	b.n	80009d4 <__aeabi_fsub+0xd4>
 8000bee:	4663      	mov	r3, ip
 8000bf0:	2501      	movs	r5, #1
 8000bf2:	1b98      	subs	r0, r3, r6
 8000bf4:	e6ae      	b.n	8000954 <__aeabi_fsub+0x54>
 8000bf6:	2320      	movs	r3, #32
 8000bf8:	4664      	mov	r4, ip
 8000bfa:	4660      	mov	r0, ip
 8000bfc:	40fc      	lsrs	r4, r7
 8000bfe:	1bdf      	subs	r7, r3, r7
 8000c00:	40b8      	lsls	r0, r7
 8000c02:	1e43      	subs	r3, r0, #1
 8000c04:	4198      	sbcs	r0, r3
 8000c06:	4320      	orrs	r0, r4
 8000c08:	e79f      	b.n	8000b4a <__aeabi_fsub+0x24a>
 8000c0a:	0005      	movs	r5, r0
 8000c0c:	e75e      	b.n	8000acc <__aeabi_fsub+0x1cc>
 8000c0e:	464b      	mov	r3, r9
 8000c10:	e771      	b.n	8000af6 <__aeabi_fsub+0x1f6>
 8000c12:	2320      	movs	r3, #32
 8000c14:	4665      	mov	r5, ip
 8000c16:	4660      	mov	r0, ip
 8000c18:	40cd      	lsrs	r5, r1
 8000c1a:	1a59      	subs	r1, r3, r1
 8000c1c:	4088      	lsls	r0, r1
 8000c1e:	1e43      	subs	r3, r0, #1
 8000c20:	4198      	sbcs	r0, r3
 8000c22:	4328      	orrs	r0, r5
 8000c24:	e71c      	b.n	8000a60 <__aeabi_fsub+0x160>
 8000c26:	4663      	mov	r3, ip
 8000c28:	000c      	movs	r4, r1
 8000c2a:	2501      	movs	r5, #1
 8000c2c:	1af0      	subs	r0, r6, r3
 8000c2e:	e691      	b.n	8000954 <__aeabi_fsub+0x54>
 8000c30:	2e00      	cmp	r6, #0
 8000c32:	d095      	beq.n	8000b60 <__aeabi_fsub+0x260>
 8000c34:	000c      	movs	r4, r1
 8000c36:	464f      	mov	r7, r9
 8000c38:	2200      	movs	r2, #0
 8000c3a:	e6ac      	b.n	8000996 <__aeabi_fsub+0x96>
 8000c3c:	464b      	mov	r3, r9
 8000c3e:	000d      	movs	r5, r1
 8000c40:	e744      	b.n	8000acc <__aeabi_fsub+0x1cc>
 8000c42:	464f      	mov	r7, r9
 8000c44:	2200      	movs	r2, #0
 8000c46:	e6a6      	b.n	8000996 <__aeabi_fsub+0x96>
 8000c48:	fbffffff 	.word	0xfbffffff
 8000c4c:	7dffffff 	.word	0x7dffffff
 8000c50:	2800      	cmp	r0, #0
 8000c52:	d000      	beq.n	8000c56 <__aeabi_fsub+0x356>
 8000c54:	e736      	b.n	8000ac4 <__aeabi_fsub+0x1c4>
 8000c56:	2400      	movs	r4, #0
 8000c58:	2700      	movs	r7, #0
 8000c5a:	e69c      	b.n	8000996 <__aeabi_fsub+0x96>

08000c5c <__aeabi_f2iz>:
 8000c5c:	0241      	lsls	r1, r0, #9
 8000c5e:	0042      	lsls	r2, r0, #1
 8000c60:	0fc3      	lsrs	r3, r0, #31
 8000c62:	0a49      	lsrs	r1, r1, #9
 8000c64:	2000      	movs	r0, #0
 8000c66:	0e12      	lsrs	r2, r2, #24
 8000c68:	2a7e      	cmp	r2, #126	; 0x7e
 8000c6a:	dd03      	ble.n	8000c74 <__aeabi_f2iz+0x18>
 8000c6c:	2a9d      	cmp	r2, #157	; 0x9d
 8000c6e:	dd02      	ble.n	8000c76 <__aeabi_f2iz+0x1a>
 8000c70:	4a09      	ldr	r2, [pc, #36]	; (8000c98 <__aeabi_f2iz+0x3c>)
 8000c72:	1898      	adds	r0, r3, r2
 8000c74:	4770      	bx	lr
 8000c76:	2080      	movs	r0, #128	; 0x80
 8000c78:	0400      	lsls	r0, r0, #16
 8000c7a:	4301      	orrs	r1, r0
 8000c7c:	2a95      	cmp	r2, #149	; 0x95
 8000c7e:	dc07      	bgt.n	8000c90 <__aeabi_f2iz+0x34>
 8000c80:	2096      	movs	r0, #150	; 0x96
 8000c82:	1a82      	subs	r2, r0, r2
 8000c84:	40d1      	lsrs	r1, r2
 8000c86:	4248      	negs	r0, r1
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d1f3      	bne.n	8000c74 <__aeabi_f2iz+0x18>
 8000c8c:	0008      	movs	r0, r1
 8000c8e:	e7f1      	b.n	8000c74 <__aeabi_f2iz+0x18>
 8000c90:	3a96      	subs	r2, #150	; 0x96
 8000c92:	4091      	lsls	r1, r2
 8000c94:	e7f7      	b.n	8000c86 <__aeabi_f2iz+0x2a>
 8000c96:	46c0      	nop			; (mov r8, r8)
 8000c98:	7fffffff 	.word	0x7fffffff

08000c9c <__aeabi_ui2f>:
 8000c9c:	b570      	push	{r4, r5, r6, lr}
 8000c9e:	1e05      	subs	r5, r0, #0
 8000ca0:	d00e      	beq.n	8000cc0 <__aeabi_ui2f+0x24>
 8000ca2:	f000 f877 	bl	8000d94 <__clzsi2>
 8000ca6:	239e      	movs	r3, #158	; 0x9e
 8000ca8:	0004      	movs	r4, r0
 8000caa:	1a1b      	subs	r3, r3, r0
 8000cac:	2b96      	cmp	r3, #150	; 0x96
 8000cae:	dc0c      	bgt.n	8000cca <__aeabi_ui2f+0x2e>
 8000cb0:	2808      	cmp	r0, #8
 8000cb2:	dd01      	ble.n	8000cb8 <__aeabi_ui2f+0x1c>
 8000cb4:	3c08      	subs	r4, #8
 8000cb6:	40a5      	lsls	r5, r4
 8000cb8:	026d      	lsls	r5, r5, #9
 8000cba:	0a6d      	lsrs	r5, r5, #9
 8000cbc:	b2d8      	uxtb	r0, r3
 8000cbe:	e001      	b.n	8000cc4 <__aeabi_ui2f+0x28>
 8000cc0:	2000      	movs	r0, #0
 8000cc2:	2500      	movs	r5, #0
 8000cc4:	05c0      	lsls	r0, r0, #23
 8000cc6:	4328      	orrs	r0, r5
 8000cc8:	bd70      	pop	{r4, r5, r6, pc}
 8000cca:	2b99      	cmp	r3, #153	; 0x99
 8000ccc:	dd09      	ble.n	8000ce2 <__aeabi_ui2f+0x46>
 8000cce:	0002      	movs	r2, r0
 8000cd0:	0029      	movs	r1, r5
 8000cd2:	321b      	adds	r2, #27
 8000cd4:	4091      	lsls	r1, r2
 8000cd6:	1e4a      	subs	r2, r1, #1
 8000cd8:	4191      	sbcs	r1, r2
 8000cda:	2205      	movs	r2, #5
 8000cdc:	1a12      	subs	r2, r2, r0
 8000cde:	40d5      	lsrs	r5, r2
 8000ce0:	430d      	orrs	r5, r1
 8000ce2:	2c05      	cmp	r4, #5
 8000ce4:	dc12      	bgt.n	8000d0c <__aeabi_ui2f+0x70>
 8000ce6:	0029      	movs	r1, r5
 8000ce8:	4e0c      	ldr	r6, [pc, #48]	; (8000d1c <__aeabi_ui2f+0x80>)
 8000cea:	4031      	ands	r1, r6
 8000cec:	076a      	lsls	r2, r5, #29
 8000cee:	d009      	beq.n	8000d04 <__aeabi_ui2f+0x68>
 8000cf0:	200f      	movs	r0, #15
 8000cf2:	4028      	ands	r0, r5
 8000cf4:	2804      	cmp	r0, #4
 8000cf6:	d005      	beq.n	8000d04 <__aeabi_ui2f+0x68>
 8000cf8:	3104      	adds	r1, #4
 8000cfa:	014a      	lsls	r2, r1, #5
 8000cfc:	d502      	bpl.n	8000d04 <__aeabi_ui2f+0x68>
 8000cfe:	239f      	movs	r3, #159	; 0x9f
 8000d00:	4031      	ands	r1, r6
 8000d02:	1b1b      	subs	r3, r3, r4
 8000d04:	0189      	lsls	r1, r1, #6
 8000d06:	0a4d      	lsrs	r5, r1, #9
 8000d08:	b2d8      	uxtb	r0, r3
 8000d0a:	e7db      	b.n	8000cc4 <__aeabi_ui2f+0x28>
 8000d0c:	1f62      	subs	r2, r4, #5
 8000d0e:	4095      	lsls	r5, r2
 8000d10:	0029      	movs	r1, r5
 8000d12:	4e02      	ldr	r6, [pc, #8]	; (8000d1c <__aeabi_ui2f+0x80>)
 8000d14:	4031      	ands	r1, r6
 8000d16:	076a      	lsls	r2, r5, #29
 8000d18:	d0f4      	beq.n	8000d04 <__aeabi_ui2f+0x68>
 8000d1a:	e7e9      	b.n	8000cf0 <__aeabi_ui2f+0x54>
 8000d1c:	fbffffff 	.word	0xfbffffff

08000d20 <__aeabi_cfrcmple>:
 8000d20:	4684      	mov	ip, r0
 8000d22:	0008      	movs	r0, r1
 8000d24:	4661      	mov	r1, ip
 8000d26:	e7ff      	b.n	8000d28 <__aeabi_cfcmpeq>

08000d28 <__aeabi_cfcmpeq>:
 8000d28:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000d2a:	f000 f8c9 	bl	8000ec0 <__lesf2>
 8000d2e:	2800      	cmp	r0, #0
 8000d30:	d401      	bmi.n	8000d36 <__aeabi_cfcmpeq+0xe>
 8000d32:	2100      	movs	r1, #0
 8000d34:	42c8      	cmn	r0, r1
 8000d36:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000d38 <__aeabi_fcmpeq>:
 8000d38:	b510      	push	{r4, lr}
 8000d3a:	f000 f855 	bl	8000de8 <__eqsf2>
 8000d3e:	4240      	negs	r0, r0
 8000d40:	3001      	adds	r0, #1
 8000d42:	bd10      	pop	{r4, pc}

08000d44 <__aeabi_fcmplt>:
 8000d44:	b510      	push	{r4, lr}
 8000d46:	f000 f8bb 	bl	8000ec0 <__lesf2>
 8000d4a:	2800      	cmp	r0, #0
 8000d4c:	db01      	blt.n	8000d52 <__aeabi_fcmplt+0xe>
 8000d4e:	2000      	movs	r0, #0
 8000d50:	bd10      	pop	{r4, pc}
 8000d52:	2001      	movs	r0, #1
 8000d54:	bd10      	pop	{r4, pc}
 8000d56:	46c0      	nop			; (mov r8, r8)

08000d58 <__aeabi_fcmple>:
 8000d58:	b510      	push	{r4, lr}
 8000d5a:	f000 f8b1 	bl	8000ec0 <__lesf2>
 8000d5e:	2800      	cmp	r0, #0
 8000d60:	dd01      	ble.n	8000d66 <__aeabi_fcmple+0xe>
 8000d62:	2000      	movs	r0, #0
 8000d64:	bd10      	pop	{r4, pc}
 8000d66:	2001      	movs	r0, #1
 8000d68:	bd10      	pop	{r4, pc}
 8000d6a:	46c0      	nop			; (mov r8, r8)

08000d6c <__aeabi_fcmpgt>:
 8000d6c:	b510      	push	{r4, lr}
 8000d6e:	f000 f861 	bl	8000e34 <__gesf2>
 8000d72:	2800      	cmp	r0, #0
 8000d74:	dc01      	bgt.n	8000d7a <__aeabi_fcmpgt+0xe>
 8000d76:	2000      	movs	r0, #0
 8000d78:	bd10      	pop	{r4, pc}
 8000d7a:	2001      	movs	r0, #1
 8000d7c:	bd10      	pop	{r4, pc}
 8000d7e:	46c0      	nop			; (mov r8, r8)

08000d80 <__aeabi_fcmpge>:
 8000d80:	b510      	push	{r4, lr}
 8000d82:	f000 f857 	bl	8000e34 <__gesf2>
 8000d86:	2800      	cmp	r0, #0
 8000d88:	da01      	bge.n	8000d8e <__aeabi_fcmpge+0xe>
 8000d8a:	2000      	movs	r0, #0
 8000d8c:	bd10      	pop	{r4, pc}
 8000d8e:	2001      	movs	r0, #1
 8000d90:	bd10      	pop	{r4, pc}
 8000d92:	46c0      	nop			; (mov r8, r8)

08000d94 <__clzsi2>:
 8000d94:	211c      	movs	r1, #28
 8000d96:	2301      	movs	r3, #1
 8000d98:	041b      	lsls	r3, r3, #16
 8000d9a:	4298      	cmp	r0, r3
 8000d9c:	d301      	bcc.n	8000da2 <__clzsi2+0xe>
 8000d9e:	0c00      	lsrs	r0, r0, #16
 8000da0:	3910      	subs	r1, #16
 8000da2:	0a1b      	lsrs	r3, r3, #8
 8000da4:	4298      	cmp	r0, r3
 8000da6:	d301      	bcc.n	8000dac <__clzsi2+0x18>
 8000da8:	0a00      	lsrs	r0, r0, #8
 8000daa:	3908      	subs	r1, #8
 8000dac:	091b      	lsrs	r3, r3, #4
 8000dae:	4298      	cmp	r0, r3
 8000db0:	d301      	bcc.n	8000db6 <__clzsi2+0x22>
 8000db2:	0900      	lsrs	r0, r0, #4
 8000db4:	3904      	subs	r1, #4
 8000db6:	a202      	add	r2, pc, #8	; (adr r2, 8000dc0 <__clzsi2+0x2c>)
 8000db8:	5c10      	ldrb	r0, [r2, r0]
 8000dba:	1840      	adds	r0, r0, r1
 8000dbc:	4770      	bx	lr
 8000dbe:	46c0      	nop			; (mov r8, r8)
 8000dc0:	02020304 	.word	0x02020304
 8000dc4:	01010101 	.word	0x01010101
	...

08000dd0 <__clzdi2>:
 8000dd0:	b510      	push	{r4, lr}
 8000dd2:	2900      	cmp	r1, #0
 8000dd4:	d103      	bne.n	8000dde <__clzdi2+0xe>
 8000dd6:	f7ff ffdd 	bl	8000d94 <__clzsi2>
 8000dda:	3020      	adds	r0, #32
 8000ddc:	e002      	b.n	8000de4 <__clzdi2+0x14>
 8000dde:	0008      	movs	r0, r1
 8000de0:	f7ff ffd8 	bl	8000d94 <__clzsi2>
 8000de4:	bd10      	pop	{r4, pc}
 8000de6:	46c0      	nop			; (mov r8, r8)

08000de8 <__eqsf2>:
 8000de8:	b570      	push	{r4, r5, r6, lr}
 8000dea:	0042      	lsls	r2, r0, #1
 8000dec:	0245      	lsls	r5, r0, #9
 8000dee:	024e      	lsls	r6, r1, #9
 8000df0:	004c      	lsls	r4, r1, #1
 8000df2:	0fc3      	lsrs	r3, r0, #31
 8000df4:	0a6d      	lsrs	r5, r5, #9
 8000df6:	2001      	movs	r0, #1
 8000df8:	0e12      	lsrs	r2, r2, #24
 8000dfa:	0a76      	lsrs	r6, r6, #9
 8000dfc:	0e24      	lsrs	r4, r4, #24
 8000dfe:	0fc9      	lsrs	r1, r1, #31
 8000e00:	2aff      	cmp	r2, #255	; 0xff
 8000e02:	d006      	beq.n	8000e12 <__eqsf2+0x2a>
 8000e04:	2cff      	cmp	r4, #255	; 0xff
 8000e06:	d003      	beq.n	8000e10 <__eqsf2+0x28>
 8000e08:	42a2      	cmp	r2, r4
 8000e0a:	d101      	bne.n	8000e10 <__eqsf2+0x28>
 8000e0c:	42b5      	cmp	r5, r6
 8000e0e:	d006      	beq.n	8000e1e <__eqsf2+0x36>
 8000e10:	bd70      	pop	{r4, r5, r6, pc}
 8000e12:	2d00      	cmp	r5, #0
 8000e14:	d1fc      	bne.n	8000e10 <__eqsf2+0x28>
 8000e16:	2cff      	cmp	r4, #255	; 0xff
 8000e18:	d1fa      	bne.n	8000e10 <__eqsf2+0x28>
 8000e1a:	2e00      	cmp	r6, #0
 8000e1c:	d1f8      	bne.n	8000e10 <__eqsf2+0x28>
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d006      	beq.n	8000e30 <__eqsf2+0x48>
 8000e22:	2001      	movs	r0, #1
 8000e24:	2a00      	cmp	r2, #0
 8000e26:	d1f3      	bne.n	8000e10 <__eqsf2+0x28>
 8000e28:	0028      	movs	r0, r5
 8000e2a:	1e43      	subs	r3, r0, #1
 8000e2c:	4198      	sbcs	r0, r3
 8000e2e:	e7ef      	b.n	8000e10 <__eqsf2+0x28>
 8000e30:	2000      	movs	r0, #0
 8000e32:	e7ed      	b.n	8000e10 <__eqsf2+0x28>

08000e34 <__gesf2>:
 8000e34:	b570      	push	{r4, r5, r6, lr}
 8000e36:	0042      	lsls	r2, r0, #1
 8000e38:	0245      	lsls	r5, r0, #9
 8000e3a:	024e      	lsls	r6, r1, #9
 8000e3c:	004c      	lsls	r4, r1, #1
 8000e3e:	0fc3      	lsrs	r3, r0, #31
 8000e40:	0a6d      	lsrs	r5, r5, #9
 8000e42:	0e12      	lsrs	r2, r2, #24
 8000e44:	0a76      	lsrs	r6, r6, #9
 8000e46:	0e24      	lsrs	r4, r4, #24
 8000e48:	0fc8      	lsrs	r0, r1, #31
 8000e4a:	2aff      	cmp	r2, #255	; 0xff
 8000e4c:	d01b      	beq.n	8000e86 <__gesf2+0x52>
 8000e4e:	2cff      	cmp	r4, #255	; 0xff
 8000e50:	d00e      	beq.n	8000e70 <__gesf2+0x3c>
 8000e52:	2a00      	cmp	r2, #0
 8000e54:	d11b      	bne.n	8000e8e <__gesf2+0x5a>
 8000e56:	2c00      	cmp	r4, #0
 8000e58:	d101      	bne.n	8000e5e <__gesf2+0x2a>
 8000e5a:	2e00      	cmp	r6, #0
 8000e5c:	d01c      	beq.n	8000e98 <__gesf2+0x64>
 8000e5e:	2d00      	cmp	r5, #0
 8000e60:	d00c      	beq.n	8000e7c <__gesf2+0x48>
 8000e62:	4283      	cmp	r3, r0
 8000e64:	d01c      	beq.n	8000ea0 <__gesf2+0x6c>
 8000e66:	2102      	movs	r1, #2
 8000e68:	1e58      	subs	r0, r3, #1
 8000e6a:	4008      	ands	r0, r1
 8000e6c:	3801      	subs	r0, #1
 8000e6e:	bd70      	pop	{r4, r5, r6, pc}
 8000e70:	2e00      	cmp	r6, #0
 8000e72:	d122      	bne.n	8000eba <__gesf2+0x86>
 8000e74:	2a00      	cmp	r2, #0
 8000e76:	d1f4      	bne.n	8000e62 <__gesf2+0x2e>
 8000e78:	2d00      	cmp	r5, #0
 8000e7a:	d1f2      	bne.n	8000e62 <__gesf2+0x2e>
 8000e7c:	2800      	cmp	r0, #0
 8000e7e:	d1f6      	bne.n	8000e6e <__gesf2+0x3a>
 8000e80:	2001      	movs	r0, #1
 8000e82:	4240      	negs	r0, r0
 8000e84:	e7f3      	b.n	8000e6e <__gesf2+0x3a>
 8000e86:	2d00      	cmp	r5, #0
 8000e88:	d117      	bne.n	8000eba <__gesf2+0x86>
 8000e8a:	2cff      	cmp	r4, #255	; 0xff
 8000e8c:	d0f0      	beq.n	8000e70 <__gesf2+0x3c>
 8000e8e:	2c00      	cmp	r4, #0
 8000e90:	d1e7      	bne.n	8000e62 <__gesf2+0x2e>
 8000e92:	2e00      	cmp	r6, #0
 8000e94:	d1e5      	bne.n	8000e62 <__gesf2+0x2e>
 8000e96:	e7e6      	b.n	8000e66 <__gesf2+0x32>
 8000e98:	2000      	movs	r0, #0
 8000e9a:	2d00      	cmp	r5, #0
 8000e9c:	d0e7      	beq.n	8000e6e <__gesf2+0x3a>
 8000e9e:	e7e2      	b.n	8000e66 <__gesf2+0x32>
 8000ea0:	42a2      	cmp	r2, r4
 8000ea2:	dc05      	bgt.n	8000eb0 <__gesf2+0x7c>
 8000ea4:	dbea      	blt.n	8000e7c <__gesf2+0x48>
 8000ea6:	42b5      	cmp	r5, r6
 8000ea8:	d802      	bhi.n	8000eb0 <__gesf2+0x7c>
 8000eaa:	d3e7      	bcc.n	8000e7c <__gesf2+0x48>
 8000eac:	2000      	movs	r0, #0
 8000eae:	e7de      	b.n	8000e6e <__gesf2+0x3a>
 8000eb0:	4243      	negs	r3, r0
 8000eb2:	4158      	adcs	r0, r3
 8000eb4:	0040      	lsls	r0, r0, #1
 8000eb6:	3801      	subs	r0, #1
 8000eb8:	e7d9      	b.n	8000e6e <__gesf2+0x3a>
 8000eba:	2002      	movs	r0, #2
 8000ebc:	4240      	negs	r0, r0
 8000ebe:	e7d6      	b.n	8000e6e <__gesf2+0x3a>

08000ec0 <__lesf2>:
 8000ec0:	b570      	push	{r4, r5, r6, lr}
 8000ec2:	0042      	lsls	r2, r0, #1
 8000ec4:	0245      	lsls	r5, r0, #9
 8000ec6:	024e      	lsls	r6, r1, #9
 8000ec8:	004c      	lsls	r4, r1, #1
 8000eca:	0fc3      	lsrs	r3, r0, #31
 8000ecc:	0a6d      	lsrs	r5, r5, #9
 8000ece:	0e12      	lsrs	r2, r2, #24
 8000ed0:	0a76      	lsrs	r6, r6, #9
 8000ed2:	0e24      	lsrs	r4, r4, #24
 8000ed4:	0fc8      	lsrs	r0, r1, #31
 8000ed6:	2aff      	cmp	r2, #255	; 0xff
 8000ed8:	d00b      	beq.n	8000ef2 <__lesf2+0x32>
 8000eda:	2cff      	cmp	r4, #255	; 0xff
 8000edc:	d00d      	beq.n	8000efa <__lesf2+0x3a>
 8000ede:	2a00      	cmp	r2, #0
 8000ee0:	d11f      	bne.n	8000f22 <__lesf2+0x62>
 8000ee2:	2c00      	cmp	r4, #0
 8000ee4:	d116      	bne.n	8000f14 <__lesf2+0x54>
 8000ee6:	2e00      	cmp	r6, #0
 8000ee8:	d114      	bne.n	8000f14 <__lesf2+0x54>
 8000eea:	2000      	movs	r0, #0
 8000eec:	2d00      	cmp	r5, #0
 8000eee:	d010      	beq.n	8000f12 <__lesf2+0x52>
 8000ef0:	e009      	b.n	8000f06 <__lesf2+0x46>
 8000ef2:	2d00      	cmp	r5, #0
 8000ef4:	d10c      	bne.n	8000f10 <__lesf2+0x50>
 8000ef6:	2cff      	cmp	r4, #255	; 0xff
 8000ef8:	d113      	bne.n	8000f22 <__lesf2+0x62>
 8000efa:	2e00      	cmp	r6, #0
 8000efc:	d108      	bne.n	8000f10 <__lesf2+0x50>
 8000efe:	2a00      	cmp	r2, #0
 8000f00:	d008      	beq.n	8000f14 <__lesf2+0x54>
 8000f02:	4283      	cmp	r3, r0
 8000f04:	d012      	beq.n	8000f2c <__lesf2+0x6c>
 8000f06:	2102      	movs	r1, #2
 8000f08:	1e58      	subs	r0, r3, #1
 8000f0a:	4008      	ands	r0, r1
 8000f0c:	3801      	subs	r0, #1
 8000f0e:	e000      	b.n	8000f12 <__lesf2+0x52>
 8000f10:	2002      	movs	r0, #2
 8000f12:	bd70      	pop	{r4, r5, r6, pc}
 8000f14:	2d00      	cmp	r5, #0
 8000f16:	d1f4      	bne.n	8000f02 <__lesf2+0x42>
 8000f18:	2800      	cmp	r0, #0
 8000f1a:	d1fa      	bne.n	8000f12 <__lesf2+0x52>
 8000f1c:	2001      	movs	r0, #1
 8000f1e:	4240      	negs	r0, r0
 8000f20:	e7f7      	b.n	8000f12 <__lesf2+0x52>
 8000f22:	2c00      	cmp	r4, #0
 8000f24:	d1ed      	bne.n	8000f02 <__lesf2+0x42>
 8000f26:	2e00      	cmp	r6, #0
 8000f28:	d1eb      	bne.n	8000f02 <__lesf2+0x42>
 8000f2a:	e7ec      	b.n	8000f06 <__lesf2+0x46>
 8000f2c:	42a2      	cmp	r2, r4
 8000f2e:	dc05      	bgt.n	8000f3c <__lesf2+0x7c>
 8000f30:	dbf2      	blt.n	8000f18 <__lesf2+0x58>
 8000f32:	42b5      	cmp	r5, r6
 8000f34:	d802      	bhi.n	8000f3c <__lesf2+0x7c>
 8000f36:	d3ef      	bcc.n	8000f18 <__lesf2+0x58>
 8000f38:	2000      	movs	r0, #0
 8000f3a:	e7ea      	b.n	8000f12 <__lesf2+0x52>
 8000f3c:	4243      	negs	r3, r0
 8000f3e:	4158      	adcs	r0, r3
 8000f40:	0040      	lsls	r0, r0, #1
 8000f42:	3801      	subs	r0, #1
 8000f44:	e7e5      	b.n	8000f12 <__lesf2+0x52>
 8000f46:	46c0      	nop			; (mov r8, r8)

08000f48 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f48:	b5b0      	push	{r4, r5, r7, lr}
 8000f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	ARR4 = (3200000/Frequency)-1;
 8000f4c:	4b18      	ldr	r3, [pc, #96]	; (8000fb0 <main+0x68>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	0019      	movs	r1, r3
 8000f52:	4818      	ldr	r0, [pc, #96]	; (8000fb4 <main+0x6c>)
 8000f54:	f7ff f8d8 	bl	8000108 <__udivsi3>
 8000f58:	0003      	movs	r3, r0
 8000f5a:	1e5a      	subs	r2, r3, #1
 8000f5c:	4b16      	ldr	r3, [pc, #88]	; (8000fb8 <main+0x70>)
 8000f5e:	601a      	str	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f60:	f000 f9ee 	bl	8001340 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f64:	f000 f830 	bl	8000fc8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f68:	f000 f90a 	bl	8001180 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000f6c:	f000 f888 	bl	8001080 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8000f70:	4b12      	ldr	r3, [pc, #72]	; (8000fbc <main+0x74>)
 8000f72:	210c      	movs	r1, #12
 8000f74:	0018      	movs	r0, r3
 8000f76:	f001 fa5f 	bl	8002438 <HAL_TIM_PWM_Start>
  TIM2->CCR4 = (ARR4 * DutyCycle_output)/100; //Duty cycle manage.
 8000f7a:	4b0f      	ldr	r3, [pc, #60]	; (8000fb8 <main+0x70>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	0018      	movs	r0, r3
 8000f80:	f7ff fe8c 	bl	8000c9c <__aeabi_ui2f>
 8000f84:	1c02      	adds	r2, r0, #0
 8000f86:	4b0e      	ldr	r3, [pc, #56]	; (8000fc0 <main+0x78>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	1c19      	adds	r1, r3, #0
 8000f8c:	1c10      	adds	r0, r2, #0
 8000f8e:	f7ff fb91 	bl	80006b4 <__aeabi_fmul>
 8000f92:	1c03      	adds	r3, r0, #0
 8000f94:	490b      	ldr	r1, [pc, #44]	; (8000fc4 <main+0x7c>)
 8000f96:	1c18      	adds	r0, r3, #0
 8000f98:	f7ff fa74 	bl	8000484 <__aeabi_fdiv>
 8000f9c:	1c03      	adds	r3, r0, #0
 8000f9e:	1c1a      	adds	r2, r3, #0
 8000fa0:	2380      	movs	r3, #128	; 0x80
 8000fa2:	05dc      	lsls	r4, r3, #23
 8000fa4:	1c10      	adds	r0, r2, #0
 8000fa6:	f7ff f989 	bl	80002bc <__aeabi_f2uiz>
 8000faa:	0003      	movs	r3, r0
 8000fac:	6423      	str	r3, [r4, #64]	; 0x40
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000fae:	e7fe      	b.n	8000fae <main+0x66>
 8000fb0:	20000000 	.word	0x20000000
 8000fb4:	0030d400 	.word	0x0030d400
 8000fb8:	20000070 	.word	0x20000070
 8000fbc:	20000030 	.word	0x20000030
 8000fc0:	20000004 	.word	0x20000004
 8000fc4:	42c80000 	.word	0x42c80000

08000fc8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fc8:	b590      	push	{r4, r7, lr}
 8000fca:	b093      	sub	sp, #76	; 0x4c
 8000fcc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fce:	2414      	movs	r4, #20
 8000fd0:	193b      	adds	r3, r7, r4
 8000fd2:	0018      	movs	r0, r3
 8000fd4:	2334      	movs	r3, #52	; 0x34
 8000fd6:	001a      	movs	r2, r3
 8000fd8:	2100      	movs	r1, #0
 8000fda:	f001 fecb 	bl	8002d74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fde:	003b      	movs	r3, r7
 8000fe0:	0018      	movs	r0, r3
 8000fe2:	2314      	movs	r3, #20
 8000fe4:	001a      	movs	r2, r3
 8000fe6:	2100      	movs	r1, #0
 8000fe8:	f001 fec4 	bl	8002d74 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fec:	4b22      	ldr	r3, [pc, #136]	; (8001078 <SystemClock_Config+0xb0>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	4a22      	ldr	r2, [pc, #136]	; (800107c <SystemClock_Config+0xb4>)
 8000ff2:	401a      	ands	r2, r3
 8000ff4:	4b20      	ldr	r3, [pc, #128]	; (8001078 <SystemClock_Config+0xb0>)
 8000ff6:	2180      	movs	r1, #128	; 0x80
 8000ff8:	0109      	lsls	r1, r1, #4
 8000ffa:	430a      	orrs	r2, r1
 8000ffc:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ffe:	0021      	movs	r1, r4
 8001000:	187b      	adds	r3, r7, r1
 8001002:	2202      	movs	r2, #2
 8001004:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001006:	187b      	adds	r3, r7, r1
 8001008:	2201      	movs	r2, #1
 800100a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800100c:	187b      	adds	r3, r7, r1
 800100e:	2210      	movs	r2, #16
 8001010:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001012:	187b      	adds	r3, r7, r1
 8001014:	2202      	movs	r2, #2
 8001016:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001018:	187b      	adds	r3, r7, r1
 800101a:	2200      	movs	r2, #0
 800101c:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 800101e:	187b      	adds	r3, r7, r1
 8001020:	2280      	movs	r2, #128	; 0x80
 8001022:	02d2      	lsls	r2, r2, #11
 8001024:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8001026:	187b      	adds	r3, r7, r1
 8001028:	2280      	movs	r2, #128	; 0x80
 800102a:	03d2      	lsls	r2, r2, #15
 800102c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800102e:	187b      	adds	r3, r7, r1
 8001030:	0018      	movs	r0, r3
 8001032:	f000 fc0f 	bl	8001854 <HAL_RCC_OscConfig>
 8001036:	1e03      	subs	r3, r0, #0
 8001038:	d001      	beq.n	800103e <SystemClock_Config+0x76>
  {
    Error_Handler();
 800103a:	f000 f8b7 	bl	80011ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800103e:	003b      	movs	r3, r7
 8001040:	220f      	movs	r2, #15
 8001042:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001044:	003b      	movs	r3, r7
 8001046:	2203      	movs	r2, #3
 8001048:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800104a:	003b      	movs	r3, r7
 800104c:	2200      	movs	r2, #0
 800104e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001050:	003b      	movs	r3, r7
 8001052:	2200      	movs	r2, #0
 8001054:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001056:	003b      	movs	r3, r7
 8001058:	2200      	movs	r2, #0
 800105a:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800105c:	003b      	movs	r3, r7
 800105e:	2101      	movs	r1, #1
 8001060:	0018      	movs	r0, r3
 8001062:	f000 ff73 	bl	8001f4c <HAL_RCC_ClockConfig>
 8001066:	1e03      	subs	r3, r0, #0
 8001068:	d001      	beq.n	800106e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800106a:	f000 f89f 	bl	80011ac <Error_Handler>
  }
}
 800106e:	46c0      	nop			; (mov r8, r8)
 8001070:	46bd      	mov	sp, r7
 8001072:	b013      	add	sp, #76	; 0x4c
 8001074:	bd90      	pop	{r4, r7, pc}
 8001076:	46c0      	nop			; (mov r8, r8)
 8001078:	40007000 	.word	0x40007000
 800107c:	ffffe7ff 	.word	0xffffe7ff

08001080 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b08a      	sub	sp, #40	; 0x28
 8001084:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001086:	2318      	movs	r3, #24
 8001088:	18fb      	adds	r3, r7, r3
 800108a:	0018      	movs	r0, r3
 800108c:	2310      	movs	r3, #16
 800108e:	001a      	movs	r2, r3
 8001090:	2100      	movs	r1, #0
 8001092:	f001 fe6f 	bl	8002d74 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001096:	2310      	movs	r3, #16
 8001098:	18fb      	adds	r3, r7, r3
 800109a:	0018      	movs	r0, r3
 800109c:	2308      	movs	r3, #8
 800109e:	001a      	movs	r2, r3
 80010a0:	2100      	movs	r1, #0
 80010a2:	f001 fe67 	bl	8002d74 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80010a6:	003b      	movs	r3, r7
 80010a8:	0018      	movs	r0, r3
 80010aa:	2310      	movs	r3, #16
 80010ac:	001a      	movs	r2, r3
 80010ae:	2100      	movs	r1, #0
 80010b0:	f001 fe60 	bl	8002d74 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80010b4:	4b30      	ldr	r3, [pc, #192]	; (8001178 <MX_TIM2_Init+0xf8>)
 80010b6:	2280      	movs	r2, #128	; 0x80
 80010b8:	05d2      	lsls	r2, r2, #23
 80010ba:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 10-1;
 80010bc:	4b2e      	ldr	r3, [pc, #184]	; (8001178 <MX_TIM2_Init+0xf8>)
 80010be:	2209      	movs	r2, #9
 80010c0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010c2:	4b2d      	ldr	r3, [pc, #180]	; (8001178 <MX_TIM2_Init+0xf8>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = ARR4;
 80010c8:	4b2c      	ldr	r3, [pc, #176]	; (800117c <MX_TIM2_Init+0xfc>)
 80010ca:	681a      	ldr	r2, [r3, #0]
 80010cc:	4b2a      	ldr	r3, [pc, #168]	; (8001178 <MX_TIM2_Init+0xf8>)
 80010ce:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010d0:	4b29      	ldr	r3, [pc, #164]	; (8001178 <MX_TIM2_Init+0xf8>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80010d6:	4b28      	ldr	r3, [pc, #160]	; (8001178 <MX_TIM2_Init+0xf8>)
 80010d8:	2280      	movs	r2, #128	; 0x80
 80010da:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80010dc:	4b26      	ldr	r3, [pc, #152]	; (8001178 <MX_TIM2_Init+0xf8>)
 80010de:	0018      	movs	r0, r3
 80010e0:	f001 f922 	bl	8002328 <HAL_TIM_Base_Init>
 80010e4:	1e03      	subs	r3, r0, #0
 80010e6:	d001      	beq.n	80010ec <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 80010e8:	f000 f860 	bl	80011ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010ec:	2118      	movs	r1, #24
 80010ee:	187b      	adds	r3, r7, r1
 80010f0:	2280      	movs	r2, #128	; 0x80
 80010f2:	0152      	lsls	r2, r2, #5
 80010f4:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80010f6:	187a      	adds	r2, r7, r1
 80010f8:	4b1f      	ldr	r3, [pc, #124]	; (8001178 <MX_TIM2_Init+0xf8>)
 80010fa:	0011      	movs	r1, r2
 80010fc:	0018      	movs	r0, r3
 80010fe:	f001 fae5 	bl	80026cc <HAL_TIM_ConfigClockSource>
 8001102:	1e03      	subs	r3, r0, #0
 8001104:	d001      	beq.n	800110a <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 8001106:	f000 f851 	bl	80011ac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800110a:	4b1b      	ldr	r3, [pc, #108]	; (8001178 <MX_TIM2_Init+0xf8>)
 800110c:	0018      	movs	r0, r3
 800110e:	f001 f94b 	bl	80023a8 <HAL_TIM_PWM_Init>
 8001112:	1e03      	subs	r3, r0, #0
 8001114:	d001      	beq.n	800111a <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001116:	f000 f849 	bl	80011ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800111a:	2110      	movs	r1, #16
 800111c:	187b      	adds	r3, r7, r1
 800111e:	2200      	movs	r2, #0
 8001120:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001122:	187b      	adds	r3, r7, r1
 8001124:	2200      	movs	r2, #0
 8001126:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001128:	187a      	adds	r2, r7, r1
 800112a:	4b13      	ldr	r3, [pc, #76]	; (8001178 <MX_TIM2_Init+0xf8>)
 800112c:	0011      	movs	r1, r2
 800112e:	0018      	movs	r0, r3
 8001130:	f001 fdac 	bl	8002c8c <HAL_TIMEx_MasterConfigSynchronization>
 8001134:	1e03      	subs	r3, r0, #0
 8001136:	d001      	beq.n	800113c <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 8001138:	f000 f838 	bl	80011ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800113c:	003b      	movs	r3, r7
 800113e:	2260      	movs	r2, #96	; 0x60
 8001140:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8001142:	003b      	movs	r3, r7
 8001144:	2200      	movs	r2, #0
 8001146:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001148:	003b      	movs	r3, r7
 800114a:	2200      	movs	r2, #0
 800114c:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800114e:	003b      	movs	r3, r7
 8001150:	2200      	movs	r2, #0
 8001152:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001154:	0039      	movs	r1, r7
 8001156:	4b08      	ldr	r3, [pc, #32]	; (8001178 <MX_TIM2_Init+0xf8>)
 8001158:	220c      	movs	r2, #12
 800115a:	0018      	movs	r0, r3
 800115c:	f001 f9f0 	bl	8002540 <HAL_TIM_PWM_ConfigChannel>
 8001160:	1e03      	subs	r3, r0, #0
 8001162:	d001      	beq.n	8001168 <MX_TIM2_Init+0xe8>
  {
    Error_Handler();
 8001164:	f000 f822 	bl	80011ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  //htim2.Init.Period = ARR4; //So as to get the desired frequency.
  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001168:	4b03      	ldr	r3, [pc, #12]	; (8001178 <MX_TIM2_Init+0xf8>)
 800116a:	0018      	movs	r0, r3
 800116c:	f000 f84e 	bl	800120c <HAL_TIM_MspPostInit>

}
 8001170:	46c0      	nop			; (mov r8, r8)
 8001172:	46bd      	mov	sp, r7
 8001174:	b00a      	add	sp, #40	; 0x28
 8001176:	bd80      	pop	{r7, pc}
 8001178:	20000030 	.word	0x20000030
 800117c:	20000070 	.word	0x20000070

08001180 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001186:	4b08      	ldr	r3, [pc, #32]	; (80011a8 <MX_GPIO_Init+0x28>)
 8001188:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800118a:	4b07      	ldr	r3, [pc, #28]	; (80011a8 <MX_GPIO_Init+0x28>)
 800118c:	2101      	movs	r1, #1
 800118e:	430a      	orrs	r2, r1
 8001190:	62da      	str	r2, [r3, #44]	; 0x2c
 8001192:	4b05      	ldr	r3, [pc, #20]	; (80011a8 <MX_GPIO_Init+0x28>)
 8001194:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001196:	2201      	movs	r2, #1
 8001198:	4013      	ands	r3, r2
 800119a:	607b      	str	r3, [r7, #4]
 800119c:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800119e:	46c0      	nop			; (mov r8, r8)
 80011a0:	46bd      	mov	sp, r7
 80011a2:	b002      	add	sp, #8
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	46c0      	nop			; (mov r8, r8)
 80011a8:	40021000 	.word	0x40021000

080011ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011b0:	b672      	cpsid	i
}
 80011b2:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011b4:	e7fe      	b.n	80011b4 <Error_Handler+0x8>
	...

080011b8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011bc:	4b07      	ldr	r3, [pc, #28]	; (80011dc <HAL_MspInit+0x24>)
 80011be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80011c0:	4b06      	ldr	r3, [pc, #24]	; (80011dc <HAL_MspInit+0x24>)
 80011c2:	2101      	movs	r1, #1
 80011c4:	430a      	orrs	r2, r1
 80011c6:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80011c8:	4b04      	ldr	r3, [pc, #16]	; (80011dc <HAL_MspInit+0x24>)
 80011ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80011cc:	4b03      	ldr	r3, [pc, #12]	; (80011dc <HAL_MspInit+0x24>)
 80011ce:	2180      	movs	r1, #128	; 0x80
 80011d0:	0549      	lsls	r1, r1, #21
 80011d2:	430a      	orrs	r2, r1
 80011d4:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011d6:	46c0      	nop			; (mov r8, r8)
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	40021000 	.word	0x40021000

080011e0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b082      	sub	sp, #8
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681a      	ldr	r2, [r3, #0]
 80011ec:	2380      	movs	r3, #128	; 0x80
 80011ee:	05db      	lsls	r3, r3, #23
 80011f0:	429a      	cmp	r2, r3
 80011f2:	d105      	bne.n	8001200 <HAL_TIM_Base_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80011f4:	4b04      	ldr	r3, [pc, #16]	; (8001208 <HAL_TIM_Base_MspInit+0x28>)
 80011f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80011f8:	4b03      	ldr	r3, [pc, #12]	; (8001208 <HAL_TIM_Base_MspInit+0x28>)
 80011fa:	2101      	movs	r1, #1
 80011fc:	430a      	orrs	r2, r1
 80011fe:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001200:	46c0      	nop			; (mov r8, r8)
 8001202:	46bd      	mov	sp, r7
 8001204:	b002      	add	sp, #8
 8001206:	bd80      	pop	{r7, pc}
 8001208:	40021000 	.word	0x40021000

0800120c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800120c:	b590      	push	{r4, r7, lr}
 800120e:	b089      	sub	sp, #36	; 0x24
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001214:	240c      	movs	r4, #12
 8001216:	193b      	adds	r3, r7, r4
 8001218:	0018      	movs	r0, r3
 800121a:	2314      	movs	r3, #20
 800121c:	001a      	movs	r2, r3
 800121e:	2100      	movs	r1, #0
 8001220:	f001 fda8 	bl	8002d74 <memset>
  if(htim->Instance==TIM2)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681a      	ldr	r2, [r3, #0]
 8001228:	2380      	movs	r3, #128	; 0x80
 800122a:	05db      	lsls	r3, r3, #23
 800122c:	429a      	cmp	r2, r3
 800122e:	d122      	bne.n	8001276 <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001230:	4b13      	ldr	r3, [pc, #76]	; (8001280 <HAL_TIM_MspPostInit+0x74>)
 8001232:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001234:	4b12      	ldr	r3, [pc, #72]	; (8001280 <HAL_TIM_MspPostInit+0x74>)
 8001236:	2101      	movs	r1, #1
 8001238:	430a      	orrs	r2, r1
 800123a:	62da      	str	r2, [r3, #44]	; 0x2c
 800123c:	4b10      	ldr	r3, [pc, #64]	; (8001280 <HAL_TIM_MspPostInit+0x74>)
 800123e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001240:	2201      	movs	r2, #1
 8001242:	4013      	ands	r3, r2
 8001244:	60bb      	str	r3, [r7, #8]
 8001246:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001248:	0021      	movs	r1, r4
 800124a:	187b      	adds	r3, r7, r1
 800124c:	2208      	movs	r2, #8
 800124e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001250:	187b      	adds	r3, r7, r1
 8001252:	2202      	movs	r2, #2
 8001254:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001256:	187b      	adds	r3, r7, r1
 8001258:	2200      	movs	r2, #0
 800125a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800125c:	187b      	adds	r3, r7, r1
 800125e:	2200      	movs	r2, #0
 8001260:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8001262:	187b      	adds	r3, r7, r1
 8001264:	2202      	movs	r2, #2
 8001266:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001268:	187a      	adds	r2, r7, r1
 800126a:	23a0      	movs	r3, #160	; 0xa0
 800126c:	05db      	lsls	r3, r3, #23
 800126e:	0011      	movs	r1, r2
 8001270:	0018      	movs	r0, r3
 8001272:	f000 f989 	bl	8001588 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001276:	46c0      	nop			; (mov r8, r8)
 8001278:	46bd      	mov	sp, r7
 800127a:	b009      	add	sp, #36	; 0x24
 800127c:	bd90      	pop	{r4, r7, pc}
 800127e:	46c0      	nop			; (mov r8, r8)
 8001280:	40021000 	.word	0x40021000

08001284 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001288:	e7fe      	b.n	8001288 <NMI_Handler+0x4>

0800128a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800128a:	b580      	push	{r7, lr}
 800128c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800128e:	e7fe      	b.n	800128e <HardFault_Handler+0x4>

08001290 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001294:	46c0      	nop			; (mov r8, r8)
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}

0800129a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800129a:	b580      	push	{r7, lr}
 800129c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800129e:	46c0      	nop			; (mov r8, r8)
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}

080012a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012a8:	f000 f89e 	bl	80013e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012ac:	46c0      	nop			; (mov r8, r8)
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}

080012b2 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80012b2:	b580      	push	{r7, lr}
 80012b4:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012b6:	46c0      	nop			; (mov r8, r8)
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}

080012bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 80012bc:	4813      	ldr	r0, [pc, #76]	; (800130c <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 80012be:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80012c0:	f7ff fff7 	bl	80012b2 <SystemInit>

/*Check if boot space corresponds to system memory*/

    LDR R0,=0x00000004
 80012c4:	4812      	ldr	r0, [pc, #72]	; (8001310 <LoopForever+0x6>)
    LDR R1, [R0]
 80012c6:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 80012c8:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 80012ca:	4a12      	ldr	r2, [pc, #72]	; (8001314 <LoopForever+0xa>)
    CMP R1, R2
 80012cc:	4291      	cmp	r1, r2
    BNE ApplicationStart
 80012ce:	d105      	bne.n	80012dc <ApplicationStart>

 /*SYSCFG clock enable*/
    LDR R0,=0x40021034
 80012d0:	4811      	ldr	r0, [pc, #68]	; (8001318 <LoopForever+0xe>)
    LDR R1,=0x00000001
 80012d2:	4912      	ldr	r1, [pc, #72]	; (800131c <LoopForever+0x12>)
    STR R1, [R0]
 80012d4:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 80012d6:	4812      	ldr	r0, [pc, #72]	; (8001320 <LoopForever+0x16>)
    LDR R1,=0x00000000
 80012d8:	4912      	ldr	r1, [pc, #72]	; (8001324 <LoopForever+0x1a>)
    STR R1, [R0]
 80012da:	6001      	str	r1, [r0, #0]

080012dc <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012dc:	4812      	ldr	r0, [pc, #72]	; (8001328 <LoopForever+0x1e>)
  ldr r1, =_edata
 80012de:	4913      	ldr	r1, [pc, #76]	; (800132c <LoopForever+0x22>)
  ldr r2, =_sidata
 80012e0:	4a13      	ldr	r2, [pc, #76]	; (8001330 <LoopForever+0x26>)
  movs r3, #0
 80012e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012e4:	e002      	b.n	80012ec <LoopCopyDataInit>

080012e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012ea:	3304      	adds	r3, #4

080012ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012f0:	d3f9      	bcc.n	80012e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012f2:	4a10      	ldr	r2, [pc, #64]	; (8001334 <LoopForever+0x2a>)
  ldr r4, =_ebss
 80012f4:	4c10      	ldr	r4, [pc, #64]	; (8001338 <LoopForever+0x2e>)
  movs r3, #0
 80012f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012f8:	e001      	b.n	80012fe <LoopFillZerobss>

080012fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012fc:	3204      	adds	r2, #4

080012fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001300:	d3fb      	bcc.n	80012fa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001302:	f001 fd13 	bl	8002d2c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001306:	f7ff fe1f 	bl	8000f48 <main>

0800130a <LoopForever>:

LoopForever:
    b LoopForever
 800130a:	e7fe      	b.n	800130a <LoopForever>
   ldr   r0, =_estack
 800130c:	20000800 	.word	0x20000800
    LDR R0,=0x00000004
 8001310:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8001314:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021034
 8001318:	40021034 	.word	0x40021034
    LDR R1,=0x00000001
 800131c:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8001320:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8001324:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8001328:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800132c:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8001330:	08002e88 	.word	0x08002e88
  ldr r2, =_sbss
 8001334:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8001338:	20000078 	.word	0x20000078

0800133c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800133c:	e7fe      	b.n	800133c <ADC1_COMP_IRQHandler>
	...

08001340 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b082      	sub	sp, #8
 8001344:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001346:	1dfb      	adds	r3, r7, #7
 8001348:	2200      	movs	r2, #0
 800134a:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 800134c:	4b0b      	ldr	r3, [pc, #44]	; (800137c <HAL_Init+0x3c>)
 800134e:	681a      	ldr	r2, [r3, #0]
 8001350:	4b0a      	ldr	r3, [pc, #40]	; (800137c <HAL_Init+0x3c>)
 8001352:	2140      	movs	r1, #64	; 0x40
 8001354:	430a      	orrs	r2, r1
 8001356:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001358:	2003      	movs	r0, #3
 800135a:	f000 f811 	bl	8001380 <HAL_InitTick>
 800135e:	1e03      	subs	r3, r0, #0
 8001360:	d003      	beq.n	800136a <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8001362:	1dfb      	adds	r3, r7, #7
 8001364:	2201      	movs	r2, #1
 8001366:	701a      	strb	r2, [r3, #0]
 8001368:	e001      	b.n	800136e <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800136a:	f7ff ff25 	bl	80011b8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800136e:	1dfb      	adds	r3, r7, #7
 8001370:	781b      	ldrb	r3, [r3, #0]
}
 8001372:	0018      	movs	r0, r3
 8001374:	46bd      	mov	sp, r7
 8001376:	b002      	add	sp, #8
 8001378:	bd80      	pop	{r7, pc}
 800137a:	46c0      	nop			; (mov r8, r8)
 800137c:	40022000 	.word	0x40022000

08001380 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001380:	b590      	push	{r4, r7, lr}
 8001382:	b083      	sub	sp, #12
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001388:	4b14      	ldr	r3, [pc, #80]	; (80013dc <HAL_InitTick+0x5c>)
 800138a:	681c      	ldr	r4, [r3, #0]
 800138c:	4b14      	ldr	r3, [pc, #80]	; (80013e0 <HAL_InitTick+0x60>)
 800138e:	781b      	ldrb	r3, [r3, #0]
 8001390:	0019      	movs	r1, r3
 8001392:	23fa      	movs	r3, #250	; 0xfa
 8001394:	0098      	lsls	r0, r3, #2
 8001396:	f7fe feb7 	bl	8000108 <__udivsi3>
 800139a:	0003      	movs	r3, r0
 800139c:	0019      	movs	r1, r3
 800139e:	0020      	movs	r0, r4
 80013a0:	f7fe feb2 	bl	8000108 <__udivsi3>
 80013a4:	0003      	movs	r3, r0
 80013a6:	0018      	movs	r0, r3
 80013a8:	f000 f8e1 	bl	800156e <HAL_SYSTICK_Config>
 80013ac:	1e03      	subs	r3, r0, #0
 80013ae:	d001      	beq.n	80013b4 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80013b0:	2301      	movs	r3, #1
 80013b2:	e00f      	b.n	80013d4 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2b03      	cmp	r3, #3
 80013b8:	d80b      	bhi.n	80013d2 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013ba:	6879      	ldr	r1, [r7, #4]
 80013bc:	2301      	movs	r3, #1
 80013be:	425b      	negs	r3, r3
 80013c0:	2200      	movs	r2, #0
 80013c2:	0018      	movs	r0, r3
 80013c4:	f000 f8be 	bl	8001544 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013c8:	4b06      	ldr	r3, [pc, #24]	; (80013e4 <HAL_InitTick+0x64>)
 80013ca:	687a      	ldr	r2, [r7, #4]
 80013cc:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013ce:	2300      	movs	r3, #0
 80013d0:	e000      	b.n	80013d4 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80013d2:	2301      	movs	r3, #1
}
 80013d4:	0018      	movs	r0, r3
 80013d6:	46bd      	mov	sp, r7
 80013d8:	b003      	add	sp, #12
 80013da:	bd90      	pop	{r4, r7, pc}
 80013dc:	20000008 	.word	0x20000008
 80013e0:	20000010 	.word	0x20000010
 80013e4:	2000000c 	.word	0x2000000c

080013e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013ec:	4b05      	ldr	r3, [pc, #20]	; (8001404 <HAL_IncTick+0x1c>)
 80013ee:	781b      	ldrb	r3, [r3, #0]
 80013f0:	001a      	movs	r2, r3
 80013f2:	4b05      	ldr	r3, [pc, #20]	; (8001408 <HAL_IncTick+0x20>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	18d2      	adds	r2, r2, r3
 80013f8:	4b03      	ldr	r3, [pc, #12]	; (8001408 <HAL_IncTick+0x20>)
 80013fa:	601a      	str	r2, [r3, #0]
}
 80013fc:	46c0      	nop			; (mov r8, r8)
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
 8001402:	46c0      	nop			; (mov r8, r8)
 8001404:	20000010 	.word	0x20000010
 8001408:	20000074 	.word	0x20000074

0800140c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	af00      	add	r7, sp, #0
  return uwTick;
 8001410:	4b02      	ldr	r3, [pc, #8]	; (800141c <HAL_GetTick+0x10>)
 8001412:	681b      	ldr	r3, [r3, #0]
}
 8001414:	0018      	movs	r0, r3
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}
 800141a:	46c0      	nop			; (mov r8, r8)
 800141c:	20000074 	.word	0x20000074

08001420 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001420:	b590      	push	{r4, r7, lr}
 8001422:	b083      	sub	sp, #12
 8001424:	af00      	add	r7, sp, #0
 8001426:	0002      	movs	r2, r0
 8001428:	6039      	str	r1, [r7, #0]
 800142a:	1dfb      	adds	r3, r7, #7
 800142c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800142e:	1dfb      	adds	r3, r7, #7
 8001430:	781b      	ldrb	r3, [r3, #0]
 8001432:	2b7f      	cmp	r3, #127	; 0x7f
 8001434:	d828      	bhi.n	8001488 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001436:	4a2f      	ldr	r2, [pc, #188]	; (80014f4 <__NVIC_SetPriority+0xd4>)
 8001438:	1dfb      	adds	r3, r7, #7
 800143a:	781b      	ldrb	r3, [r3, #0]
 800143c:	b25b      	sxtb	r3, r3
 800143e:	089b      	lsrs	r3, r3, #2
 8001440:	33c0      	adds	r3, #192	; 0xc0
 8001442:	009b      	lsls	r3, r3, #2
 8001444:	589b      	ldr	r3, [r3, r2]
 8001446:	1dfa      	adds	r2, r7, #7
 8001448:	7812      	ldrb	r2, [r2, #0]
 800144a:	0011      	movs	r1, r2
 800144c:	2203      	movs	r2, #3
 800144e:	400a      	ands	r2, r1
 8001450:	00d2      	lsls	r2, r2, #3
 8001452:	21ff      	movs	r1, #255	; 0xff
 8001454:	4091      	lsls	r1, r2
 8001456:	000a      	movs	r2, r1
 8001458:	43d2      	mvns	r2, r2
 800145a:	401a      	ands	r2, r3
 800145c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	019b      	lsls	r3, r3, #6
 8001462:	22ff      	movs	r2, #255	; 0xff
 8001464:	401a      	ands	r2, r3
 8001466:	1dfb      	adds	r3, r7, #7
 8001468:	781b      	ldrb	r3, [r3, #0]
 800146a:	0018      	movs	r0, r3
 800146c:	2303      	movs	r3, #3
 800146e:	4003      	ands	r3, r0
 8001470:	00db      	lsls	r3, r3, #3
 8001472:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001474:	481f      	ldr	r0, [pc, #124]	; (80014f4 <__NVIC_SetPriority+0xd4>)
 8001476:	1dfb      	adds	r3, r7, #7
 8001478:	781b      	ldrb	r3, [r3, #0]
 800147a:	b25b      	sxtb	r3, r3
 800147c:	089b      	lsrs	r3, r3, #2
 800147e:	430a      	orrs	r2, r1
 8001480:	33c0      	adds	r3, #192	; 0xc0
 8001482:	009b      	lsls	r3, r3, #2
 8001484:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001486:	e031      	b.n	80014ec <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001488:	4a1b      	ldr	r2, [pc, #108]	; (80014f8 <__NVIC_SetPriority+0xd8>)
 800148a:	1dfb      	adds	r3, r7, #7
 800148c:	781b      	ldrb	r3, [r3, #0]
 800148e:	0019      	movs	r1, r3
 8001490:	230f      	movs	r3, #15
 8001492:	400b      	ands	r3, r1
 8001494:	3b08      	subs	r3, #8
 8001496:	089b      	lsrs	r3, r3, #2
 8001498:	3306      	adds	r3, #6
 800149a:	009b      	lsls	r3, r3, #2
 800149c:	18d3      	adds	r3, r2, r3
 800149e:	3304      	adds	r3, #4
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	1dfa      	adds	r2, r7, #7
 80014a4:	7812      	ldrb	r2, [r2, #0]
 80014a6:	0011      	movs	r1, r2
 80014a8:	2203      	movs	r2, #3
 80014aa:	400a      	ands	r2, r1
 80014ac:	00d2      	lsls	r2, r2, #3
 80014ae:	21ff      	movs	r1, #255	; 0xff
 80014b0:	4091      	lsls	r1, r2
 80014b2:	000a      	movs	r2, r1
 80014b4:	43d2      	mvns	r2, r2
 80014b6:	401a      	ands	r2, r3
 80014b8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	019b      	lsls	r3, r3, #6
 80014be:	22ff      	movs	r2, #255	; 0xff
 80014c0:	401a      	ands	r2, r3
 80014c2:	1dfb      	adds	r3, r7, #7
 80014c4:	781b      	ldrb	r3, [r3, #0]
 80014c6:	0018      	movs	r0, r3
 80014c8:	2303      	movs	r3, #3
 80014ca:	4003      	ands	r3, r0
 80014cc:	00db      	lsls	r3, r3, #3
 80014ce:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80014d0:	4809      	ldr	r0, [pc, #36]	; (80014f8 <__NVIC_SetPriority+0xd8>)
 80014d2:	1dfb      	adds	r3, r7, #7
 80014d4:	781b      	ldrb	r3, [r3, #0]
 80014d6:	001c      	movs	r4, r3
 80014d8:	230f      	movs	r3, #15
 80014da:	4023      	ands	r3, r4
 80014dc:	3b08      	subs	r3, #8
 80014de:	089b      	lsrs	r3, r3, #2
 80014e0:	430a      	orrs	r2, r1
 80014e2:	3306      	adds	r3, #6
 80014e4:	009b      	lsls	r3, r3, #2
 80014e6:	18c3      	adds	r3, r0, r3
 80014e8:	3304      	adds	r3, #4
 80014ea:	601a      	str	r2, [r3, #0]
}
 80014ec:	46c0      	nop			; (mov r8, r8)
 80014ee:	46bd      	mov	sp, r7
 80014f0:	b003      	add	sp, #12
 80014f2:	bd90      	pop	{r4, r7, pc}
 80014f4:	e000e100 	.word	0xe000e100
 80014f8:	e000ed00 	.word	0xe000ed00

080014fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b082      	sub	sp, #8
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	1e5a      	subs	r2, r3, #1
 8001508:	2380      	movs	r3, #128	; 0x80
 800150a:	045b      	lsls	r3, r3, #17
 800150c:	429a      	cmp	r2, r3
 800150e:	d301      	bcc.n	8001514 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001510:	2301      	movs	r3, #1
 8001512:	e010      	b.n	8001536 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001514:	4b0a      	ldr	r3, [pc, #40]	; (8001540 <SysTick_Config+0x44>)
 8001516:	687a      	ldr	r2, [r7, #4]
 8001518:	3a01      	subs	r2, #1
 800151a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800151c:	2301      	movs	r3, #1
 800151e:	425b      	negs	r3, r3
 8001520:	2103      	movs	r1, #3
 8001522:	0018      	movs	r0, r3
 8001524:	f7ff ff7c 	bl	8001420 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001528:	4b05      	ldr	r3, [pc, #20]	; (8001540 <SysTick_Config+0x44>)
 800152a:	2200      	movs	r2, #0
 800152c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800152e:	4b04      	ldr	r3, [pc, #16]	; (8001540 <SysTick_Config+0x44>)
 8001530:	2207      	movs	r2, #7
 8001532:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001534:	2300      	movs	r3, #0
}
 8001536:	0018      	movs	r0, r3
 8001538:	46bd      	mov	sp, r7
 800153a:	b002      	add	sp, #8
 800153c:	bd80      	pop	{r7, pc}
 800153e:	46c0      	nop			; (mov r8, r8)
 8001540:	e000e010 	.word	0xe000e010

08001544 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001544:	b580      	push	{r7, lr}
 8001546:	b084      	sub	sp, #16
 8001548:	af00      	add	r7, sp, #0
 800154a:	60b9      	str	r1, [r7, #8]
 800154c:	607a      	str	r2, [r7, #4]
 800154e:	210f      	movs	r1, #15
 8001550:	187b      	adds	r3, r7, r1
 8001552:	1c02      	adds	r2, r0, #0
 8001554:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001556:	68ba      	ldr	r2, [r7, #8]
 8001558:	187b      	adds	r3, r7, r1
 800155a:	781b      	ldrb	r3, [r3, #0]
 800155c:	b25b      	sxtb	r3, r3
 800155e:	0011      	movs	r1, r2
 8001560:	0018      	movs	r0, r3
 8001562:	f7ff ff5d 	bl	8001420 <__NVIC_SetPriority>
}
 8001566:	46c0      	nop			; (mov r8, r8)
 8001568:	46bd      	mov	sp, r7
 800156a:	b004      	add	sp, #16
 800156c:	bd80      	pop	{r7, pc}

0800156e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800156e:	b580      	push	{r7, lr}
 8001570:	b082      	sub	sp, #8
 8001572:	af00      	add	r7, sp, #0
 8001574:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	0018      	movs	r0, r3
 800157a:	f7ff ffbf 	bl	80014fc <SysTick_Config>
 800157e:	0003      	movs	r3, r0
}
 8001580:	0018      	movs	r0, r3
 8001582:	46bd      	mov	sp, r7
 8001584:	b002      	add	sp, #8
 8001586:	bd80      	pop	{r7, pc}

08001588 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b086      	sub	sp, #24
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
 8001590:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001592:	2300      	movs	r3, #0
 8001594:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001596:	2300      	movs	r3, #0
 8001598:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800159a:	2300      	movs	r3, #0
 800159c:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800159e:	e143      	b.n	8001828 <HAL_GPIO_Init+0x2a0>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	2101      	movs	r1, #1
 80015a6:	697a      	ldr	r2, [r7, #20]
 80015a8:	4091      	lsls	r1, r2
 80015aa:	000a      	movs	r2, r1
 80015ac:	4013      	ands	r3, r2
 80015ae:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d100      	bne.n	80015b8 <HAL_GPIO_Init+0x30>
 80015b6:	e134      	b.n	8001822 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	2203      	movs	r2, #3
 80015be:	4013      	ands	r3, r2
 80015c0:	2b01      	cmp	r3, #1
 80015c2:	d005      	beq.n	80015d0 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	2203      	movs	r2, #3
 80015ca:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80015cc:	2b02      	cmp	r3, #2
 80015ce:	d130      	bne.n	8001632 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	689b      	ldr	r3, [r3, #8]
 80015d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80015d6:	697b      	ldr	r3, [r7, #20]
 80015d8:	005b      	lsls	r3, r3, #1
 80015da:	2203      	movs	r2, #3
 80015dc:	409a      	lsls	r2, r3
 80015de:	0013      	movs	r3, r2
 80015e0:	43da      	mvns	r2, r3
 80015e2:	693b      	ldr	r3, [r7, #16]
 80015e4:	4013      	ands	r3, r2
 80015e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	68da      	ldr	r2, [r3, #12]
 80015ec:	697b      	ldr	r3, [r7, #20]
 80015ee:	005b      	lsls	r3, r3, #1
 80015f0:	409a      	lsls	r2, r3
 80015f2:	0013      	movs	r3, r2
 80015f4:	693a      	ldr	r2, [r7, #16]
 80015f6:	4313      	orrs	r3, r2
 80015f8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	693a      	ldr	r2, [r7, #16]
 80015fe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001606:	2201      	movs	r2, #1
 8001608:	697b      	ldr	r3, [r7, #20]
 800160a:	409a      	lsls	r2, r3
 800160c:	0013      	movs	r3, r2
 800160e:	43da      	mvns	r2, r3
 8001610:	693b      	ldr	r3, [r7, #16]
 8001612:	4013      	ands	r3, r2
 8001614:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	091b      	lsrs	r3, r3, #4
 800161c:	2201      	movs	r2, #1
 800161e:	401a      	ands	r2, r3
 8001620:	697b      	ldr	r3, [r7, #20]
 8001622:	409a      	lsls	r2, r3
 8001624:	0013      	movs	r3, r2
 8001626:	693a      	ldr	r2, [r7, #16]
 8001628:	4313      	orrs	r3, r2
 800162a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	693a      	ldr	r2, [r7, #16]
 8001630:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	2203      	movs	r2, #3
 8001638:	4013      	ands	r3, r2
 800163a:	2b03      	cmp	r3, #3
 800163c:	d017      	beq.n	800166e <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	68db      	ldr	r3, [r3, #12]
 8001642:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001644:	697b      	ldr	r3, [r7, #20]
 8001646:	005b      	lsls	r3, r3, #1
 8001648:	2203      	movs	r2, #3
 800164a:	409a      	lsls	r2, r3
 800164c:	0013      	movs	r3, r2
 800164e:	43da      	mvns	r2, r3
 8001650:	693b      	ldr	r3, [r7, #16]
 8001652:	4013      	ands	r3, r2
 8001654:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	689a      	ldr	r2, [r3, #8]
 800165a:	697b      	ldr	r3, [r7, #20]
 800165c:	005b      	lsls	r3, r3, #1
 800165e:	409a      	lsls	r2, r3
 8001660:	0013      	movs	r3, r2
 8001662:	693a      	ldr	r2, [r7, #16]
 8001664:	4313      	orrs	r3, r2
 8001666:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	693a      	ldr	r2, [r7, #16]
 800166c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	2203      	movs	r2, #3
 8001674:	4013      	ands	r3, r2
 8001676:	2b02      	cmp	r3, #2
 8001678:	d123      	bne.n	80016c2 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800167a:	697b      	ldr	r3, [r7, #20]
 800167c:	08da      	lsrs	r2, r3, #3
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	3208      	adds	r2, #8
 8001682:	0092      	lsls	r2, r2, #2
 8001684:	58d3      	ldr	r3, [r2, r3]
 8001686:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8001688:	697b      	ldr	r3, [r7, #20]
 800168a:	2207      	movs	r2, #7
 800168c:	4013      	ands	r3, r2
 800168e:	009b      	lsls	r3, r3, #2
 8001690:	220f      	movs	r2, #15
 8001692:	409a      	lsls	r2, r3
 8001694:	0013      	movs	r3, r2
 8001696:	43da      	mvns	r2, r3
 8001698:	693b      	ldr	r3, [r7, #16]
 800169a:	4013      	ands	r3, r2
 800169c:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	691a      	ldr	r2, [r3, #16]
 80016a2:	697b      	ldr	r3, [r7, #20]
 80016a4:	2107      	movs	r1, #7
 80016a6:	400b      	ands	r3, r1
 80016a8:	009b      	lsls	r3, r3, #2
 80016aa:	409a      	lsls	r2, r3
 80016ac:	0013      	movs	r3, r2
 80016ae:	693a      	ldr	r2, [r7, #16]
 80016b0:	4313      	orrs	r3, r2
 80016b2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80016b4:	697b      	ldr	r3, [r7, #20]
 80016b6:	08da      	lsrs	r2, r3, #3
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	3208      	adds	r2, #8
 80016bc:	0092      	lsls	r2, r2, #2
 80016be:	6939      	ldr	r1, [r7, #16]
 80016c0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80016c8:	697b      	ldr	r3, [r7, #20]
 80016ca:	005b      	lsls	r3, r3, #1
 80016cc:	2203      	movs	r2, #3
 80016ce:	409a      	lsls	r2, r3
 80016d0:	0013      	movs	r3, r2
 80016d2:	43da      	mvns	r2, r3
 80016d4:	693b      	ldr	r3, [r7, #16]
 80016d6:	4013      	ands	r3, r2
 80016d8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	2203      	movs	r2, #3
 80016e0:	401a      	ands	r2, r3
 80016e2:	697b      	ldr	r3, [r7, #20]
 80016e4:	005b      	lsls	r3, r3, #1
 80016e6:	409a      	lsls	r2, r3
 80016e8:	0013      	movs	r3, r2
 80016ea:	693a      	ldr	r2, [r7, #16]
 80016ec:	4313      	orrs	r3, r2
 80016ee:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	693a      	ldr	r2, [r7, #16]
 80016f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	685a      	ldr	r2, [r3, #4]
 80016fa:	23c0      	movs	r3, #192	; 0xc0
 80016fc:	029b      	lsls	r3, r3, #10
 80016fe:	4013      	ands	r3, r2
 8001700:	d100      	bne.n	8001704 <HAL_GPIO_Init+0x17c>
 8001702:	e08e      	b.n	8001822 <HAL_GPIO_Init+0x29a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001704:	4b4e      	ldr	r3, [pc, #312]	; (8001840 <HAL_GPIO_Init+0x2b8>)
 8001706:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001708:	4b4d      	ldr	r3, [pc, #308]	; (8001840 <HAL_GPIO_Init+0x2b8>)
 800170a:	2101      	movs	r1, #1
 800170c:	430a      	orrs	r2, r1
 800170e:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8001710:	4a4c      	ldr	r2, [pc, #304]	; (8001844 <HAL_GPIO_Init+0x2bc>)
 8001712:	697b      	ldr	r3, [r7, #20]
 8001714:	089b      	lsrs	r3, r3, #2
 8001716:	3302      	adds	r3, #2
 8001718:	009b      	lsls	r3, r3, #2
 800171a:	589b      	ldr	r3, [r3, r2]
 800171c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 800171e:	697b      	ldr	r3, [r7, #20]
 8001720:	2203      	movs	r2, #3
 8001722:	4013      	ands	r3, r2
 8001724:	009b      	lsls	r3, r3, #2
 8001726:	220f      	movs	r2, #15
 8001728:	409a      	lsls	r2, r3
 800172a:	0013      	movs	r3, r2
 800172c:	43da      	mvns	r2, r3
 800172e:	693b      	ldr	r3, [r7, #16]
 8001730:	4013      	ands	r3, r2
 8001732:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001734:	687a      	ldr	r2, [r7, #4]
 8001736:	23a0      	movs	r3, #160	; 0xa0
 8001738:	05db      	lsls	r3, r3, #23
 800173a:	429a      	cmp	r2, r3
 800173c:	d00d      	beq.n	800175a <HAL_GPIO_Init+0x1d2>
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	4a41      	ldr	r2, [pc, #260]	; (8001848 <HAL_GPIO_Init+0x2c0>)
 8001742:	4293      	cmp	r3, r2
 8001744:	d007      	beq.n	8001756 <HAL_GPIO_Init+0x1ce>
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	4a40      	ldr	r2, [pc, #256]	; (800184c <HAL_GPIO_Init+0x2c4>)
 800174a:	4293      	cmp	r3, r2
 800174c:	d101      	bne.n	8001752 <HAL_GPIO_Init+0x1ca>
 800174e:	2302      	movs	r3, #2
 8001750:	e004      	b.n	800175c <HAL_GPIO_Init+0x1d4>
 8001752:	2306      	movs	r3, #6
 8001754:	e002      	b.n	800175c <HAL_GPIO_Init+0x1d4>
 8001756:	2301      	movs	r3, #1
 8001758:	e000      	b.n	800175c <HAL_GPIO_Init+0x1d4>
 800175a:	2300      	movs	r3, #0
 800175c:	697a      	ldr	r2, [r7, #20]
 800175e:	2103      	movs	r1, #3
 8001760:	400a      	ands	r2, r1
 8001762:	0092      	lsls	r2, r2, #2
 8001764:	4093      	lsls	r3, r2
 8001766:	693a      	ldr	r2, [r7, #16]
 8001768:	4313      	orrs	r3, r2
 800176a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800176c:	4935      	ldr	r1, [pc, #212]	; (8001844 <HAL_GPIO_Init+0x2bc>)
 800176e:	697b      	ldr	r3, [r7, #20]
 8001770:	089b      	lsrs	r3, r3, #2
 8001772:	3302      	adds	r3, #2
 8001774:	009b      	lsls	r3, r3, #2
 8001776:	693a      	ldr	r2, [r7, #16]
 8001778:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800177a:	4b35      	ldr	r3, [pc, #212]	; (8001850 <HAL_GPIO_Init+0x2c8>)
 800177c:	689b      	ldr	r3, [r3, #8]
 800177e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	43da      	mvns	r2, r3
 8001784:	693b      	ldr	r3, [r7, #16]
 8001786:	4013      	ands	r3, r2
 8001788:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	685a      	ldr	r2, [r3, #4]
 800178e:	2380      	movs	r3, #128	; 0x80
 8001790:	035b      	lsls	r3, r3, #13
 8001792:	4013      	ands	r3, r2
 8001794:	d003      	beq.n	800179e <HAL_GPIO_Init+0x216>
        {
          temp |= iocurrent;
 8001796:	693a      	ldr	r2, [r7, #16]
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	4313      	orrs	r3, r2
 800179c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800179e:	4b2c      	ldr	r3, [pc, #176]	; (8001850 <HAL_GPIO_Init+0x2c8>)
 80017a0:	693a      	ldr	r2, [r7, #16]
 80017a2:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80017a4:	4b2a      	ldr	r3, [pc, #168]	; (8001850 <HAL_GPIO_Init+0x2c8>)
 80017a6:	68db      	ldr	r3, [r3, #12]
 80017a8:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	43da      	mvns	r2, r3
 80017ae:	693b      	ldr	r3, [r7, #16]
 80017b0:	4013      	ands	r3, r2
 80017b2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	685a      	ldr	r2, [r3, #4]
 80017b8:	2380      	movs	r3, #128	; 0x80
 80017ba:	039b      	lsls	r3, r3, #14
 80017bc:	4013      	ands	r3, r2
 80017be:	d003      	beq.n	80017c8 <HAL_GPIO_Init+0x240>
        {
          temp |= iocurrent;
 80017c0:	693a      	ldr	r2, [r7, #16]
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	4313      	orrs	r3, r2
 80017c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80017c8:	4b21      	ldr	r3, [pc, #132]	; (8001850 <HAL_GPIO_Init+0x2c8>)
 80017ca:	693a      	ldr	r2, [r7, #16]
 80017cc:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 80017ce:	4b20      	ldr	r3, [pc, #128]	; (8001850 <HAL_GPIO_Init+0x2c8>)
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	43da      	mvns	r2, r3
 80017d8:	693b      	ldr	r3, [r7, #16]
 80017da:	4013      	ands	r3, r2
 80017dc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	685a      	ldr	r2, [r3, #4]
 80017e2:	2380      	movs	r3, #128	; 0x80
 80017e4:	029b      	lsls	r3, r3, #10
 80017e6:	4013      	ands	r3, r2
 80017e8:	d003      	beq.n	80017f2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80017ea:	693a      	ldr	r2, [r7, #16]
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	4313      	orrs	r3, r2
 80017f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80017f2:	4b17      	ldr	r3, [pc, #92]	; (8001850 <HAL_GPIO_Init+0x2c8>)
 80017f4:	693a      	ldr	r2, [r7, #16]
 80017f6:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80017f8:	4b15      	ldr	r3, [pc, #84]	; (8001850 <HAL_GPIO_Init+0x2c8>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	43da      	mvns	r2, r3
 8001802:	693b      	ldr	r3, [r7, #16]
 8001804:	4013      	ands	r3, r2
 8001806:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	685a      	ldr	r2, [r3, #4]
 800180c:	2380      	movs	r3, #128	; 0x80
 800180e:	025b      	lsls	r3, r3, #9
 8001810:	4013      	ands	r3, r2
 8001812:	d003      	beq.n	800181c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001814:	693a      	ldr	r2, [r7, #16]
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	4313      	orrs	r3, r2
 800181a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800181c:	4b0c      	ldr	r3, [pc, #48]	; (8001850 <HAL_GPIO_Init+0x2c8>)
 800181e:	693a      	ldr	r2, [r7, #16]
 8001820:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8001822:	697b      	ldr	r3, [r7, #20]
 8001824:	3301      	adds	r3, #1
 8001826:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	681a      	ldr	r2, [r3, #0]
 800182c:	697b      	ldr	r3, [r7, #20]
 800182e:	40da      	lsrs	r2, r3
 8001830:	1e13      	subs	r3, r2, #0
 8001832:	d000      	beq.n	8001836 <HAL_GPIO_Init+0x2ae>
 8001834:	e6b4      	b.n	80015a0 <HAL_GPIO_Init+0x18>
  }
}
 8001836:	46c0      	nop			; (mov r8, r8)
 8001838:	46c0      	nop			; (mov r8, r8)
 800183a:	46bd      	mov	sp, r7
 800183c:	b006      	add	sp, #24
 800183e:	bd80      	pop	{r7, pc}
 8001840:	40021000 	.word	0x40021000
 8001844:	40010000 	.word	0x40010000
 8001848:	50000400 	.word	0x50000400
 800184c:	50000800 	.word	0x50000800
 8001850:	40010400 	.word	0x40010400

08001854 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001854:	b5b0      	push	{r4, r5, r7, lr}
 8001856:	b08a      	sub	sp, #40	; 0x28
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	2b00      	cmp	r3, #0
 8001860:	d102      	bne.n	8001868 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001862:	2301      	movs	r3, #1
 8001864:	f000 fb6c 	bl	8001f40 <HAL_RCC_OscConfig+0x6ec>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001868:	4bc8      	ldr	r3, [pc, #800]	; (8001b8c <HAL_RCC_OscConfig+0x338>)
 800186a:	68db      	ldr	r3, [r3, #12]
 800186c:	220c      	movs	r2, #12
 800186e:	4013      	ands	r3, r2
 8001870:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001872:	4bc6      	ldr	r3, [pc, #792]	; (8001b8c <HAL_RCC_OscConfig+0x338>)
 8001874:	68da      	ldr	r2, [r3, #12]
 8001876:	2380      	movs	r3, #128	; 0x80
 8001878:	025b      	lsls	r3, r3, #9
 800187a:	4013      	ands	r3, r2
 800187c:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	2201      	movs	r2, #1
 8001884:	4013      	ands	r3, r2
 8001886:	d100      	bne.n	800188a <HAL_RCC_OscConfig+0x36>
 8001888:	e07d      	b.n	8001986 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800188a:	69fb      	ldr	r3, [r7, #28]
 800188c:	2b08      	cmp	r3, #8
 800188e:	d007      	beq.n	80018a0 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001890:	69fb      	ldr	r3, [r7, #28]
 8001892:	2b0c      	cmp	r3, #12
 8001894:	d112      	bne.n	80018bc <HAL_RCC_OscConfig+0x68>
 8001896:	69ba      	ldr	r2, [r7, #24]
 8001898:	2380      	movs	r3, #128	; 0x80
 800189a:	025b      	lsls	r3, r3, #9
 800189c:	429a      	cmp	r2, r3
 800189e:	d10d      	bne.n	80018bc <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018a0:	4bba      	ldr	r3, [pc, #744]	; (8001b8c <HAL_RCC_OscConfig+0x338>)
 80018a2:	681a      	ldr	r2, [r3, #0]
 80018a4:	2380      	movs	r3, #128	; 0x80
 80018a6:	029b      	lsls	r3, r3, #10
 80018a8:	4013      	ands	r3, r2
 80018aa:	d100      	bne.n	80018ae <HAL_RCC_OscConfig+0x5a>
 80018ac:	e06a      	b.n	8001984 <HAL_RCC_OscConfig+0x130>
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d166      	bne.n	8001984 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80018b6:	2301      	movs	r3, #1
 80018b8:	f000 fb42 	bl	8001f40 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	685a      	ldr	r2, [r3, #4]
 80018c0:	2380      	movs	r3, #128	; 0x80
 80018c2:	025b      	lsls	r3, r3, #9
 80018c4:	429a      	cmp	r2, r3
 80018c6:	d107      	bne.n	80018d8 <HAL_RCC_OscConfig+0x84>
 80018c8:	4bb0      	ldr	r3, [pc, #704]	; (8001b8c <HAL_RCC_OscConfig+0x338>)
 80018ca:	681a      	ldr	r2, [r3, #0]
 80018cc:	4baf      	ldr	r3, [pc, #700]	; (8001b8c <HAL_RCC_OscConfig+0x338>)
 80018ce:	2180      	movs	r1, #128	; 0x80
 80018d0:	0249      	lsls	r1, r1, #9
 80018d2:	430a      	orrs	r2, r1
 80018d4:	601a      	str	r2, [r3, #0]
 80018d6:	e027      	b.n	8001928 <HAL_RCC_OscConfig+0xd4>
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	685a      	ldr	r2, [r3, #4]
 80018dc:	23a0      	movs	r3, #160	; 0xa0
 80018de:	02db      	lsls	r3, r3, #11
 80018e0:	429a      	cmp	r2, r3
 80018e2:	d10e      	bne.n	8001902 <HAL_RCC_OscConfig+0xae>
 80018e4:	4ba9      	ldr	r3, [pc, #676]	; (8001b8c <HAL_RCC_OscConfig+0x338>)
 80018e6:	681a      	ldr	r2, [r3, #0]
 80018e8:	4ba8      	ldr	r3, [pc, #672]	; (8001b8c <HAL_RCC_OscConfig+0x338>)
 80018ea:	2180      	movs	r1, #128	; 0x80
 80018ec:	02c9      	lsls	r1, r1, #11
 80018ee:	430a      	orrs	r2, r1
 80018f0:	601a      	str	r2, [r3, #0]
 80018f2:	4ba6      	ldr	r3, [pc, #664]	; (8001b8c <HAL_RCC_OscConfig+0x338>)
 80018f4:	681a      	ldr	r2, [r3, #0]
 80018f6:	4ba5      	ldr	r3, [pc, #660]	; (8001b8c <HAL_RCC_OscConfig+0x338>)
 80018f8:	2180      	movs	r1, #128	; 0x80
 80018fa:	0249      	lsls	r1, r1, #9
 80018fc:	430a      	orrs	r2, r1
 80018fe:	601a      	str	r2, [r3, #0]
 8001900:	e012      	b.n	8001928 <HAL_RCC_OscConfig+0xd4>
 8001902:	4ba2      	ldr	r3, [pc, #648]	; (8001b8c <HAL_RCC_OscConfig+0x338>)
 8001904:	681a      	ldr	r2, [r3, #0]
 8001906:	4ba1      	ldr	r3, [pc, #644]	; (8001b8c <HAL_RCC_OscConfig+0x338>)
 8001908:	49a1      	ldr	r1, [pc, #644]	; (8001b90 <HAL_RCC_OscConfig+0x33c>)
 800190a:	400a      	ands	r2, r1
 800190c:	601a      	str	r2, [r3, #0]
 800190e:	4b9f      	ldr	r3, [pc, #636]	; (8001b8c <HAL_RCC_OscConfig+0x338>)
 8001910:	681a      	ldr	r2, [r3, #0]
 8001912:	2380      	movs	r3, #128	; 0x80
 8001914:	025b      	lsls	r3, r3, #9
 8001916:	4013      	ands	r3, r2
 8001918:	60fb      	str	r3, [r7, #12]
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	4b9b      	ldr	r3, [pc, #620]	; (8001b8c <HAL_RCC_OscConfig+0x338>)
 800191e:	681a      	ldr	r2, [r3, #0]
 8001920:	4b9a      	ldr	r3, [pc, #616]	; (8001b8c <HAL_RCC_OscConfig+0x338>)
 8001922:	499c      	ldr	r1, [pc, #624]	; (8001b94 <HAL_RCC_OscConfig+0x340>)
 8001924:	400a      	ands	r2, r1
 8001926:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	2b00      	cmp	r3, #0
 800192e:	d014      	beq.n	800195a <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001930:	f7ff fd6c 	bl	800140c <HAL_GetTick>
 8001934:	0003      	movs	r3, r0
 8001936:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001938:	e008      	b.n	800194c <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800193a:	f7ff fd67 	bl	800140c <HAL_GetTick>
 800193e:	0002      	movs	r2, r0
 8001940:	697b      	ldr	r3, [r7, #20]
 8001942:	1ad3      	subs	r3, r2, r3
 8001944:	2b64      	cmp	r3, #100	; 0x64
 8001946:	d901      	bls.n	800194c <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8001948:	2303      	movs	r3, #3
 800194a:	e2f9      	b.n	8001f40 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800194c:	4b8f      	ldr	r3, [pc, #572]	; (8001b8c <HAL_RCC_OscConfig+0x338>)
 800194e:	681a      	ldr	r2, [r3, #0]
 8001950:	2380      	movs	r3, #128	; 0x80
 8001952:	029b      	lsls	r3, r3, #10
 8001954:	4013      	ands	r3, r2
 8001956:	d0f0      	beq.n	800193a <HAL_RCC_OscConfig+0xe6>
 8001958:	e015      	b.n	8001986 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800195a:	f7ff fd57 	bl	800140c <HAL_GetTick>
 800195e:	0003      	movs	r3, r0
 8001960:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001962:	e008      	b.n	8001976 <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001964:	f7ff fd52 	bl	800140c <HAL_GetTick>
 8001968:	0002      	movs	r2, r0
 800196a:	697b      	ldr	r3, [r7, #20]
 800196c:	1ad3      	subs	r3, r2, r3
 800196e:	2b64      	cmp	r3, #100	; 0x64
 8001970:	d901      	bls.n	8001976 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001972:	2303      	movs	r3, #3
 8001974:	e2e4      	b.n	8001f40 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001976:	4b85      	ldr	r3, [pc, #532]	; (8001b8c <HAL_RCC_OscConfig+0x338>)
 8001978:	681a      	ldr	r2, [r3, #0]
 800197a:	2380      	movs	r3, #128	; 0x80
 800197c:	029b      	lsls	r3, r3, #10
 800197e:	4013      	ands	r3, r2
 8001980:	d1f0      	bne.n	8001964 <HAL_RCC_OscConfig+0x110>
 8001982:	e000      	b.n	8001986 <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001984:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	2202      	movs	r2, #2
 800198c:	4013      	ands	r3, r2
 800198e:	d100      	bne.n	8001992 <HAL_RCC_OscConfig+0x13e>
 8001990:	e099      	b.n	8001ac6 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	68db      	ldr	r3, [r3, #12]
 8001996:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8001998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800199a:	2220      	movs	r2, #32
 800199c:	4013      	ands	r3, r2
 800199e:	d009      	beq.n	80019b4 <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 80019a0:	4b7a      	ldr	r3, [pc, #488]	; (8001b8c <HAL_RCC_OscConfig+0x338>)
 80019a2:	681a      	ldr	r2, [r3, #0]
 80019a4:	4b79      	ldr	r3, [pc, #484]	; (8001b8c <HAL_RCC_OscConfig+0x338>)
 80019a6:	2120      	movs	r1, #32
 80019a8:	430a      	orrs	r2, r1
 80019aa:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 80019ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ae:	2220      	movs	r2, #32
 80019b0:	4393      	bics	r3, r2
 80019b2:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80019b4:	69fb      	ldr	r3, [r7, #28]
 80019b6:	2b04      	cmp	r3, #4
 80019b8:	d005      	beq.n	80019c6 <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80019ba:	69fb      	ldr	r3, [r7, #28]
 80019bc:	2b0c      	cmp	r3, #12
 80019be:	d13e      	bne.n	8001a3e <HAL_RCC_OscConfig+0x1ea>
 80019c0:	69bb      	ldr	r3, [r7, #24]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d13b      	bne.n	8001a3e <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80019c6:	4b71      	ldr	r3, [pc, #452]	; (8001b8c <HAL_RCC_OscConfig+0x338>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	2204      	movs	r2, #4
 80019cc:	4013      	ands	r3, r2
 80019ce:	d004      	beq.n	80019da <HAL_RCC_OscConfig+0x186>
 80019d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d101      	bne.n	80019da <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80019d6:	2301      	movs	r3, #1
 80019d8:	e2b2      	b.n	8001f40 <HAL_RCC_OscConfig+0x6ec>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019da:	4b6c      	ldr	r3, [pc, #432]	; (8001b8c <HAL_RCC_OscConfig+0x338>)
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	4a6e      	ldr	r2, [pc, #440]	; (8001b98 <HAL_RCC_OscConfig+0x344>)
 80019e0:	4013      	ands	r3, r2
 80019e2:	0019      	movs	r1, r3
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	691b      	ldr	r3, [r3, #16]
 80019e8:	021a      	lsls	r2, r3, #8
 80019ea:	4b68      	ldr	r3, [pc, #416]	; (8001b8c <HAL_RCC_OscConfig+0x338>)
 80019ec:	430a      	orrs	r2, r1
 80019ee:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80019f0:	4b66      	ldr	r3, [pc, #408]	; (8001b8c <HAL_RCC_OscConfig+0x338>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	2209      	movs	r2, #9
 80019f6:	4393      	bics	r3, r2
 80019f8:	0019      	movs	r1, r3
 80019fa:	4b64      	ldr	r3, [pc, #400]	; (8001b8c <HAL_RCC_OscConfig+0x338>)
 80019fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019fe:	430a      	orrs	r2, r1
 8001a00:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001a02:	f000 fbeb 	bl	80021dc <HAL_RCC_GetSysClockFreq>
 8001a06:	0001      	movs	r1, r0
 8001a08:	4b60      	ldr	r3, [pc, #384]	; (8001b8c <HAL_RCC_OscConfig+0x338>)
 8001a0a:	68db      	ldr	r3, [r3, #12]
 8001a0c:	091b      	lsrs	r3, r3, #4
 8001a0e:	220f      	movs	r2, #15
 8001a10:	4013      	ands	r3, r2
 8001a12:	4a62      	ldr	r2, [pc, #392]	; (8001b9c <HAL_RCC_OscConfig+0x348>)
 8001a14:	5cd3      	ldrb	r3, [r2, r3]
 8001a16:	000a      	movs	r2, r1
 8001a18:	40da      	lsrs	r2, r3
 8001a1a:	4b61      	ldr	r3, [pc, #388]	; (8001ba0 <HAL_RCC_OscConfig+0x34c>)
 8001a1c:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8001a1e:	4b61      	ldr	r3, [pc, #388]	; (8001ba4 <HAL_RCC_OscConfig+0x350>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	2513      	movs	r5, #19
 8001a24:	197c      	adds	r4, r7, r5
 8001a26:	0018      	movs	r0, r3
 8001a28:	f7ff fcaa 	bl	8001380 <HAL_InitTick>
 8001a2c:	0003      	movs	r3, r0
 8001a2e:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8001a30:	197b      	adds	r3, r7, r5
 8001a32:	781b      	ldrb	r3, [r3, #0]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d046      	beq.n	8001ac6 <HAL_RCC_OscConfig+0x272>
      {
        return status;
 8001a38:	197b      	adds	r3, r7, r5
 8001a3a:	781b      	ldrb	r3, [r3, #0]
 8001a3c:	e280      	b.n	8001f40 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8001a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d027      	beq.n	8001a94 <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001a44:	4b51      	ldr	r3, [pc, #324]	; (8001b8c <HAL_RCC_OscConfig+0x338>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	2209      	movs	r2, #9
 8001a4a:	4393      	bics	r3, r2
 8001a4c:	0019      	movs	r1, r3
 8001a4e:	4b4f      	ldr	r3, [pc, #316]	; (8001b8c <HAL_RCC_OscConfig+0x338>)
 8001a50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a52:	430a      	orrs	r2, r1
 8001a54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a56:	f7ff fcd9 	bl	800140c <HAL_GetTick>
 8001a5a:	0003      	movs	r3, r0
 8001a5c:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001a5e:	e008      	b.n	8001a72 <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a60:	f7ff fcd4 	bl	800140c <HAL_GetTick>
 8001a64:	0002      	movs	r2, r0
 8001a66:	697b      	ldr	r3, [r7, #20]
 8001a68:	1ad3      	subs	r3, r2, r3
 8001a6a:	2b02      	cmp	r3, #2
 8001a6c:	d901      	bls.n	8001a72 <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 8001a6e:	2303      	movs	r3, #3
 8001a70:	e266      	b.n	8001f40 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001a72:	4b46      	ldr	r3, [pc, #280]	; (8001b8c <HAL_RCC_OscConfig+0x338>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	2204      	movs	r2, #4
 8001a78:	4013      	ands	r3, r2
 8001a7a:	d0f1      	beq.n	8001a60 <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a7c:	4b43      	ldr	r3, [pc, #268]	; (8001b8c <HAL_RCC_OscConfig+0x338>)
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	4a45      	ldr	r2, [pc, #276]	; (8001b98 <HAL_RCC_OscConfig+0x344>)
 8001a82:	4013      	ands	r3, r2
 8001a84:	0019      	movs	r1, r3
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	691b      	ldr	r3, [r3, #16]
 8001a8a:	021a      	lsls	r2, r3, #8
 8001a8c:	4b3f      	ldr	r3, [pc, #252]	; (8001b8c <HAL_RCC_OscConfig+0x338>)
 8001a8e:	430a      	orrs	r2, r1
 8001a90:	605a      	str	r2, [r3, #4]
 8001a92:	e018      	b.n	8001ac6 <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a94:	4b3d      	ldr	r3, [pc, #244]	; (8001b8c <HAL_RCC_OscConfig+0x338>)
 8001a96:	681a      	ldr	r2, [r3, #0]
 8001a98:	4b3c      	ldr	r3, [pc, #240]	; (8001b8c <HAL_RCC_OscConfig+0x338>)
 8001a9a:	2101      	movs	r1, #1
 8001a9c:	438a      	bics	r2, r1
 8001a9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aa0:	f7ff fcb4 	bl	800140c <HAL_GetTick>
 8001aa4:	0003      	movs	r3, r0
 8001aa6:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001aa8:	e008      	b.n	8001abc <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001aaa:	f7ff fcaf 	bl	800140c <HAL_GetTick>
 8001aae:	0002      	movs	r2, r0
 8001ab0:	697b      	ldr	r3, [r7, #20]
 8001ab2:	1ad3      	subs	r3, r2, r3
 8001ab4:	2b02      	cmp	r3, #2
 8001ab6:	d901      	bls.n	8001abc <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8001ab8:	2303      	movs	r3, #3
 8001aba:	e241      	b.n	8001f40 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001abc:	4b33      	ldr	r3, [pc, #204]	; (8001b8c <HAL_RCC_OscConfig+0x338>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	2204      	movs	r2, #4
 8001ac2:	4013      	ands	r3, r2
 8001ac4:	d1f1      	bne.n	8001aaa <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	2210      	movs	r2, #16
 8001acc:	4013      	ands	r3, r2
 8001ace:	d100      	bne.n	8001ad2 <HAL_RCC_OscConfig+0x27e>
 8001ad0:	e0a1      	b.n	8001c16 <HAL_RCC_OscConfig+0x3c2>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001ad2:	69fb      	ldr	r3, [r7, #28]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d140      	bne.n	8001b5a <HAL_RCC_OscConfig+0x306>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001ad8:	4b2c      	ldr	r3, [pc, #176]	; (8001b8c <HAL_RCC_OscConfig+0x338>)
 8001ada:	681a      	ldr	r2, [r3, #0]
 8001adc:	2380      	movs	r3, #128	; 0x80
 8001ade:	009b      	lsls	r3, r3, #2
 8001ae0:	4013      	ands	r3, r2
 8001ae2:	d005      	beq.n	8001af0 <HAL_RCC_OscConfig+0x29c>
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	699b      	ldr	r3, [r3, #24]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d101      	bne.n	8001af0 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8001aec:	2301      	movs	r3, #1
 8001aee:	e227      	b.n	8001f40 <HAL_RCC_OscConfig+0x6ec>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001af0:	4b26      	ldr	r3, [pc, #152]	; (8001b8c <HAL_RCC_OscConfig+0x338>)
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	4a2c      	ldr	r2, [pc, #176]	; (8001ba8 <HAL_RCC_OscConfig+0x354>)
 8001af6:	4013      	ands	r3, r2
 8001af8:	0019      	movs	r1, r3
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6a1a      	ldr	r2, [r3, #32]
 8001afe:	4b23      	ldr	r3, [pc, #140]	; (8001b8c <HAL_RCC_OscConfig+0x338>)
 8001b00:	430a      	orrs	r2, r1
 8001b02:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b04:	4b21      	ldr	r3, [pc, #132]	; (8001b8c <HAL_RCC_OscConfig+0x338>)
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	021b      	lsls	r3, r3, #8
 8001b0a:	0a19      	lsrs	r1, r3, #8
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	69db      	ldr	r3, [r3, #28]
 8001b10:	061a      	lsls	r2, r3, #24
 8001b12:	4b1e      	ldr	r3, [pc, #120]	; (8001b8c <HAL_RCC_OscConfig+0x338>)
 8001b14:	430a      	orrs	r2, r1
 8001b16:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6a1b      	ldr	r3, [r3, #32]
 8001b1c:	0b5b      	lsrs	r3, r3, #13
 8001b1e:	3301      	adds	r3, #1
 8001b20:	2280      	movs	r2, #128	; 0x80
 8001b22:	0212      	lsls	r2, r2, #8
 8001b24:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001b26:	4b19      	ldr	r3, [pc, #100]	; (8001b8c <HAL_RCC_OscConfig+0x338>)
 8001b28:	68db      	ldr	r3, [r3, #12]
 8001b2a:	091b      	lsrs	r3, r3, #4
 8001b2c:	210f      	movs	r1, #15
 8001b2e:	400b      	ands	r3, r1
 8001b30:	491a      	ldr	r1, [pc, #104]	; (8001b9c <HAL_RCC_OscConfig+0x348>)
 8001b32:	5ccb      	ldrb	r3, [r1, r3]
 8001b34:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001b36:	4b1a      	ldr	r3, [pc, #104]	; (8001ba0 <HAL_RCC_OscConfig+0x34c>)
 8001b38:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8001b3a:	4b1a      	ldr	r3, [pc, #104]	; (8001ba4 <HAL_RCC_OscConfig+0x350>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	2513      	movs	r5, #19
 8001b40:	197c      	adds	r4, r7, r5
 8001b42:	0018      	movs	r0, r3
 8001b44:	f7ff fc1c 	bl	8001380 <HAL_InitTick>
 8001b48:	0003      	movs	r3, r0
 8001b4a:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8001b4c:	197b      	adds	r3, r7, r5
 8001b4e:	781b      	ldrb	r3, [r3, #0]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d060      	beq.n	8001c16 <HAL_RCC_OscConfig+0x3c2>
        {
          return status;
 8001b54:	197b      	adds	r3, r7, r5
 8001b56:	781b      	ldrb	r3, [r3, #0]
 8001b58:	e1f2      	b.n	8001f40 <HAL_RCC_OscConfig+0x6ec>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	699b      	ldr	r3, [r3, #24]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d03f      	beq.n	8001be2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001b62:	4b0a      	ldr	r3, [pc, #40]	; (8001b8c <HAL_RCC_OscConfig+0x338>)
 8001b64:	681a      	ldr	r2, [r3, #0]
 8001b66:	4b09      	ldr	r3, [pc, #36]	; (8001b8c <HAL_RCC_OscConfig+0x338>)
 8001b68:	2180      	movs	r1, #128	; 0x80
 8001b6a:	0049      	lsls	r1, r1, #1
 8001b6c:	430a      	orrs	r2, r1
 8001b6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b70:	f7ff fc4c 	bl	800140c <HAL_GetTick>
 8001b74:	0003      	movs	r3, r0
 8001b76:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001b78:	e018      	b.n	8001bac <HAL_RCC_OscConfig+0x358>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001b7a:	f7ff fc47 	bl	800140c <HAL_GetTick>
 8001b7e:	0002      	movs	r2, r0
 8001b80:	697b      	ldr	r3, [r7, #20]
 8001b82:	1ad3      	subs	r3, r2, r3
 8001b84:	2b02      	cmp	r3, #2
 8001b86:	d911      	bls.n	8001bac <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 8001b88:	2303      	movs	r3, #3
 8001b8a:	e1d9      	b.n	8001f40 <HAL_RCC_OscConfig+0x6ec>
 8001b8c:	40021000 	.word	0x40021000
 8001b90:	fffeffff 	.word	0xfffeffff
 8001b94:	fffbffff 	.word	0xfffbffff
 8001b98:	ffffe0ff 	.word	0xffffe0ff
 8001b9c:	08002e5c 	.word	0x08002e5c
 8001ba0:	20000008 	.word	0x20000008
 8001ba4:	2000000c 	.word	0x2000000c
 8001ba8:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001bac:	4bc9      	ldr	r3, [pc, #804]	; (8001ed4 <HAL_RCC_OscConfig+0x680>)
 8001bae:	681a      	ldr	r2, [r3, #0]
 8001bb0:	2380      	movs	r3, #128	; 0x80
 8001bb2:	009b      	lsls	r3, r3, #2
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	d0e0      	beq.n	8001b7a <HAL_RCC_OscConfig+0x326>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001bb8:	4bc6      	ldr	r3, [pc, #792]	; (8001ed4 <HAL_RCC_OscConfig+0x680>)
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	4ac6      	ldr	r2, [pc, #792]	; (8001ed8 <HAL_RCC_OscConfig+0x684>)
 8001bbe:	4013      	ands	r3, r2
 8001bc0:	0019      	movs	r1, r3
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6a1a      	ldr	r2, [r3, #32]
 8001bc6:	4bc3      	ldr	r3, [pc, #780]	; (8001ed4 <HAL_RCC_OscConfig+0x680>)
 8001bc8:	430a      	orrs	r2, r1
 8001bca:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001bcc:	4bc1      	ldr	r3, [pc, #772]	; (8001ed4 <HAL_RCC_OscConfig+0x680>)
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	021b      	lsls	r3, r3, #8
 8001bd2:	0a19      	lsrs	r1, r3, #8
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	69db      	ldr	r3, [r3, #28]
 8001bd8:	061a      	lsls	r2, r3, #24
 8001bda:	4bbe      	ldr	r3, [pc, #760]	; (8001ed4 <HAL_RCC_OscConfig+0x680>)
 8001bdc:	430a      	orrs	r2, r1
 8001bde:	605a      	str	r2, [r3, #4]
 8001be0:	e019      	b.n	8001c16 <HAL_RCC_OscConfig+0x3c2>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001be2:	4bbc      	ldr	r3, [pc, #752]	; (8001ed4 <HAL_RCC_OscConfig+0x680>)
 8001be4:	681a      	ldr	r2, [r3, #0]
 8001be6:	4bbb      	ldr	r3, [pc, #748]	; (8001ed4 <HAL_RCC_OscConfig+0x680>)
 8001be8:	49bc      	ldr	r1, [pc, #752]	; (8001edc <HAL_RCC_OscConfig+0x688>)
 8001bea:	400a      	ands	r2, r1
 8001bec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bee:	f7ff fc0d 	bl	800140c <HAL_GetTick>
 8001bf2:	0003      	movs	r3, r0
 8001bf4:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001bf6:	e008      	b.n	8001c0a <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001bf8:	f7ff fc08 	bl	800140c <HAL_GetTick>
 8001bfc:	0002      	movs	r2, r0
 8001bfe:	697b      	ldr	r3, [r7, #20]
 8001c00:	1ad3      	subs	r3, r2, r3
 8001c02:	2b02      	cmp	r3, #2
 8001c04:	d901      	bls.n	8001c0a <HAL_RCC_OscConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 8001c06:	2303      	movs	r3, #3
 8001c08:	e19a      	b.n	8001f40 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001c0a:	4bb2      	ldr	r3, [pc, #712]	; (8001ed4 <HAL_RCC_OscConfig+0x680>)
 8001c0c:	681a      	ldr	r2, [r3, #0]
 8001c0e:	2380      	movs	r3, #128	; 0x80
 8001c10:	009b      	lsls	r3, r3, #2
 8001c12:	4013      	ands	r3, r2
 8001c14:	d1f0      	bne.n	8001bf8 <HAL_RCC_OscConfig+0x3a4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	2208      	movs	r2, #8
 8001c1c:	4013      	ands	r3, r2
 8001c1e:	d036      	beq.n	8001c8e <HAL_RCC_OscConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	695b      	ldr	r3, [r3, #20]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d019      	beq.n	8001c5c <HAL_RCC_OscConfig+0x408>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c28:	4baa      	ldr	r3, [pc, #680]	; (8001ed4 <HAL_RCC_OscConfig+0x680>)
 8001c2a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001c2c:	4ba9      	ldr	r3, [pc, #676]	; (8001ed4 <HAL_RCC_OscConfig+0x680>)
 8001c2e:	2101      	movs	r1, #1
 8001c30:	430a      	orrs	r2, r1
 8001c32:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c34:	f7ff fbea 	bl	800140c <HAL_GetTick>
 8001c38:	0003      	movs	r3, r0
 8001c3a:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001c3c:	e008      	b.n	8001c50 <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c3e:	f7ff fbe5 	bl	800140c <HAL_GetTick>
 8001c42:	0002      	movs	r2, r0
 8001c44:	697b      	ldr	r3, [r7, #20]
 8001c46:	1ad3      	subs	r3, r2, r3
 8001c48:	2b02      	cmp	r3, #2
 8001c4a:	d901      	bls.n	8001c50 <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 8001c4c:	2303      	movs	r3, #3
 8001c4e:	e177      	b.n	8001f40 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001c50:	4ba0      	ldr	r3, [pc, #640]	; (8001ed4 <HAL_RCC_OscConfig+0x680>)
 8001c52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c54:	2202      	movs	r2, #2
 8001c56:	4013      	ands	r3, r2
 8001c58:	d0f1      	beq.n	8001c3e <HAL_RCC_OscConfig+0x3ea>
 8001c5a:	e018      	b.n	8001c8e <HAL_RCC_OscConfig+0x43a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c5c:	4b9d      	ldr	r3, [pc, #628]	; (8001ed4 <HAL_RCC_OscConfig+0x680>)
 8001c5e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001c60:	4b9c      	ldr	r3, [pc, #624]	; (8001ed4 <HAL_RCC_OscConfig+0x680>)
 8001c62:	2101      	movs	r1, #1
 8001c64:	438a      	bics	r2, r1
 8001c66:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c68:	f7ff fbd0 	bl	800140c <HAL_GetTick>
 8001c6c:	0003      	movs	r3, r0
 8001c6e:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001c70:	e008      	b.n	8001c84 <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c72:	f7ff fbcb 	bl	800140c <HAL_GetTick>
 8001c76:	0002      	movs	r2, r0
 8001c78:	697b      	ldr	r3, [r7, #20]
 8001c7a:	1ad3      	subs	r3, r2, r3
 8001c7c:	2b02      	cmp	r3, #2
 8001c7e:	d901      	bls.n	8001c84 <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 8001c80:	2303      	movs	r3, #3
 8001c82:	e15d      	b.n	8001f40 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001c84:	4b93      	ldr	r3, [pc, #588]	; (8001ed4 <HAL_RCC_OscConfig+0x680>)
 8001c86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c88:	2202      	movs	r2, #2
 8001c8a:	4013      	ands	r3, r2
 8001c8c:	d1f1      	bne.n	8001c72 <HAL_RCC_OscConfig+0x41e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	2204      	movs	r2, #4
 8001c94:	4013      	ands	r3, r2
 8001c96:	d100      	bne.n	8001c9a <HAL_RCC_OscConfig+0x446>
 8001c98:	e0ae      	b.n	8001df8 <HAL_RCC_OscConfig+0x5a4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c9a:	2023      	movs	r0, #35	; 0x23
 8001c9c:	183b      	adds	r3, r7, r0
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ca2:	4b8c      	ldr	r3, [pc, #560]	; (8001ed4 <HAL_RCC_OscConfig+0x680>)
 8001ca4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001ca6:	2380      	movs	r3, #128	; 0x80
 8001ca8:	055b      	lsls	r3, r3, #21
 8001caa:	4013      	ands	r3, r2
 8001cac:	d109      	bne.n	8001cc2 <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cae:	4b89      	ldr	r3, [pc, #548]	; (8001ed4 <HAL_RCC_OscConfig+0x680>)
 8001cb0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001cb2:	4b88      	ldr	r3, [pc, #544]	; (8001ed4 <HAL_RCC_OscConfig+0x680>)
 8001cb4:	2180      	movs	r1, #128	; 0x80
 8001cb6:	0549      	lsls	r1, r1, #21
 8001cb8:	430a      	orrs	r2, r1
 8001cba:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001cbc:	183b      	adds	r3, r7, r0
 8001cbe:	2201      	movs	r2, #1
 8001cc0:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cc2:	4b87      	ldr	r3, [pc, #540]	; (8001ee0 <HAL_RCC_OscConfig+0x68c>)
 8001cc4:	681a      	ldr	r2, [r3, #0]
 8001cc6:	2380      	movs	r3, #128	; 0x80
 8001cc8:	005b      	lsls	r3, r3, #1
 8001cca:	4013      	ands	r3, r2
 8001ccc:	d11a      	bne.n	8001d04 <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001cce:	4b84      	ldr	r3, [pc, #528]	; (8001ee0 <HAL_RCC_OscConfig+0x68c>)
 8001cd0:	681a      	ldr	r2, [r3, #0]
 8001cd2:	4b83      	ldr	r3, [pc, #524]	; (8001ee0 <HAL_RCC_OscConfig+0x68c>)
 8001cd4:	2180      	movs	r1, #128	; 0x80
 8001cd6:	0049      	lsls	r1, r1, #1
 8001cd8:	430a      	orrs	r2, r1
 8001cda:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001cdc:	f7ff fb96 	bl	800140c <HAL_GetTick>
 8001ce0:	0003      	movs	r3, r0
 8001ce2:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ce4:	e008      	b.n	8001cf8 <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ce6:	f7ff fb91 	bl	800140c <HAL_GetTick>
 8001cea:	0002      	movs	r2, r0
 8001cec:	697b      	ldr	r3, [r7, #20]
 8001cee:	1ad3      	subs	r3, r2, r3
 8001cf0:	2b64      	cmp	r3, #100	; 0x64
 8001cf2:	d901      	bls.n	8001cf8 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 8001cf4:	2303      	movs	r3, #3
 8001cf6:	e123      	b.n	8001f40 <HAL_RCC_OscConfig+0x6ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cf8:	4b79      	ldr	r3, [pc, #484]	; (8001ee0 <HAL_RCC_OscConfig+0x68c>)
 8001cfa:	681a      	ldr	r2, [r3, #0]
 8001cfc:	2380      	movs	r3, #128	; 0x80
 8001cfe:	005b      	lsls	r3, r3, #1
 8001d00:	4013      	ands	r3, r2
 8001d02:	d0f0      	beq.n	8001ce6 <HAL_RCC_OscConfig+0x492>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	689a      	ldr	r2, [r3, #8]
 8001d08:	2380      	movs	r3, #128	; 0x80
 8001d0a:	005b      	lsls	r3, r3, #1
 8001d0c:	429a      	cmp	r2, r3
 8001d0e:	d107      	bne.n	8001d20 <HAL_RCC_OscConfig+0x4cc>
 8001d10:	4b70      	ldr	r3, [pc, #448]	; (8001ed4 <HAL_RCC_OscConfig+0x680>)
 8001d12:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001d14:	4b6f      	ldr	r3, [pc, #444]	; (8001ed4 <HAL_RCC_OscConfig+0x680>)
 8001d16:	2180      	movs	r1, #128	; 0x80
 8001d18:	0049      	lsls	r1, r1, #1
 8001d1a:	430a      	orrs	r2, r1
 8001d1c:	651a      	str	r2, [r3, #80]	; 0x50
 8001d1e:	e031      	b.n	8001d84 <HAL_RCC_OscConfig+0x530>
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	689b      	ldr	r3, [r3, #8]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d10c      	bne.n	8001d42 <HAL_RCC_OscConfig+0x4ee>
 8001d28:	4b6a      	ldr	r3, [pc, #424]	; (8001ed4 <HAL_RCC_OscConfig+0x680>)
 8001d2a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001d2c:	4b69      	ldr	r3, [pc, #420]	; (8001ed4 <HAL_RCC_OscConfig+0x680>)
 8001d2e:	496b      	ldr	r1, [pc, #428]	; (8001edc <HAL_RCC_OscConfig+0x688>)
 8001d30:	400a      	ands	r2, r1
 8001d32:	651a      	str	r2, [r3, #80]	; 0x50
 8001d34:	4b67      	ldr	r3, [pc, #412]	; (8001ed4 <HAL_RCC_OscConfig+0x680>)
 8001d36:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001d38:	4b66      	ldr	r3, [pc, #408]	; (8001ed4 <HAL_RCC_OscConfig+0x680>)
 8001d3a:	496a      	ldr	r1, [pc, #424]	; (8001ee4 <HAL_RCC_OscConfig+0x690>)
 8001d3c:	400a      	ands	r2, r1
 8001d3e:	651a      	str	r2, [r3, #80]	; 0x50
 8001d40:	e020      	b.n	8001d84 <HAL_RCC_OscConfig+0x530>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	689a      	ldr	r2, [r3, #8]
 8001d46:	23a0      	movs	r3, #160	; 0xa0
 8001d48:	00db      	lsls	r3, r3, #3
 8001d4a:	429a      	cmp	r2, r3
 8001d4c:	d10e      	bne.n	8001d6c <HAL_RCC_OscConfig+0x518>
 8001d4e:	4b61      	ldr	r3, [pc, #388]	; (8001ed4 <HAL_RCC_OscConfig+0x680>)
 8001d50:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001d52:	4b60      	ldr	r3, [pc, #384]	; (8001ed4 <HAL_RCC_OscConfig+0x680>)
 8001d54:	2180      	movs	r1, #128	; 0x80
 8001d56:	00c9      	lsls	r1, r1, #3
 8001d58:	430a      	orrs	r2, r1
 8001d5a:	651a      	str	r2, [r3, #80]	; 0x50
 8001d5c:	4b5d      	ldr	r3, [pc, #372]	; (8001ed4 <HAL_RCC_OscConfig+0x680>)
 8001d5e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001d60:	4b5c      	ldr	r3, [pc, #368]	; (8001ed4 <HAL_RCC_OscConfig+0x680>)
 8001d62:	2180      	movs	r1, #128	; 0x80
 8001d64:	0049      	lsls	r1, r1, #1
 8001d66:	430a      	orrs	r2, r1
 8001d68:	651a      	str	r2, [r3, #80]	; 0x50
 8001d6a:	e00b      	b.n	8001d84 <HAL_RCC_OscConfig+0x530>
 8001d6c:	4b59      	ldr	r3, [pc, #356]	; (8001ed4 <HAL_RCC_OscConfig+0x680>)
 8001d6e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001d70:	4b58      	ldr	r3, [pc, #352]	; (8001ed4 <HAL_RCC_OscConfig+0x680>)
 8001d72:	495a      	ldr	r1, [pc, #360]	; (8001edc <HAL_RCC_OscConfig+0x688>)
 8001d74:	400a      	ands	r2, r1
 8001d76:	651a      	str	r2, [r3, #80]	; 0x50
 8001d78:	4b56      	ldr	r3, [pc, #344]	; (8001ed4 <HAL_RCC_OscConfig+0x680>)
 8001d7a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001d7c:	4b55      	ldr	r3, [pc, #340]	; (8001ed4 <HAL_RCC_OscConfig+0x680>)
 8001d7e:	4959      	ldr	r1, [pc, #356]	; (8001ee4 <HAL_RCC_OscConfig+0x690>)
 8001d80:	400a      	ands	r2, r1
 8001d82:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	689b      	ldr	r3, [r3, #8]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d015      	beq.n	8001db8 <HAL_RCC_OscConfig+0x564>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d8c:	f7ff fb3e 	bl	800140c <HAL_GetTick>
 8001d90:	0003      	movs	r3, r0
 8001d92:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001d94:	e009      	b.n	8001daa <HAL_RCC_OscConfig+0x556>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d96:	f7ff fb39 	bl	800140c <HAL_GetTick>
 8001d9a:	0002      	movs	r2, r0
 8001d9c:	697b      	ldr	r3, [r7, #20]
 8001d9e:	1ad3      	subs	r3, r2, r3
 8001da0:	4a51      	ldr	r2, [pc, #324]	; (8001ee8 <HAL_RCC_OscConfig+0x694>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d901      	bls.n	8001daa <HAL_RCC_OscConfig+0x556>
        {
          return HAL_TIMEOUT;
 8001da6:	2303      	movs	r3, #3
 8001da8:	e0ca      	b.n	8001f40 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001daa:	4b4a      	ldr	r3, [pc, #296]	; (8001ed4 <HAL_RCC_OscConfig+0x680>)
 8001dac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001dae:	2380      	movs	r3, #128	; 0x80
 8001db0:	009b      	lsls	r3, r3, #2
 8001db2:	4013      	ands	r3, r2
 8001db4:	d0ef      	beq.n	8001d96 <HAL_RCC_OscConfig+0x542>
 8001db6:	e014      	b.n	8001de2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001db8:	f7ff fb28 	bl	800140c <HAL_GetTick>
 8001dbc:	0003      	movs	r3, r0
 8001dbe:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001dc0:	e009      	b.n	8001dd6 <HAL_RCC_OscConfig+0x582>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001dc2:	f7ff fb23 	bl	800140c <HAL_GetTick>
 8001dc6:	0002      	movs	r2, r0
 8001dc8:	697b      	ldr	r3, [r7, #20]
 8001dca:	1ad3      	subs	r3, r2, r3
 8001dcc:	4a46      	ldr	r2, [pc, #280]	; (8001ee8 <HAL_RCC_OscConfig+0x694>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d901      	bls.n	8001dd6 <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
 8001dd2:	2303      	movs	r3, #3
 8001dd4:	e0b4      	b.n	8001f40 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001dd6:	4b3f      	ldr	r3, [pc, #252]	; (8001ed4 <HAL_RCC_OscConfig+0x680>)
 8001dd8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001dda:	2380      	movs	r3, #128	; 0x80
 8001ddc:	009b      	lsls	r3, r3, #2
 8001dde:	4013      	ands	r3, r2
 8001de0:	d1ef      	bne.n	8001dc2 <HAL_RCC_OscConfig+0x56e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001de2:	2323      	movs	r3, #35	; 0x23
 8001de4:	18fb      	adds	r3, r7, r3
 8001de6:	781b      	ldrb	r3, [r3, #0]
 8001de8:	2b01      	cmp	r3, #1
 8001dea:	d105      	bne.n	8001df8 <HAL_RCC_OscConfig+0x5a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001dec:	4b39      	ldr	r3, [pc, #228]	; (8001ed4 <HAL_RCC_OscConfig+0x680>)
 8001dee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001df0:	4b38      	ldr	r3, [pc, #224]	; (8001ed4 <HAL_RCC_OscConfig+0x680>)
 8001df2:	493e      	ldr	r1, [pc, #248]	; (8001eec <HAL_RCC_OscConfig+0x698>)
 8001df4:	400a      	ands	r2, r1
 8001df6:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d100      	bne.n	8001e02 <HAL_RCC_OscConfig+0x5ae>
 8001e00:	e09d      	b.n	8001f3e <HAL_RCC_OscConfig+0x6ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e02:	69fb      	ldr	r3, [r7, #28]
 8001e04:	2b0c      	cmp	r3, #12
 8001e06:	d100      	bne.n	8001e0a <HAL_RCC_OscConfig+0x5b6>
 8001e08:	e076      	b.n	8001ef8 <HAL_RCC_OscConfig+0x6a4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e0e:	2b02      	cmp	r3, #2
 8001e10:	d145      	bne.n	8001e9e <HAL_RCC_OscConfig+0x64a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e12:	4b30      	ldr	r3, [pc, #192]	; (8001ed4 <HAL_RCC_OscConfig+0x680>)
 8001e14:	681a      	ldr	r2, [r3, #0]
 8001e16:	4b2f      	ldr	r3, [pc, #188]	; (8001ed4 <HAL_RCC_OscConfig+0x680>)
 8001e18:	4935      	ldr	r1, [pc, #212]	; (8001ef0 <HAL_RCC_OscConfig+0x69c>)
 8001e1a:	400a      	ands	r2, r1
 8001e1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e1e:	f7ff faf5 	bl	800140c <HAL_GetTick>
 8001e22:	0003      	movs	r3, r0
 8001e24:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001e26:	e008      	b.n	8001e3a <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e28:	f7ff faf0 	bl	800140c <HAL_GetTick>
 8001e2c:	0002      	movs	r2, r0
 8001e2e:	697b      	ldr	r3, [r7, #20]
 8001e30:	1ad3      	subs	r3, r2, r3
 8001e32:	2b02      	cmp	r3, #2
 8001e34:	d901      	bls.n	8001e3a <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 8001e36:	2303      	movs	r3, #3
 8001e38:	e082      	b.n	8001f40 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001e3a:	4b26      	ldr	r3, [pc, #152]	; (8001ed4 <HAL_RCC_OscConfig+0x680>)
 8001e3c:	681a      	ldr	r2, [r3, #0]
 8001e3e:	2380      	movs	r3, #128	; 0x80
 8001e40:	049b      	lsls	r3, r3, #18
 8001e42:	4013      	ands	r3, r2
 8001e44:	d1f0      	bne.n	8001e28 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e46:	4b23      	ldr	r3, [pc, #140]	; (8001ed4 <HAL_RCC_OscConfig+0x680>)
 8001e48:	68db      	ldr	r3, [r3, #12]
 8001e4a:	4a2a      	ldr	r2, [pc, #168]	; (8001ef4 <HAL_RCC_OscConfig+0x6a0>)
 8001e4c:	4013      	ands	r3, r2
 8001e4e:	0019      	movs	r1, r3
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e58:	431a      	orrs	r2, r3
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e5e:	431a      	orrs	r2, r3
 8001e60:	4b1c      	ldr	r3, [pc, #112]	; (8001ed4 <HAL_RCC_OscConfig+0x680>)
 8001e62:	430a      	orrs	r2, r1
 8001e64:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e66:	4b1b      	ldr	r3, [pc, #108]	; (8001ed4 <HAL_RCC_OscConfig+0x680>)
 8001e68:	681a      	ldr	r2, [r3, #0]
 8001e6a:	4b1a      	ldr	r3, [pc, #104]	; (8001ed4 <HAL_RCC_OscConfig+0x680>)
 8001e6c:	2180      	movs	r1, #128	; 0x80
 8001e6e:	0449      	lsls	r1, r1, #17
 8001e70:	430a      	orrs	r2, r1
 8001e72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e74:	f7ff faca 	bl	800140c <HAL_GetTick>
 8001e78:	0003      	movs	r3, r0
 8001e7a:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001e7c:	e008      	b.n	8001e90 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e7e:	f7ff fac5 	bl	800140c <HAL_GetTick>
 8001e82:	0002      	movs	r2, r0
 8001e84:	697b      	ldr	r3, [r7, #20]
 8001e86:	1ad3      	subs	r3, r2, r3
 8001e88:	2b02      	cmp	r3, #2
 8001e8a:	d901      	bls.n	8001e90 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8001e8c:	2303      	movs	r3, #3
 8001e8e:	e057      	b.n	8001f40 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001e90:	4b10      	ldr	r3, [pc, #64]	; (8001ed4 <HAL_RCC_OscConfig+0x680>)
 8001e92:	681a      	ldr	r2, [r3, #0]
 8001e94:	2380      	movs	r3, #128	; 0x80
 8001e96:	049b      	lsls	r3, r3, #18
 8001e98:	4013      	ands	r3, r2
 8001e9a:	d0f0      	beq.n	8001e7e <HAL_RCC_OscConfig+0x62a>
 8001e9c:	e04f      	b.n	8001f3e <HAL_RCC_OscConfig+0x6ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e9e:	4b0d      	ldr	r3, [pc, #52]	; (8001ed4 <HAL_RCC_OscConfig+0x680>)
 8001ea0:	681a      	ldr	r2, [r3, #0]
 8001ea2:	4b0c      	ldr	r3, [pc, #48]	; (8001ed4 <HAL_RCC_OscConfig+0x680>)
 8001ea4:	4912      	ldr	r1, [pc, #72]	; (8001ef0 <HAL_RCC_OscConfig+0x69c>)
 8001ea6:	400a      	ands	r2, r1
 8001ea8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eaa:	f7ff faaf 	bl	800140c <HAL_GetTick>
 8001eae:	0003      	movs	r3, r0
 8001eb0:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001eb2:	e008      	b.n	8001ec6 <HAL_RCC_OscConfig+0x672>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001eb4:	f7ff faaa 	bl	800140c <HAL_GetTick>
 8001eb8:	0002      	movs	r2, r0
 8001eba:	697b      	ldr	r3, [r7, #20]
 8001ebc:	1ad3      	subs	r3, r2, r3
 8001ebe:	2b02      	cmp	r3, #2
 8001ec0:	d901      	bls.n	8001ec6 <HAL_RCC_OscConfig+0x672>
          {
            return HAL_TIMEOUT;
 8001ec2:	2303      	movs	r3, #3
 8001ec4:	e03c      	b.n	8001f40 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001ec6:	4b03      	ldr	r3, [pc, #12]	; (8001ed4 <HAL_RCC_OscConfig+0x680>)
 8001ec8:	681a      	ldr	r2, [r3, #0]
 8001eca:	2380      	movs	r3, #128	; 0x80
 8001ecc:	049b      	lsls	r3, r3, #18
 8001ece:	4013      	ands	r3, r2
 8001ed0:	d1f0      	bne.n	8001eb4 <HAL_RCC_OscConfig+0x660>
 8001ed2:	e034      	b.n	8001f3e <HAL_RCC_OscConfig+0x6ea>
 8001ed4:	40021000 	.word	0x40021000
 8001ed8:	ffff1fff 	.word	0xffff1fff
 8001edc:	fffffeff 	.word	0xfffffeff
 8001ee0:	40007000 	.word	0x40007000
 8001ee4:	fffffbff 	.word	0xfffffbff
 8001ee8:	00001388 	.word	0x00001388
 8001eec:	efffffff 	.word	0xefffffff
 8001ef0:	feffffff 	.word	0xfeffffff
 8001ef4:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001efc:	2b01      	cmp	r3, #1
 8001efe:	d101      	bne.n	8001f04 <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
 8001f00:	2301      	movs	r3, #1
 8001f02:	e01d      	b.n	8001f40 <HAL_RCC_OscConfig+0x6ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001f04:	4b10      	ldr	r3, [pc, #64]	; (8001f48 <HAL_RCC_OscConfig+0x6f4>)
 8001f06:	68db      	ldr	r3, [r3, #12]
 8001f08:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f0a:	69ba      	ldr	r2, [r7, #24]
 8001f0c:	2380      	movs	r3, #128	; 0x80
 8001f0e:	025b      	lsls	r3, r3, #9
 8001f10:	401a      	ands	r2, r3
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f16:	429a      	cmp	r2, r3
 8001f18:	d10f      	bne.n	8001f3a <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001f1a:	69ba      	ldr	r2, [r7, #24]
 8001f1c:	23f0      	movs	r3, #240	; 0xf0
 8001f1e:	039b      	lsls	r3, r3, #14
 8001f20:	401a      	ands	r2, r3
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f26:	429a      	cmp	r2, r3
 8001f28:	d107      	bne.n	8001f3a <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001f2a:	69ba      	ldr	r2, [r7, #24]
 8001f2c:	23c0      	movs	r3, #192	; 0xc0
 8001f2e:	041b      	lsls	r3, r3, #16
 8001f30:	401a      	ands	r2, r3
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001f36:	429a      	cmp	r2, r3
 8001f38:	d001      	beq.n	8001f3e <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_ERROR;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	e000      	b.n	8001f40 <HAL_RCC_OscConfig+0x6ec>
        }
      }
    }
  }
  return HAL_OK;
 8001f3e:	2300      	movs	r3, #0
}
 8001f40:	0018      	movs	r0, r3
 8001f42:	46bd      	mov	sp, r7
 8001f44:	b00a      	add	sp, #40	; 0x28
 8001f46:	bdb0      	pop	{r4, r5, r7, pc}
 8001f48:	40021000 	.word	0x40021000

08001f4c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f4c:	b5b0      	push	{r4, r5, r7, lr}
 8001f4e:	b084      	sub	sp, #16
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
 8001f54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d101      	bne.n	8001f60 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	e128      	b.n	80021b2 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f60:	4b96      	ldr	r3, [pc, #600]	; (80021bc <HAL_RCC_ClockConfig+0x270>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	2201      	movs	r2, #1
 8001f66:	4013      	ands	r3, r2
 8001f68:	683a      	ldr	r2, [r7, #0]
 8001f6a:	429a      	cmp	r2, r3
 8001f6c:	d91e      	bls.n	8001fac <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f6e:	4b93      	ldr	r3, [pc, #588]	; (80021bc <HAL_RCC_ClockConfig+0x270>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	2201      	movs	r2, #1
 8001f74:	4393      	bics	r3, r2
 8001f76:	0019      	movs	r1, r3
 8001f78:	4b90      	ldr	r3, [pc, #576]	; (80021bc <HAL_RCC_ClockConfig+0x270>)
 8001f7a:	683a      	ldr	r2, [r7, #0]
 8001f7c:	430a      	orrs	r2, r1
 8001f7e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001f80:	f7ff fa44 	bl	800140c <HAL_GetTick>
 8001f84:	0003      	movs	r3, r0
 8001f86:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f88:	e009      	b.n	8001f9e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f8a:	f7ff fa3f 	bl	800140c <HAL_GetTick>
 8001f8e:	0002      	movs	r2, r0
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	1ad3      	subs	r3, r2, r3
 8001f94:	4a8a      	ldr	r2, [pc, #552]	; (80021c0 <HAL_RCC_ClockConfig+0x274>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d901      	bls.n	8001f9e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001f9a:	2303      	movs	r3, #3
 8001f9c:	e109      	b.n	80021b2 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f9e:	4b87      	ldr	r3, [pc, #540]	; (80021bc <HAL_RCC_ClockConfig+0x270>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	683a      	ldr	r2, [r7, #0]
 8001fa8:	429a      	cmp	r2, r3
 8001faa:	d1ee      	bne.n	8001f8a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	2202      	movs	r2, #2
 8001fb2:	4013      	ands	r3, r2
 8001fb4:	d009      	beq.n	8001fca <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fb6:	4b83      	ldr	r3, [pc, #524]	; (80021c4 <HAL_RCC_ClockConfig+0x278>)
 8001fb8:	68db      	ldr	r3, [r3, #12]
 8001fba:	22f0      	movs	r2, #240	; 0xf0
 8001fbc:	4393      	bics	r3, r2
 8001fbe:	0019      	movs	r1, r3
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	689a      	ldr	r2, [r3, #8]
 8001fc4:	4b7f      	ldr	r3, [pc, #508]	; (80021c4 <HAL_RCC_ClockConfig+0x278>)
 8001fc6:	430a      	orrs	r2, r1
 8001fc8:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	2201      	movs	r2, #1
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	d100      	bne.n	8001fd6 <HAL_RCC_ClockConfig+0x8a>
 8001fd4:	e089      	b.n	80020ea <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	2b02      	cmp	r3, #2
 8001fdc:	d107      	bne.n	8001fee <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001fde:	4b79      	ldr	r3, [pc, #484]	; (80021c4 <HAL_RCC_ClockConfig+0x278>)
 8001fe0:	681a      	ldr	r2, [r3, #0]
 8001fe2:	2380      	movs	r3, #128	; 0x80
 8001fe4:	029b      	lsls	r3, r3, #10
 8001fe6:	4013      	ands	r3, r2
 8001fe8:	d120      	bne.n	800202c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001fea:	2301      	movs	r3, #1
 8001fec:	e0e1      	b.n	80021b2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	2b03      	cmp	r3, #3
 8001ff4:	d107      	bne.n	8002006 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001ff6:	4b73      	ldr	r3, [pc, #460]	; (80021c4 <HAL_RCC_ClockConfig+0x278>)
 8001ff8:	681a      	ldr	r2, [r3, #0]
 8001ffa:	2380      	movs	r3, #128	; 0x80
 8001ffc:	049b      	lsls	r3, r3, #18
 8001ffe:	4013      	ands	r3, r2
 8002000:	d114      	bne.n	800202c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002002:	2301      	movs	r3, #1
 8002004:	e0d5      	b.n	80021b2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	2b01      	cmp	r3, #1
 800200c:	d106      	bne.n	800201c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800200e:	4b6d      	ldr	r3, [pc, #436]	; (80021c4 <HAL_RCC_ClockConfig+0x278>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	2204      	movs	r2, #4
 8002014:	4013      	ands	r3, r2
 8002016:	d109      	bne.n	800202c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002018:	2301      	movs	r3, #1
 800201a:	e0ca      	b.n	80021b2 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800201c:	4b69      	ldr	r3, [pc, #420]	; (80021c4 <HAL_RCC_ClockConfig+0x278>)
 800201e:	681a      	ldr	r2, [r3, #0]
 8002020:	2380      	movs	r3, #128	; 0x80
 8002022:	009b      	lsls	r3, r3, #2
 8002024:	4013      	ands	r3, r2
 8002026:	d101      	bne.n	800202c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002028:	2301      	movs	r3, #1
 800202a:	e0c2      	b.n	80021b2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800202c:	4b65      	ldr	r3, [pc, #404]	; (80021c4 <HAL_RCC_ClockConfig+0x278>)
 800202e:	68db      	ldr	r3, [r3, #12]
 8002030:	2203      	movs	r2, #3
 8002032:	4393      	bics	r3, r2
 8002034:	0019      	movs	r1, r3
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	685a      	ldr	r2, [r3, #4]
 800203a:	4b62      	ldr	r3, [pc, #392]	; (80021c4 <HAL_RCC_ClockConfig+0x278>)
 800203c:	430a      	orrs	r2, r1
 800203e:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002040:	f7ff f9e4 	bl	800140c <HAL_GetTick>
 8002044:	0003      	movs	r3, r0
 8002046:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	2b02      	cmp	r3, #2
 800204e:	d111      	bne.n	8002074 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002050:	e009      	b.n	8002066 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002052:	f7ff f9db 	bl	800140c <HAL_GetTick>
 8002056:	0002      	movs	r2, r0
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	1ad3      	subs	r3, r2, r3
 800205c:	4a58      	ldr	r2, [pc, #352]	; (80021c0 <HAL_RCC_ClockConfig+0x274>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d901      	bls.n	8002066 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8002062:	2303      	movs	r3, #3
 8002064:	e0a5      	b.n	80021b2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002066:	4b57      	ldr	r3, [pc, #348]	; (80021c4 <HAL_RCC_ClockConfig+0x278>)
 8002068:	68db      	ldr	r3, [r3, #12]
 800206a:	220c      	movs	r2, #12
 800206c:	4013      	ands	r3, r2
 800206e:	2b08      	cmp	r3, #8
 8002070:	d1ef      	bne.n	8002052 <HAL_RCC_ClockConfig+0x106>
 8002072:	e03a      	b.n	80020ea <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	2b03      	cmp	r3, #3
 800207a:	d111      	bne.n	80020a0 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800207c:	e009      	b.n	8002092 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800207e:	f7ff f9c5 	bl	800140c <HAL_GetTick>
 8002082:	0002      	movs	r2, r0
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	1ad3      	subs	r3, r2, r3
 8002088:	4a4d      	ldr	r2, [pc, #308]	; (80021c0 <HAL_RCC_ClockConfig+0x274>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d901      	bls.n	8002092 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 800208e:	2303      	movs	r3, #3
 8002090:	e08f      	b.n	80021b2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002092:	4b4c      	ldr	r3, [pc, #304]	; (80021c4 <HAL_RCC_ClockConfig+0x278>)
 8002094:	68db      	ldr	r3, [r3, #12]
 8002096:	220c      	movs	r2, #12
 8002098:	4013      	ands	r3, r2
 800209a:	2b0c      	cmp	r3, #12
 800209c:	d1ef      	bne.n	800207e <HAL_RCC_ClockConfig+0x132>
 800209e:	e024      	b.n	80020ea <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	2b01      	cmp	r3, #1
 80020a6:	d11b      	bne.n	80020e0 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80020a8:	e009      	b.n	80020be <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020aa:	f7ff f9af 	bl	800140c <HAL_GetTick>
 80020ae:	0002      	movs	r2, r0
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	1ad3      	subs	r3, r2, r3
 80020b4:	4a42      	ldr	r2, [pc, #264]	; (80021c0 <HAL_RCC_ClockConfig+0x274>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d901      	bls.n	80020be <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 80020ba:	2303      	movs	r3, #3
 80020bc:	e079      	b.n	80021b2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80020be:	4b41      	ldr	r3, [pc, #260]	; (80021c4 <HAL_RCC_ClockConfig+0x278>)
 80020c0:	68db      	ldr	r3, [r3, #12]
 80020c2:	220c      	movs	r2, #12
 80020c4:	4013      	ands	r3, r2
 80020c6:	2b04      	cmp	r3, #4
 80020c8:	d1ef      	bne.n	80020aa <HAL_RCC_ClockConfig+0x15e>
 80020ca:	e00e      	b.n	80020ea <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020cc:	f7ff f99e 	bl	800140c <HAL_GetTick>
 80020d0:	0002      	movs	r2, r0
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	1ad3      	subs	r3, r2, r3
 80020d6:	4a3a      	ldr	r2, [pc, #232]	; (80021c0 <HAL_RCC_ClockConfig+0x274>)
 80020d8:	4293      	cmp	r3, r2
 80020da:	d901      	bls.n	80020e0 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 80020dc:	2303      	movs	r3, #3
 80020de:	e068      	b.n	80021b2 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80020e0:	4b38      	ldr	r3, [pc, #224]	; (80021c4 <HAL_RCC_ClockConfig+0x278>)
 80020e2:	68db      	ldr	r3, [r3, #12]
 80020e4:	220c      	movs	r2, #12
 80020e6:	4013      	ands	r3, r2
 80020e8:	d1f0      	bne.n	80020cc <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80020ea:	4b34      	ldr	r3, [pc, #208]	; (80021bc <HAL_RCC_ClockConfig+0x270>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	2201      	movs	r2, #1
 80020f0:	4013      	ands	r3, r2
 80020f2:	683a      	ldr	r2, [r7, #0]
 80020f4:	429a      	cmp	r2, r3
 80020f6:	d21e      	bcs.n	8002136 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020f8:	4b30      	ldr	r3, [pc, #192]	; (80021bc <HAL_RCC_ClockConfig+0x270>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	2201      	movs	r2, #1
 80020fe:	4393      	bics	r3, r2
 8002100:	0019      	movs	r1, r3
 8002102:	4b2e      	ldr	r3, [pc, #184]	; (80021bc <HAL_RCC_ClockConfig+0x270>)
 8002104:	683a      	ldr	r2, [r7, #0]
 8002106:	430a      	orrs	r2, r1
 8002108:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800210a:	f7ff f97f 	bl	800140c <HAL_GetTick>
 800210e:	0003      	movs	r3, r0
 8002110:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002112:	e009      	b.n	8002128 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002114:	f7ff f97a 	bl	800140c <HAL_GetTick>
 8002118:	0002      	movs	r2, r0
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	1ad3      	subs	r3, r2, r3
 800211e:	4a28      	ldr	r2, [pc, #160]	; (80021c0 <HAL_RCC_ClockConfig+0x274>)
 8002120:	4293      	cmp	r3, r2
 8002122:	d901      	bls.n	8002128 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8002124:	2303      	movs	r3, #3
 8002126:	e044      	b.n	80021b2 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002128:	4b24      	ldr	r3, [pc, #144]	; (80021bc <HAL_RCC_ClockConfig+0x270>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	2201      	movs	r2, #1
 800212e:	4013      	ands	r3, r2
 8002130:	683a      	ldr	r2, [r7, #0]
 8002132:	429a      	cmp	r2, r3
 8002134:	d1ee      	bne.n	8002114 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	2204      	movs	r2, #4
 800213c:	4013      	ands	r3, r2
 800213e:	d009      	beq.n	8002154 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002140:	4b20      	ldr	r3, [pc, #128]	; (80021c4 <HAL_RCC_ClockConfig+0x278>)
 8002142:	68db      	ldr	r3, [r3, #12]
 8002144:	4a20      	ldr	r2, [pc, #128]	; (80021c8 <HAL_RCC_ClockConfig+0x27c>)
 8002146:	4013      	ands	r3, r2
 8002148:	0019      	movs	r1, r3
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	68da      	ldr	r2, [r3, #12]
 800214e:	4b1d      	ldr	r3, [pc, #116]	; (80021c4 <HAL_RCC_ClockConfig+0x278>)
 8002150:	430a      	orrs	r2, r1
 8002152:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	2208      	movs	r2, #8
 800215a:	4013      	ands	r3, r2
 800215c:	d00a      	beq.n	8002174 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800215e:	4b19      	ldr	r3, [pc, #100]	; (80021c4 <HAL_RCC_ClockConfig+0x278>)
 8002160:	68db      	ldr	r3, [r3, #12]
 8002162:	4a1a      	ldr	r2, [pc, #104]	; (80021cc <HAL_RCC_ClockConfig+0x280>)
 8002164:	4013      	ands	r3, r2
 8002166:	0019      	movs	r1, r3
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	691b      	ldr	r3, [r3, #16]
 800216c:	00da      	lsls	r2, r3, #3
 800216e:	4b15      	ldr	r3, [pc, #84]	; (80021c4 <HAL_RCC_ClockConfig+0x278>)
 8002170:	430a      	orrs	r2, r1
 8002172:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002174:	f000 f832 	bl	80021dc <HAL_RCC_GetSysClockFreq>
 8002178:	0001      	movs	r1, r0
 800217a:	4b12      	ldr	r3, [pc, #72]	; (80021c4 <HAL_RCC_ClockConfig+0x278>)
 800217c:	68db      	ldr	r3, [r3, #12]
 800217e:	091b      	lsrs	r3, r3, #4
 8002180:	220f      	movs	r2, #15
 8002182:	4013      	ands	r3, r2
 8002184:	4a12      	ldr	r2, [pc, #72]	; (80021d0 <HAL_RCC_ClockConfig+0x284>)
 8002186:	5cd3      	ldrb	r3, [r2, r3]
 8002188:	000a      	movs	r2, r1
 800218a:	40da      	lsrs	r2, r3
 800218c:	4b11      	ldr	r3, [pc, #68]	; (80021d4 <HAL_RCC_ClockConfig+0x288>)
 800218e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002190:	4b11      	ldr	r3, [pc, #68]	; (80021d8 <HAL_RCC_ClockConfig+0x28c>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	250b      	movs	r5, #11
 8002196:	197c      	adds	r4, r7, r5
 8002198:	0018      	movs	r0, r3
 800219a:	f7ff f8f1 	bl	8001380 <HAL_InitTick>
 800219e:	0003      	movs	r3, r0
 80021a0:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 80021a2:	197b      	adds	r3, r7, r5
 80021a4:	781b      	ldrb	r3, [r3, #0]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d002      	beq.n	80021b0 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 80021aa:	197b      	adds	r3, r7, r5
 80021ac:	781b      	ldrb	r3, [r3, #0]
 80021ae:	e000      	b.n	80021b2 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 80021b0:	2300      	movs	r3, #0
}
 80021b2:	0018      	movs	r0, r3
 80021b4:	46bd      	mov	sp, r7
 80021b6:	b004      	add	sp, #16
 80021b8:	bdb0      	pop	{r4, r5, r7, pc}
 80021ba:	46c0      	nop			; (mov r8, r8)
 80021bc:	40022000 	.word	0x40022000
 80021c0:	00001388 	.word	0x00001388
 80021c4:	40021000 	.word	0x40021000
 80021c8:	fffff8ff 	.word	0xfffff8ff
 80021cc:	ffffc7ff 	.word	0xffffc7ff
 80021d0:	08002e5c 	.word	0x08002e5c
 80021d4:	20000008 	.word	0x20000008
 80021d8:	2000000c 	.word	0x2000000c

080021dc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021dc:	b5b0      	push	{r4, r5, r7, lr}
 80021de:	b08e      	sub	sp, #56	; 0x38
 80021e0:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 80021e2:	4b4c      	ldr	r3, [pc, #304]	; (8002314 <HAL_RCC_GetSysClockFreq+0x138>)
 80021e4:	68db      	ldr	r3, [r3, #12]
 80021e6:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80021e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80021ea:	230c      	movs	r3, #12
 80021ec:	4013      	ands	r3, r2
 80021ee:	2b0c      	cmp	r3, #12
 80021f0:	d014      	beq.n	800221c <HAL_RCC_GetSysClockFreq+0x40>
 80021f2:	d900      	bls.n	80021f6 <HAL_RCC_GetSysClockFreq+0x1a>
 80021f4:	e07b      	b.n	80022ee <HAL_RCC_GetSysClockFreq+0x112>
 80021f6:	2b04      	cmp	r3, #4
 80021f8:	d002      	beq.n	8002200 <HAL_RCC_GetSysClockFreq+0x24>
 80021fa:	2b08      	cmp	r3, #8
 80021fc:	d00b      	beq.n	8002216 <HAL_RCC_GetSysClockFreq+0x3a>
 80021fe:	e076      	b.n	80022ee <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002200:	4b44      	ldr	r3, [pc, #272]	; (8002314 <HAL_RCC_GetSysClockFreq+0x138>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	2210      	movs	r2, #16
 8002206:	4013      	ands	r3, r2
 8002208:	d002      	beq.n	8002210 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 800220a:	4b43      	ldr	r3, [pc, #268]	; (8002318 <HAL_RCC_GetSysClockFreq+0x13c>)
 800220c:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 800220e:	e07c      	b.n	800230a <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8002210:	4b42      	ldr	r3, [pc, #264]	; (800231c <HAL_RCC_GetSysClockFreq+0x140>)
 8002212:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002214:	e079      	b.n	800230a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002216:	4b42      	ldr	r3, [pc, #264]	; (8002320 <HAL_RCC_GetSysClockFreq+0x144>)
 8002218:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800221a:	e076      	b.n	800230a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800221c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800221e:	0c9a      	lsrs	r2, r3, #18
 8002220:	230f      	movs	r3, #15
 8002222:	401a      	ands	r2, r3
 8002224:	4b3f      	ldr	r3, [pc, #252]	; (8002324 <HAL_RCC_GetSysClockFreq+0x148>)
 8002226:	5c9b      	ldrb	r3, [r3, r2]
 8002228:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800222a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800222c:	0d9a      	lsrs	r2, r3, #22
 800222e:	2303      	movs	r3, #3
 8002230:	4013      	ands	r3, r2
 8002232:	3301      	adds	r3, #1
 8002234:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002236:	4b37      	ldr	r3, [pc, #220]	; (8002314 <HAL_RCC_GetSysClockFreq+0x138>)
 8002238:	68da      	ldr	r2, [r3, #12]
 800223a:	2380      	movs	r3, #128	; 0x80
 800223c:	025b      	lsls	r3, r3, #9
 800223e:	4013      	ands	r3, r2
 8002240:	d01a      	beq.n	8002278 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002242:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002244:	61bb      	str	r3, [r7, #24]
 8002246:	2300      	movs	r3, #0
 8002248:	61fb      	str	r3, [r7, #28]
 800224a:	4a35      	ldr	r2, [pc, #212]	; (8002320 <HAL_RCC_GetSysClockFreq+0x144>)
 800224c:	2300      	movs	r3, #0
 800224e:	69b8      	ldr	r0, [r7, #24]
 8002250:	69f9      	ldr	r1, [r7, #28]
 8002252:	f7fe f805 	bl	8000260 <__aeabi_lmul>
 8002256:	0002      	movs	r2, r0
 8002258:	000b      	movs	r3, r1
 800225a:	0010      	movs	r0, r2
 800225c:	0019      	movs	r1, r3
 800225e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002260:	613b      	str	r3, [r7, #16]
 8002262:	2300      	movs	r3, #0
 8002264:	617b      	str	r3, [r7, #20]
 8002266:	693a      	ldr	r2, [r7, #16]
 8002268:	697b      	ldr	r3, [r7, #20]
 800226a:	f7fd ffd9 	bl	8000220 <__aeabi_uldivmod>
 800226e:	0002      	movs	r2, r0
 8002270:	000b      	movs	r3, r1
 8002272:	0013      	movs	r3, r2
 8002274:	637b      	str	r3, [r7, #52]	; 0x34
 8002276:	e037      	b.n	80022e8 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002278:	4b26      	ldr	r3, [pc, #152]	; (8002314 <HAL_RCC_GetSysClockFreq+0x138>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	2210      	movs	r2, #16
 800227e:	4013      	ands	r3, r2
 8002280:	d01a      	beq.n	80022b8 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8002282:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002284:	60bb      	str	r3, [r7, #8]
 8002286:	2300      	movs	r3, #0
 8002288:	60fb      	str	r3, [r7, #12]
 800228a:	4a23      	ldr	r2, [pc, #140]	; (8002318 <HAL_RCC_GetSysClockFreq+0x13c>)
 800228c:	2300      	movs	r3, #0
 800228e:	68b8      	ldr	r0, [r7, #8]
 8002290:	68f9      	ldr	r1, [r7, #12]
 8002292:	f7fd ffe5 	bl	8000260 <__aeabi_lmul>
 8002296:	0002      	movs	r2, r0
 8002298:	000b      	movs	r3, r1
 800229a:	0010      	movs	r0, r2
 800229c:	0019      	movs	r1, r3
 800229e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a0:	603b      	str	r3, [r7, #0]
 80022a2:	2300      	movs	r3, #0
 80022a4:	607b      	str	r3, [r7, #4]
 80022a6:	683a      	ldr	r2, [r7, #0]
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	f7fd ffb9 	bl	8000220 <__aeabi_uldivmod>
 80022ae:	0002      	movs	r2, r0
 80022b0:	000b      	movs	r3, r1
 80022b2:	0013      	movs	r3, r2
 80022b4:	637b      	str	r3, [r7, #52]	; 0x34
 80022b6:	e017      	b.n	80022e8 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80022b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022ba:	0018      	movs	r0, r3
 80022bc:	2300      	movs	r3, #0
 80022be:	0019      	movs	r1, r3
 80022c0:	4a16      	ldr	r2, [pc, #88]	; (800231c <HAL_RCC_GetSysClockFreq+0x140>)
 80022c2:	2300      	movs	r3, #0
 80022c4:	f7fd ffcc 	bl	8000260 <__aeabi_lmul>
 80022c8:	0002      	movs	r2, r0
 80022ca:	000b      	movs	r3, r1
 80022cc:	0010      	movs	r0, r2
 80022ce:	0019      	movs	r1, r3
 80022d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d2:	001c      	movs	r4, r3
 80022d4:	2300      	movs	r3, #0
 80022d6:	001d      	movs	r5, r3
 80022d8:	0022      	movs	r2, r4
 80022da:	002b      	movs	r3, r5
 80022dc:	f7fd ffa0 	bl	8000220 <__aeabi_uldivmod>
 80022e0:	0002      	movs	r2, r0
 80022e2:	000b      	movs	r3, r1
 80022e4:	0013      	movs	r3, r2
 80022e6:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 80022e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022ea:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80022ec:	e00d      	b.n	800230a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80022ee:	4b09      	ldr	r3, [pc, #36]	; (8002314 <HAL_RCC_GetSysClockFreq+0x138>)
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	0b5b      	lsrs	r3, r3, #13
 80022f4:	2207      	movs	r2, #7
 80022f6:	4013      	ands	r3, r2
 80022f8:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80022fa:	6a3b      	ldr	r3, [r7, #32]
 80022fc:	3301      	adds	r3, #1
 80022fe:	2280      	movs	r2, #128	; 0x80
 8002300:	0212      	lsls	r2, r2, #8
 8002302:	409a      	lsls	r2, r3
 8002304:	0013      	movs	r3, r2
 8002306:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002308:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800230a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800230c:	0018      	movs	r0, r3
 800230e:	46bd      	mov	sp, r7
 8002310:	b00e      	add	sp, #56	; 0x38
 8002312:	bdb0      	pop	{r4, r5, r7, pc}
 8002314:	40021000 	.word	0x40021000
 8002318:	003d0900 	.word	0x003d0900
 800231c:	00f42400 	.word	0x00f42400
 8002320:	007a1200 	.word	0x007a1200
 8002324:	08002e6c 	.word	0x08002e6c

08002328 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b082      	sub	sp, #8
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2b00      	cmp	r3, #0
 8002334:	d101      	bne.n	800233a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002336:	2301      	movs	r3, #1
 8002338:	e032      	b.n	80023a0 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2239      	movs	r2, #57	; 0x39
 800233e:	5c9b      	ldrb	r3, [r3, r2]
 8002340:	b2db      	uxtb	r3, r3
 8002342:	2b00      	cmp	r3, #0
 8002344:	d107      	bne.n	8002356 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2238      	movs	r2, #56	; 0x38
 800234a:	2100      	movs	r1, #0
 800234c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	0018      	movs	r0, r3
 8002352:	f7fe ff45 	bl	80011e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	2239      	movs	r2, #57	; 0x39
 800235a:	2102      	movs	r1, #2
 800235c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681a      	ldr	r2, [r3, #0]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	3304      	adds	r3, #4
 8002366:	0019      	movs	r1, r3
 8002368:	0010      	movs	r0, r2
 800236a:	f000 fa83 	bl	8002874 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	223e      	movs	r2, #62	; 0x3e
 8002372:	2101      	movs	r1, #1
 8002374:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	223a      	movs	r2, #58	; 0x3a
 800237a:	2101      	movs	r1, #1
 800237c:	5499      	strb	r1, [r3, r2]
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	223b      	movs	r2, #59	; 0x3b
 8002382:	2101      	movs	r1, #1
 8002384:	5499      	strb	r1, [r3, r2]
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	223c      	movs	r2, #60	; 0x3c
 800238a:	2101      	movs	r1, #1
 800238c:	5499      	strb	r1, [r3, r2]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	223d      	movs	r2, #61	; 0x3d
 8002392:	2101      	movs	r1, #1
 8002394:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2239      	movs	r2, #57	; 0x39
 800239a:	2101      	movs	r1, #1
 800239c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800239e:	2300      	movs	r3, #0
}
 80023a0:	0018      	movs	r0, r3
 80023a2:	46bd      	mov	sp, r7
 80023a4:	b002      	add	sp, #8
 80023a6:	bd80      	pop	{r7, pc}

080023a8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b082      	sub	sp, #8
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d101      	bne.n	80023ba <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80023b6:	2301      	movs	r3, #1
 80023b8:	e032      	b.n	8002420 <HAL_TIM_PWM_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2239      	movs	r2, #57	; 0x39
 80023be:	5c9b      	ldrb	r3, [r3, r2]
 80023c0:	b2db      	uxtb	r3, r3
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d107      	bne.n	80023d6 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2238      	movs	r2, #56	; 0x38
 80023ca:	2100      	movs	r1, #0
 80023cc:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	0018      	movs	r0, r3
 80023d2:	f000 f829 	bl	8002428 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2239      	movs	r2, #57	; 0x39
 80023da:	2102      	movs	r1, #2
 80023dc:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681a      	ldr	r2, [r3, #0]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	3304      	adds	r3, #4
 80023e6:	0019      	movs	r1, r3
 80023e8:	0010      	movs	r0, r2
 80023ea:	f000 fa43 	bl	8002874 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	223e      	movs	r2, #62	; 0x3e
 80023f2:	2101      	movs	r1, #1
 80023f4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	223a      	movs	r2, #58	; 0x3a
 80023fa:	2101      	movs	r1, #1
 80023fc:	5499      	strb	r1, [r3, r2]
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	223b      	movs	r2, #59	; 0x3b
 8002402:	2101      	movs	r1, #1
 8002404:	5499      	strb	r1, [r3, r2]
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	223c      	movs	r2, #60	; 0x3c
 800240a:	2101      	movs	r1, #1
 800240c:	5499      	strb	r1, [r3, r2]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	223d      	movs	r2, #61	; 0x3d
 8002412:	2101      	movs	r1, #1
 8002414:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2239      	movs	r2, #57	; 0x39
 800241a:	2101      	movs	r1, #1
 800241c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800241e:	2300      	movs	r3, #0
}
 8002420:	0018      	movs	r0, r3
 8002422:	46bd      	mov	sp, r7
 8002424:	b002      	add	sp, #8
 8002426:	bd80      	pop	{r7, pc}

08002428 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b082      	sub	sp, #8
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002430:	46c0      	nop			; (mov r8, r8)
 8002432:	46bd      	mov	sp, r7
 8002434:	b002      	add	sp, #8
 8002436:	bd80      	pop	{r7, pc}

08002438 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b084      	sub	sp, #16
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
 8002440:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d108      	bne.n	800245a <HAL_TIM_PWM_Start+0x22>
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	223a      	movs	r2, #58	; 0x3a
 800244c:	5c9b      	ldrb	r3, [r3, r2]
 800244e:	b2db      	uxtb	r3, r3
 8002450:	3b01      	subs	r3, #1
 8002452:	1e5a      	subs	r2, r3, #1
 8002454:	4193      	sbcs	r3, r2
 8002456:	b2db      	uxtb	r3, r3
 8002458:	e01f      	b.n	800249a <HAL_TIM_PWM_Start+0x62>
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	2b04      	cmp	r3, #4
 800245e:	d108      	bne.n	8002472 <HAL_TIM_PWM_Start+0x3a>
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	223b      	movs	r2, #59	; 0x3b
 8002464:	5c9b      	ldrb	r3, [r3, r2]
 8002466:	b2db      	uxtb	r3, r3
 8002468:	3b01      	subs	r3, #1
 800246a:	1e5a      	subs	r2, r3, #1
 800246c:	4193      	sbcs	r3, r2
 800246e:	b2db      	uxtb	r3, r3
 8002470:	e013      	b.n	800249a <HAL_TIM_PWM_Start+0x62>
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	2b08      	cmp	r3, #8
 8002476:	d108      	bne.n	800248a <HAL_TIM_PWM_Start+0x52>
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	223c      	movs	r2, #60	; 0x3c
 800247c:	5c9b      	ldrb	r3, [r3, r2]
 800247e:	b2db      	uxtb	r3, r3
 8002480:	3b01      	subs	r3, #1
 8002482:	1e5a      	subs	r2, r3, #1
 8002484:	4193      	sbcs	r3, r2
 8002486:	b2db      	uxtb	r3, r3
 8002488:	e007      	b.n	800249a <HAL_TIM_PWM_Start+0x62>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	223d      	movs	r2, #61	; 0x3d
 800248e:	5c9b      	ldrb	r3, [r3, r2]
 8002490:	b2db      	uxtb	r3, r3
 8002492:	3b01      	subs	r3, #1
 8002494:	1e5a      	subs	r2, r3, #1
 8002496:	4193      	sbcs	r3, r2
 8002498:	b2db      	uxtb	r3, r3
 800249a:	2b00      	cmp	r3, #0
 800249c:	d001      	beq.n	80024a2 <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 800249e:	2301      	movs	r3, #1
 80024a0:	e048      	b.n	8002534 <HAL_TIM_PWM_Start+0xfc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d104      	bne.n	80024b2 <HAL_TIM_PWM_Start+0x7a>
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	223a      	movs	r2, #58	; 0x3a
 80024ac:	2102      	movs	r1, #2
 80024ae:	5499      	strb	r1, [r3, r2]
 80024b0:	e013      	b.n	80024da <HAL_TIM_PWM_Start+0xa2>
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	2b04      	cmp	r3, #4
 80024b6:	d104      	bne.n	80024c2 <HAL_TIM_PWM_Start+0x8a>
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	223b      	movs	r2, #59	; 0x3b
 80024bc:	2102      	movs	r1, #2
 80024be:	5499      	strb	r1, [r3, r2]
 80024c0:	e00b      	b.n	80024da <HAL_TIM_PWM_Start+0xa2>
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	2b08      	cmp	r3, #8
 80024c6:	d104      	bne.n	80024d2 <HAL_TIM_PWM_Start+0x9a>
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	223c      	movs	r2, #60	; 0x3c
 80024cc:	2102      	movs	r1, #2
 80024ce:	5499      	strb	r1, [r3, r2]
 80024d0:	e003      	b.n	80024da <HAL_TIM_PWM_Start+0xa2>
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	223d      	movs	r2, #61	; 0x3d
 80024d6:	2102      	movs	r1, #2
 80024d8:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	6839      	ldr	r1, [r7, #0]
 80024e0:	2201      	movs	r2, #1
 80024e2:	0018      	movs	r0, r3
 80024e4:	f000 fbae 	bl	8002c44 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681a      	ldr	r2, [r3, #0]
 80024ec:	2380      	movs	r3, #128	; 0x80
 80024ee:	05db      	lsls	r3, r3, #23
 80024f0:	429a      	cmp	r2, r3
 80024f2:	d004      	beq.n	80024fe <HAL_TIM_PWM_Start+0xc6>
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a10      	ldr	r2, [pc, #64]	; (800253c <HAL_TIM_PWM_Start+0x104>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d111      	bne.n	8002522 <HAL_TIM_PWM_Start+0xea>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	689b      	ldr	r3, [r3, #8]
 8002504:	2207      	movs	r2, #7
 8002506:	4013      	ands	r3, r2
 8002508:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	2b06      	cmp	r3, #6
 800250e:	d010      	beq.n	8002532 <HAL_TIM_PWM_Start+0xfa>
    {
      __HAL_TIM_ENABLE(htim);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	681a      	ldr	r2, [r3, #0]
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	2101      	movs	r1, #1
 800251c:	430a      	orrs	r2, r1
 800251e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002520:	e007      	b.n	8002532 <HAL_TIM_PWM_Start+0xfa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	681a      	ldr	r2, [r3, #0]
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	2101      	movs	r1, #1
 800252e:	430a      	orrs	r2, r1
 8002530:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002532:	2300      	movs	r3, #0
}
 8002534:	0018      	movs	r0, r3
 8002536:	46bd      	mov	sp, r7
 8002538:	b004      	add	sp, #16
 800253a:	bd80      	pop	{r7, pc}
 800253c:	40010800 	.word	0x40010800

08002540 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b086      	sub	sp, #24
 8002544:	af00      	add	r7, sp, #0
 8002546:	60f8      	str	r0, [r7, #12]
 8002548:	60b9      	str	r1, [r7, #8]
 800254a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800254c:	2317      	movs	r3, #23
 800254e:	18fb      	adds	r3, r7, r3
 8002550:	2200      	movs	r2, #0
 8002552:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	2238      	movs	r2, #56	; 0x38
 8002558:	5c9b      	ldrb	r3, [r3, r2]
 800255a:	2b01      	cmp	r3, #1
 800255c:	d101      	bne.n	8002562 <HAL_TIM_PWM_ConfigChannel+0x22>
 800255e:	2302      	movs	r3, #2
 8002560:	e0ad      	b.n	80026be <HAL_TIM_PWM_ConfigChannel+0x17e>
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	2238      	movs	r2, #56	; 0x38
 8002566:	2101      	movs	r1, #1
 8002568:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2b0c      	cmp	r3, #12
 800256e:	d100      	bne.n	8002572 <HAL_TIM_PWM_ConfigChannel+0x32>
 8002570:	e076      	b.n	8002660 <HAL_TIM_PWM_ConfigChannel+0x120>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2b0c      	cmp	r3, #12
 8002576:	d900      	bls.n	800257a <HAL_TIM_PWM_ConfigChannel+0x3a>
 8002578:	e095      	b.n	80026a6 <HAL_TIM_PWM_ConfigChannel+0x166>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2b08      	cmp	r3, #8
 800257e:	d04e      	beq.n	800261e <HAL_TIM_PWM_ConfigChannel+0xde>
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2b08      	cmp	r3, #8
 8002584:	d900      	bls.n	8002588 <HAL_TIM_PWM_ConfigChannel+0x48>
 8002586:	e08e      	b.n	80026a6 <HAL_TIM_PWM_ConfigChannel+0x166>
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d003      	beq.n	8002596 <HAL_TIM_PWM_ConfigChannel+0x56>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2b04      	cmp	r3, #4
 8002592:	d021      	beq.n	80025d8 <HAL_TIM_PWM_ConfigChannel+0x98>
 8002594:	e087      	b.n	80026a6 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	68ba      	ldr	r2, [r7, #8]
 800259c:	0011      	movs	r1, r2
 800259e:	0018      	movs	r0, r3
 80025a0:	f000 f9b2 	bl	8002908 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	699a      	ldr	r2, [r3, #24]
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	2108      	movs	r1, #8
 80025b0:	430a      	orrs	r2, r1
 80025b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	699a      	ldr	r2, [r3, #24]
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	2104      	movs	r1, #4
 80025c0:	438a      	bics	r2, r1
 80025c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	6999      	ldr	r1, [r3, #24]
 80025ca:	68bb      	ldr	r3, [r7, #8]
 80025cc:	68da      	ldr	r2, [r3, #12]
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	430a      	orrs	r2, r1
 80025d4:	619a      	str	r2, [r3, #24]
      break;
 80025d6:	e06b      	b.n	80026b0 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	68ba      	ldr	r2, [r7, #8]
 80025de:	0011      	movs	r1, r2
 80025e0:	0018      	movs	r0, r3
 80025e2:	f000 f9cd 	bl	8002980 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	699a      	ldr	r2, [r3, #24]
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	2180      	movs	r1, #128	; 0x80
 80025f2:	0109      	lsls	r1, r1, #4
 80025f4:	430a      	orrs	r2, r1
 80025f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	699a      	ldr	r2, [r3, #24]
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4931      	ldr	r1, [pc, #196]	; (80026c8 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8002604:	400a      	ands	r2, r1
 8002606:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	6999      	ldr	r1, [r3, #24]
 800260e:	68bb      	ldr	r3, [r7, #8]
 8002610:	68db      	ldr	r3, [r3, #12]
 8002612:	021a      	lsls	r2, r3, #8
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	430a      	orrs	r2, r1
 800261a:	619a      	str	r2, [r3, #24]
      break;
 800261c:	e048      	b.n	80026b0 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	68ba      	ldr	r2, [r7, #8]
 8002624:	0011      	movs	r1, r2
 8002626:	0018      	movs	r0, r3
 8002628:	f000 f9ec 	bl	8002a04 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	69da      	ldr	r2, [r3, #28]
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	2108      	movs	r1, #8
 8002638:	430a      	orrs	r2, r1
 800263a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	69da      	ldr	r2, [r3, #28]
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	2104      	movs	r1, #4
 8002648:	438a      	bics	r2, r1
 800264a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	69d9      	ldr	r1, [r3, #28]
 8002652:	68bb      	ldr	r3, [r7, #8]
 8002654:	68da      	ldr	r2, [r3, #12]
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	430a      	orrs	r2, r1
 800265c:	61da      	str	r2, [r3, #28]
      break;
 800265e:	e027      	b.n	80026b0 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	68ba      	ldr	r2, [r7, #8]
 8002666:	0011      	movs	r1, r2
 8002668:	0018      	movs	r0, r3
 800266a:	f000 fa0b 	bl	8002a84 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	69da      	ldr	r2, [r3, #28]
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	2180      	movs	r1, #128	; 0x80
 800267a:	0109      	lsls	r1, r1, #4
 800267c:	430a      	orrs	r2, r1
 800267e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	69da      	ldr	r2, [r3, #28]
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	490f      	ldr	r1, [pc, #60]	; (80026c8 <HAL_TIM_PWM_ConfigChannel+0x188>)
 800268c:	400a      	ands	r2, r1
 800268e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	69d9      	ldr	r1, [r3, #28]
 8002696:	68bb      	ldr	r3, [r7, #8]
 8002698:	68db      	ldr	r3, [r3, #12]
 800269a:	021a      	lsls	r2, r3, #8
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	430a      	orrs	r2, r1
 80026a2:	61da      	str	r2, [r3, #28]
      break;
 80026a4:	e004      	b.n	80026b0 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 80026a6:	2317      	movs	r3, #23
 80026a8:	18fb      	adds	r3, r7, r3
 80026aa:	2201      	movs	r2, #1
 80026ac:	701a      	strb	r2, [r3, #0]
      break;
 80026ae:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	2238      	movs	r2, #56	; 0x38
 80026b4:	2100      	movs	r1, #0
 80026b6:	5499      	strb	r1, [r3, r2]

  return status;
 80026b8:	2317      	movs	r3, #23
 80026ba:	18fb      	adds	r3, r7, r3
 80026bc:	781b      	ldrb	r3, [r3, #0]
}
 80026be:	0018      	movs	r0, r3
 80026c0:	46bd      	mov	sp, r7
 80026c2:	b006      	add	sp, #24
 80026c4:	bd80      	pop	{r7, pc}
 80026c6:	46c0      	nop			; (mov r8, r8)
 80026c8:	fffffbff 	.word	0xfffffbff

080026cc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b084      	sub	sp, #16
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
 80026d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80026d6:	230f      	movs	r3, #15
 80026d8:	18fb      	adds	r3, r7, r3
 80026da:	2200      	movs	r2, #0
 80026dc:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2238      	movs	r2, #56	; 0x38
 80026e2:	5c9b      	ldrb	r3, [r3, r2]
 80026e4:	2b01      	cmp	r3, #1
 80026e6:	d101      	bne.n	80026ec <HAL_TIM_ConfigClockSource+0x20>
 80026e8:	2302      	movs	r3, #2
 80026ea:	e0bc      	b.n	8002866 <HAL_TIM_ConfigClockSource+0x19a>
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2238      	movs	r2, #56	; 0x38
 80026f0:	2101      	movs	r1, #1
 80026f2:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2239      	movs	r2, #57	; 0x39
 80026f8:	2102      	movs	r1, #2
 80026fa:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	689b      	ldr	r3, [r3, #8]
 8002702:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002704:	68bb      	ldr	r3, [r7, #8]
 8002706:	2277      	movs	r2, #119	; 0x77
 8002708:	4393      	bics	r3, r2
 800270a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800270c:	68bb      	ldr	r3, [r7, #8]
 800270e:	4a58      	ldr	r2, [pc, #352]	; (8002870 <HAL_TIM_ConfigClockSource+0x1a4>)
 8002710:	4013      	ands	r3, r2
 8002712:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	68ba      	ldr	r2, [r7, #8]
 800271a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	2280      	movs	r2, #128	; 0x80
 8002722:	0192      	lsls	r2, r2, #6
 8002724:	4293      	cmp	r3, r2
 8002726:	d040      	beq.n	80027aa <HAL_TIM_ConfigClockSource+0xde>
 8002728:	2280      	movs	r2, #128	; 0x80
 800272a:	0192      	lsls	r2, r2, #6
 800272c:	4293      	cmp	r3, r2
 800272e:	d900      	bls.n	8002732 <HAL_TIM_ConfigClockSource+0x66>
 8002730:	e088      	b.n	8002844 <HAL_TIM_ConfigClockSource+0x178>
 8002732:	2280      	movs	r2, #128	; 0x80
 8002734:	0152      	lsls	r2, r2, #5
 8002736:	4293      	cmp	r3, r2
 8002738:	d100      	bne.n	800273c <HAL_TIM_ConfigClockSource+0x70>
 800273a:	e088      	b.n	800284e <HAL_TIM_ConfigClockSource+0x182>
 800273c:	2280      	movs	r2, #128	; 0x80
 800273e:	0152      	lsls	r2, r2, #5
 8002740:	4293      	cmp	r3, r2
 8002742:	d900      	bls.n	8002746 <HAL_TIM_ConfigClockSource+0x7a>
 8002744:	e07e      	b.n	8002844 <HAL_TIM_ConfigClockSource+0x178>
 8002746:	2b70      	cmp	r3, #112	; 0x70
 8002748:	d018      	beq.n	800277c <HAL_TIM_ConfigClockSource+0xb0>
 800274a:	d900      	bls.n	800274e <HAL_TIM_ConfigClockSource+0x82>
 800274c:	e07a      	b.n	8002844 <HAL_TIM_ConfigClockSource+0x178>
 800274e:	2b60      	cmp	r3, #96	; 0x60
 8002750:	d04f      	beq.n	80027f2 <HAL_TIM_ConfigClockSource+0x126>
 8002752:	d900      	bls.n	8002756 <HAL_TIM_ConfigClockSource+0x8a>
 8002754:	e076      	b.n	8002844 <HAL_TIM_ConfigClockSource+0x178>
 8002756:	2b50      	cmp	r3, #80	; 0x50
 8002758:	d03b      	beq.n	80027d2 <HAL_TIM_ConfigClockSource+0x106>
 800275a:	d900      	bls.n	800275e <HAL_TIM_ConfigClockSource+0x92>
 800275c:	e072      	b.n	8002844 <HAL_TIM_ConfigClockSource+0x178>
 800275e:	2b40      	cmp	r3, #64	; 0x40
 8002760:	d057      	beq.n	8002812 <HAL_TIM_ConfigClockSource+0x146>
 8002762:	d900      	bls.n	8002766 <HAL_TIM_ConfigClockSource+0x9a>
 8002764:	e06e      	b.n	8002844 <HAL_TIM_ConfigClockSource+0x178>
 8002766:	2b30      	cmp	r3, #48	; 0x30
 8002768:	d063      	beq.n	8002832 <HAL_TIM_ConfigClockSource+0x166>
 800276a:	d86b      	bhi.n	8002844 <HAL_TIM_ConfigClockSource+0x178>
 800276c:	2b20      	cmp	r3, #32
 800276e:	d060      	beq.n	8002832 <HAL_TIM_ConfigClockSource+0x166>
 8002770:	d868      	bhi.n	8002844 <HAL_TIM_ConfigClockSource+0x178>
 8002772:	2b00      	cmp	r3, #0
 8002774:	d05d      	beq.n	8002832 <HAL_TIM_ConfigClockSource+0x166>
 8002776:	2b10      	cmp	r3, #16
 8002778:	d05b      	beq.n	8002832 <HAL_TIM_ConfigClockSource+0x166>
 800277a:	e063      	b.n	8002844 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6818      	ldr	r0, [r3, #0]
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	6899      	ldr	r1, [r3, #8]
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	685a      	ldr	r2, [r3, #4]
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	68db      	ldr	r3, [r3, #12]
 800278c:	f000 fa3a 	bl	8002c04 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	689b      	ldr	r3, [r3, #8]
 8002796:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002798:	68bb      	ldr	r3, [r7, #8]
 800279a:	2277      	movs	r2, #119	; 0x77
 800279c:	4313      	orrs	r3, r2
 800279e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	68ba      	ldr	r2, [r7, #8]
 80027a6:	609a      	str	r2, [r3, #8]
      break;
 80027a8:	e052      	b.n	8002850 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6818      	ldr	r0, [r3, #0]
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	6899      	ldr	r1, [r3, #8]
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	685a      	ldr	r2, [r3, #4]
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	68db      	ldr	r3, [r3, #12]
 80027ba:	f000 fa23 	bl	8002c04 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	689a      	ldr	r2, [r3, #8]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	2180      	movs	r1, #128	; 0x80
 80027ca:	01c9      	lsls	r1, r1, #7
 80027cc:	430a      	orrs	r2, r1
 80027ce:	609a      	str	r2, [r3, #8]
      break;
 80027d0:	e03e      	b.n	8002850 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6818      	ldr	r0, [r3, #0]
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	6859      	ldr	r1, [r3, #4]
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	68db      	ldr	r3, [r3, #12]
 80027de:	001a      	movs	r2, r3
 80027e0:	f000 f996 	bl	8002b10 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	2150      	movs	r1, #80	; 0x50
 80027ea:	0018      	movs	r0, r3
 80027ec:	f000 f9f0 	bl	8002bd0 <TIM_ITRx_SetConfig>
      break;
 80027f0:	e02e      	b.n	8002850 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6818      	ldr	r0, [r3, #0]
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	6859      	ldr	r1, [r3, #4]
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	68db      	ldr	r3, [r3, #12]
 80027fe:	001a      	movs	r2, r3
 8002800:	f000 f9b4 	bl	8002b6c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	2160      	movs	r1, #96	; 0x60
 800280a:	0018      	movs	r0, r3
 800280c:	f000 f9e0 	bl	8002bd0 <TIM_ITRx_SetConfig>
      break;
 8002810:	e01e      	b.n	8002850 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6818      	ldr	r0, [r3, #0]
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	6859      	ldr	r1, [r3, #4]
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	68db      	ldr	r3, [r3, #12]
 800281e:	001a      	movs	r2, r3
 8002820:	f000 f976 	bl	8002b10 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	2140      	movs	r1, #64	; 0x40
 800282a:	0018      	movs	r0, r3
 800282c:	f000 f9d0 	bl	8002bd0 <TIM_ITRx_SetConfig>
      break;
 8002830:	e00e      	b.n	8002850 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681a      	ldr	r2, [r3, #0]
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	0019      	movs	r1, r3
 800283c:	0010      	movs	r0, r2
 800283e:	f000 f9c7 	bl	8002bd0 <TIM_ITRx_SetConfig>
      break;
 8002842:	e005      	b.n	8002850 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8002844:	230f      	movs	r3, #15
 8002846:	18fb      	adds	r3, r7, r3
 8002848:	2201      	movs	r2, #1
 800284a:	701a      	strb	r2, [r3, #0]
      break;
 800284c:	e000      	b.n	8002850 <HAL_TIM_ConfigClockSource+0x184>
      break;
 800284e:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2239      	movs	r2, #57	; 0x39
 8002854:	2101      	movs	r1, #1
 8002856:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2238      	movs	r2, #56	; 0x38
 800285c:	2100      	movs	r1, #0
 800285e:	5499      	strb	r1, [r3, r2]

  return status;
 8002860:	230f      	movs	r3, #15
 8002862:	18fb      	adds	r3, r7, r3
 8002864:	781b      	ldrb	r3, [r3, #0]
}
 8002866:	0018      	movs	r0, r3
 8002868:	46bd      	mov	sp, r7
 800286a:	b004      	add	sp, #16
 800286c:	bd80      	pop	{r7, pc}
 800286e:	46c0      	nop			; (mov r8, r8)
 8002870:	ffff00ff 	.word	0xffff00ff

08002874 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b084      	sub	sp, #16
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
 800287c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002884:	687a      	ldr	r2, [r7, #4]
 8002886:	2380      	movs	r3, #128	; 0x80
 8002888:	05db      	lsls	r3, r3, #23
 800288a:	429a      	cmp	r2, r3
 800288c:	d003      	beq.n	8002896 <TIM_Base_SetConfig+0x22>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	4a1b      	ldr	r2, [pc, #108]	; (8002900 <TIM_Base_SetConfig+0x8c>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d108      	bne.n	80028a8 <TIM_Base_SetConfig+0x34>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	2270      	movs	r2, #112	; 0x70
 800289a:	4393      	bics	r3, r2
 800289c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	68fa      	ldr	r2, [r7, #12]
 80028a4:	4313      	orrs	r3, r2
 80028a6:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80028a8:	687a      	ldr	r2, [r7, #4]
 80028aa:	2380      	movs	r3, #128	; 0x80
 80028ac:	05db      	lsls	r3, r3, #23
 80028ae:	429a      	cmp	r2, r3
 80028b0:	d003      	beq.n	80028ba <TIM_Base_SetConfig+0x46>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	4a12      	ldr	r2, [pc, #72]	; (8002900 <TIM_Base_SetConfig+0x8c>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d108      	bne.n	80028cc <TIM_Base_SetConfig+0x58>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	4a11      	ldr	r2, [pc, #68]	; (8002904 <TIM_Base_SetConfig+0x90>)
 80028be:	4013      	ands	r3, r2
 80028c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	68db      	ldr	r3, [r3, #12]
 80028c6:	68fa      	ldr	r2, [r7, #12]
 80028c8:	4313      	orrs	r3, r2
 80028ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	2280      	movs	r2, #128	; 0x80
 80028d0:	4393      	bics	r3, r2
 80028d2:	001a      	movs	r2, r3
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	691b      	ldr	r3, [r3, #16]
 80028d8:	4313      	orrs	r3, r2
 80028da:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	68fa      	ldr	r2, [r7, #12]
 80028e0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	689a      	ldr	r2, [r3, #8]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	681a      	ldr	r2, [r3, #0]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2201      	movs	r2, #1
 80028f6:	615a      	str	r2, [r3, #20]
}
 80028f8:	46c0      	nop			; (mov r8, r8)
 80028fa:	46bd      	mov	sp, r7
 80028fc:	b004      	add	sp, #16
 80028fe:	bd80      	pop	{r7, pc}
 8002900:	40010800 	.word	0x40010800
 8002904:	fffffcff 	.word	0xfffffcff

08002908 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b086      	sub	sp, #24
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
 8002910:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6a1b      	ldr	r3, [r3, #32]
 8002916:	2201      	movs	r2, #1
 8002918:	4393      	bics	r3, r2
 800291a:	001a      	movs	r2, r3
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6a1b      	ldr	r3, [r3, #32]
 8002924:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	699b      	ldr	r3, [r3, #24]
 8002930:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	2270      	movs	r2, #112	; 0x70
 8002936:	4393      	bics	r3, r2
 8002938:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	2203      	movs	r2, #3
 800293e:	4393      	bics	r3, r2
 8002940:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	68fa      	ldr	r2, [r7, #12]
 8002948:	4313      	orrs	r3, r2
 800294a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	2202      	movs	r2, #2
 8002950:	4393      	bics	r3, r2
 8002952:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	689b      	ldr	r3, [r3, #8]
 8002958:	697a      	ldr	r2, [r7, #20]
 800295a:	4313      	orrs	r3, r2
 800295c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	693a      	ldr	r2, [r7, #16]
 8002962:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	68fa      	ldr	r2, [r7, #12]
 8002968:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	685a      	ldr	r2, [r3, #4]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	697a      	ldr	r2, [r7, #20]
 8002976:	621a      	str	r2, [r3, #32]
}
 8002978:	46c0      	nop			; (mov r8, r8)
 800297a:	46bd      	mov	sp, r7
 800297c:	b006      	add	sp, #24
 800297e:	bd80      	pop	{r7, pc}

08002980 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b086      	sub	sp, #24
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
 8002988:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6a1b      	ldr	r3, [r3, #32]
 800298e:	2210      	movs	r2, #16
 8002990:	4393      	bics	r3, r2
 8002992:	001a      	movs	r2, r3
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6a1b      	ldr	r3, [r3, #32]
 800299c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	699b      	ldr	r3, [r3, #24]
 80029a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	4a13      	ldr	r2, [pc, #76]	; (80029fc <TIM_OC2_SetConfig+0x7c>)
 80029ae:	4013      	ands	r3, r2
 80029b0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	4a12      	ldr	r2, [pc, #72]	; (8002a00 <TIM_OC2_SetConfig+0x80>)
 80029b6:	4013      	ands	r3, r2
 80029b8:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	021b      	lsls	r3, r3, #8
 80029c0:	68fa      	ldr	r2, [r7, #12]
 80029c2:	4313      	orrs	r3, r2
 80029c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80029c6:	697b      	ldr	r3, [r7, #20]
 80029c8:	2220      	movs	r2, #32
 80029ca:	4393      	bics	r3, r2
 80029cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	689b      	ldr	r3, [r3, #8]
 80029d2:	011b      	lsls	r3, r3, #4
 80029d4:	697a      	ldr	r2, [r7, #20]
 80029d6:	4313      	orrs	r3, r2
 80029d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	693a      	ldr	r2, [r7, #16]
 80029de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	68fa      	ldr	r2, [r7, #12]
 80029e4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	685a      	ldr	r2, [r3, #4]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	697a      	ldr	r2, [r7, #20]
 80029f2:	621a      	str	r2, [r3, #32]
}
 80029f4:	46c0      	nop			; (mov r8, r8)
 80029f6:	46bd      	mov	sp, r7
 80029f8:	b006      	add	sp, #24
 80029fa:	bd80      	pop	{r7, pc}
 80029fc:	ffff8fff 	.word	0xffff8fff
 8002a00:	fffffcff 	.word	0xfffffcff

08002a04 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b086      	sub	sp, #24
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
 8002a0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6a1b      	ldr	r3, [r3, #32]
 8002a12:	4a1a      	ldr	r2, [pc, #104]	; (8002a7c <TIM_OC3_SetConfig+0x78>)
 8002a14:	401a      	ands	r2, r3
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6a1b      	ldr	r3, [r3, #32]
 8002a1e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	69db      	ldr	r3, [r3, #28]
 8002a2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	2270      	movs	r2, #112	; 0x70
 8002a30:	4393      	bics	r3, r2
 8002a32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	2203      	movs	r2, #3
 8002a38:	4393      	bics	r3, r2
 8002a3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	68fa      	ldr	r2, [r7, #12]
 8002a42:	4313      	orrs	r3, r2
 8002a44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002a46:	697b      	ldr	r3, [r7, #20]
 8002a48:	4a0d      	ldr	r2, [pc, #52]	; (8002a80 <TIM_OC3_SetConfig+0x7c>)
 8002a4a:	4013      	ands	r3, r2
 8002a4c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	689b      	ldr	r3, [r3, #8]
 8002a52:	021b      	lsls	r3, r3, #8
 8002a54:	697a      	ldr	r2, [r7, #20]
 8002a56:	4313      	orrs	r3, r2
 8002a58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	693a      	ldr	r2, [r7, #16]
 8002a5e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	68fa      	ldr	r2, [r7, #12]
 8002a64:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	685a      	ldr	r2, [r3, #4]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	697a      	ldr	r2, [r7, #20]
 8002a72:	621a      	str	r2, [r3, #32]
}
 8002a74:	46c0      	nop			; (mov r8, r8)
 8002a76:	46bd      	mov	sp, r7
 8002a78:	b006      	add	sp, #24
 8002a7a:	bd80      	pop	{r7, pc}
 8002a7c:	fffffeff 	.word	0xfffffeff
 8002a80:	fffffdff 	.word	0xfffffdff

08002a84 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b086      	sub	sp, #24
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
 8002a8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6a1b      	ldr	r3, [r3, #32]
 8002a92:	4a1b      	ldr	r2, [pc, #108]	; (8002b00 <TIM_OC4_SetConfig+0x7c>)
 8002a94:	401a      	ands	r2, r3
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6a1b      	ldr	r3, [r3, #32]
 8002a9e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	69db      	ldr	r3, [r3, #28]
 8002aaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	4a15      	ldr	r2, [pc, #84]	; (8002b04 <TIM_OC4_SetConfig+0x80>)
 8002ab0:	4013      	ands	r3, r2
 8002ab2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	4a14      	ldr	r2, [pc, #80]	; (8002b08 <TIM_OC4_SetConfig+0x84>)
 8002ab8:	4013      	ands	r3, r2
 8002aba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	021b      	lsls	r3, r3, #8
 8002ac2:	68fa      	ldr	r2, [r7, #12]
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002ac8:	697b      	ldr	r3, [r7, #20]
 8002aca:	4a10      	ldr	r2, [pc, #64]	; (8002b0c <TIM_OC4_SetConfig+0x88>)
 8002acc:	4013      	ands	r3, r2
 8002ace:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	689b      	ldr	r3, [r3, #8]
 8002ad4:	031b      	lsls	r3, r3, #12
 8002ad6:	697a      	ldr	r2, [r7, #20]
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	693a      	ldr	r2, [r7, #16]
 8002ae0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	68fa      	ldr	r2, [r7, #12]
 8002ae6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	685a      	ldr	r2, [r3, #4]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	697a      	ldr	r2, [r7, #20]
 8002af4:	621a      	str	r2, [r3, #32]
}
 8002af6:	46c0      	nop			; (mov r8, r8)
 8002af8:	46bd      	mov	sp, r7
 8002afa:	b006      	add	sp, #24
 8002afc:	bd80      	pop	{r7, pc}
 8002afe:	46c0      	nop			; (mov r8, r8)
 8002b00:	ffffefff 	.word	0xffffefff
 8002b04:	ffff8fff 	.word	0xffff8fff
 8002b08:	fffffcff 	.word	0xfffffcff
 8002b0c:	ffffdfff 	.word	0xffffdfff

08002b10 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b086      	sub	sp, #24
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	60f8      	str	r0, [r7, #12]
 8002b18:	60b9      	str	r1, [r7, #8]
 8002b1a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	6a1b      	ldr	r3, [r3, #32]
 8002b20:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	6a1b      	ldr	r3, [r3, #32]
 8002b26:	2201      	movs	r2, #1
 8002b28:	4393      	bics	r3, r2
 8002b2a:	001a      	movs	r2, r3
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	699b      	ldr	r3, [r3, #24]
 8002b34:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002b36:	693b      	ldr	r3, [r7, #16]
 8002b38:	22f0      	movs	r2, #240	; 0xf0
 8002b3a:	4393      	bics	r3, r2
 8002b3c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	011b      	lsls	r3, r3, #4
 8002b42:	693a      	ldr	r2, [r7, #16]
 8002b44:	4313      	orrs	r3, r2
 8002b46:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002b48:	697b      	ldr	r3, [r7, #20]
 8002b4a:	220a      	movs	r2, #10
 8002b4c:	4393      	bics	r3, r2
 8002b4e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002b50:	697a      	ldr	r2, [r7, #20]
 8002b52:	68bb      	ldr	r3, [r7, #8]
 8002b54:	4313      	orrs	r3, r2
 8002b56:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	693a      	ldr	r2, [r7, #16]
 8002b5c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	697a      	ldr	r2, [r7, #20]
 8002b62:	621a      	str	r2, [r3, #32]
}
 8002b64:	46c0      	nop			; (mov r8, r8)
 8002b66:	46bd      	mov	sp, r7
 8002b68:	b006      	add	sp, #24
 8002b6a:	bd80      	pop	{r7, pc}

08002b6c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b086      	sub	sp, #24
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	60f8      	str	r0, [r7, #12]
 8002b74:	60b9      	str	r1, [r7, #8]
 8002b76:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	6a1b      	ldr	r3, [r3, #32]
 8002b7c:	2210      	movs	r2, #16
 8002b7e:	4393      	bics	r3, r2
 8002b80:	001a      	movs	r2, r3
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	699b      	ldr	r3, [r3, #24]
 8002b8a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	6a1b      	ldr	r3, [r3, #32]
 8002b90:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002b92:	697b      	ldr	r3, [r7, #20]
 8002b94:	4a0d      	ldr	r2, [pc, #52]	; (8002bcc <TIM_TI2_ConfigInputStage+0x60>)
 8002b96:	4013      	ands	r3, r2
 8002b98:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	031b      	lsls	r3, r3, #12
 8002b9e:	697a      	ldr	r2, [r7, #20]
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002ba4:	693b      	ldr	r3, [r7, #16]
 8002ba6:	22a0      	movs	r2, #160	; 0xa0
 8002ba8:	4393      	bics	r3, r2
 8002baa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002bac:	68bb      	ldr	r3, [r7, #8]
 8002bae:	011b      	lsls	r3, r3, #4
 8002bb0:	693a      	ldr	r2, [r7, #16]
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	697a      	ldr	r2, [r7, #20]
 8002bba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	693a      	ldr	r2, [r7, #16]
 8002bc0:	621a      	str	r2, [r3, #32]
}
 8002bc2:	46c0      	nop			; (mov r8, r8)
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	b006      	add	sp, #24
 8002bc8:	bd80      	pop	{r7, pc}
 8002bca:	46c0      	nop			; (mov r8, r8)
 8002bcc:	ffff0fff 	.word	0xffff0fff

08002bd0 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b084      	sub	sp, #16
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
 8002bd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	689b      	ldr	r3, [r3, #8]
 8002bde:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	2270      	movs	r2, #112	; 0x70
 8002be4:	4393      	bics	r3, r2
 8002be6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002be8:	683a      	ldr	r2, [r7, #0]
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	4313      	orrs	r3, r2
 8002bee:	2207      	movs	r2, #7
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	68fa      	ldr	r2, [r7, #12]
 8002bf8:	609a      	str	r2, [r3, #8]
}
 8002bfa:	46c0      	nop			; (mov r8, r8)
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	b004      	add	sp, #16
 8002c00:	bd80      	pop	{r7, pc}
	...

08002c04 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b086      	sub	sp, #24
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	60f8      	str	r0, [r7, #12]
 8002c0c:	60b9      	str	r1, [r7, #8]
 8002c0e:	607a      	str	r2, [r7, #4]
 8002c10:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	689b      	ldr	r3, [r3, #8]
 8002c16:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c18:	697b      	ldr	r3, [r7, #20]
 8002c1a:	4a09      	ldr	r2, [pc, #36]	; (8002c40 <TIM_ETR_SetConfig+0x3c>)
 8002c1c:	4013      	ands	r3, r2
 8002c1e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	021a      	lsls	r2, r3, #8
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	431a      	orrs	r2, r3
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	697a      	ldr	r2, [r7, #20]
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	697a      	ldr	r2, [r7, #20]
 8002c36:	609a      	str	r2, [r3, #8]
}
 8002c38:	46c0      	nop			; (mov r8, r8)
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	b006      	add	sp, #24
 8002c3e:	bd80      	pop	{r7, pc}
 8002c40:	ffff00ff 	.word	0xffff00ff

08002c44 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b086      	sub	sp, #24
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	60f8      	str	r0, [r7, #12]
 8002c4c:	60b9      	str	r1, [r7, #8]
 8002c4e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002c50:	68bb      	ldr	r3, [r7, #8]
 8002c52:	221f      	movs	r2, #31
 8002c54:	4013      	ands	r3, r2
 8002c56:	2201      	movs	r2, #1
 8002c58:	409a      	lsls	r2, r3
 8002c5a:	0013      	movs	r3, r2
 8002c5c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	6a1b      	ldr	r3, [r3, #32]
 8002c62:	697a      	ldr	r2, [r7, #20]
 8002c64:	43d2      	mvns	r2, r2
 8002c66:	401a      	ands	r2, r3
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	6a1a      	ldr	r2, [r3, #32]
 8002c70:	68bb      	ldr	r3, [r7, #8]
 8002c72:	211f      	movs	r1, #31
 8002c74:	400b      	ands	r3, r1
 8002c76:	6879      	ldr	r1, [r7, #4]
 8002c78:	4099      	lsls	r1, r3
 8002c7a:	000b      	movs	r3, r1
 8002c7c:	431a      	orrs	r2, r3
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	621a      	str	r2, [r3, #32]
}
 8002c82:	46c0      	nop			; (mov r8, r8)
 8002c84:	46bd      	mov	sp, r7
 8002c86:	b006      	add	sp, #24
 8002c88:	bd80      	pop	{r7, pc}
	...

08002c8c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b084      	sub	sp, #16
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
 8002c94:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2238      	movs	r2, #56	; 0x38
 8002c9a:	5c9b      	ldrb	r3, [r3, r2]
 8002c9c:	2b01      	cmp	r3, #1
 8002c9e:	d101      	bne.n	8002ca4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002ca0:	2302      	movs	r3, #2
 8002ca2:	e03d      	b.n	8002d20 <HAL_TIMEx_MasterConfigSynchronization+0x94>
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2238      	movs	r2, #56	; 0x38
 8002ca8:	2101      	movs	r1, #1
 8002caa:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2239      	movs	r2, #57	; 0x39
 8002cb0:	2102      	movs	r1, #2
 8002cb2:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	689b      	ldr	r3, [r3, #8]
 8002cc2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	2270      	movs	r2, #112	; 0x70
 8002cc8:	4393      	bics	r3, r2
 8002cca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	68fa      	ldr	r2, [r7, #12]
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	68fa      	ldr	r2, [r7, #12]
 8002cdc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681a      	ldr	r2, [r3, #0]
 8002ce2:	2380      	movs	r3, #128	; 0x80
 8002ce4:	05db      	lsls	r3, r3, #23
 8002ce6:	429a      	cmp	r2, r3
 8002ce8:	d004      	beq.n	8002cf4 <HAL_TIMEx_MasterConfigSynchronization+0x68>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a0e      	ldr	r2, [pc, #56]	; (8002d28 <HAL_TIMEx_MasterConfigSynchronization+0x9c>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d10c      	bne.n	8002d0e <HAL_TIMEx_MasterConfigSynchronization+0x82>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002cf4:	68bb      	ldr	r3, [r7, #8]
 8002cf6:	2280      	movs	r2, #128	; 0x80
 8002cf8:	4393      	bics	r3, r2
 8002cfa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	68ba      	ldr	r2, [r7, #8]
 8002d02:	4313      	orrs	r3, r2
 8002d04:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	68ba      	ldr	r2, [r7, #8]
 8002d0c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2239      	movs	r2, #57	; 0x39
 8002d12:	2101      	movs	r1, #1
 8002d14:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2238      	movs	r2, #56	; 0x38
 8002d1a:	2100      	movs	r1, #0
 8002d1c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002d1e:	2300      	movs	r3, #0
}
 8002d20:	0018      	movs	r0, r3
 8002d22:	46bd      	mov	sp, r7
 8002d24:	b004      	add	sp, #16
 8002d26:	bd80      	pop	{r7, pc}
 8002d28:	40010800 	.word	0x40010800

08002d2c <__libc_init_array>:
 8002d2c:	b570      	push	{r4, r5, r6, lr}
 8002d2e:	2600      	movs	r6, #0
 8002d30:	4d0c      	ldr	r5, [pc, #48]	; (8002d64 <__libc_init_array+0x38>)
 8002d32:	4c0d      	ldr	r4, [pc, #52]	; (8002d68 <__libc_init_array+0x3c>)
 8002d34:	1b64      	subs	r4, r4, r5
 8002d36:	10a4      	asrs	r4, r4, #2
 8002d38:	42a6      	cmp	r6, r4
 8002d3a:	d109      	bne.n	8002d50 <__libc_init_array+0x24>
 8002d3c:	2600      	movs	r6, #0
 8002d3e:	f000 f821 	bl	8002d84 <_init>
 8002d42:	4d0a      	ldr	r5, [pc, #40]	; (8002d6c <__libc_init_array+0x40>)
 8002d44:	4c0a      	ldr	r4, [pc, #40]	; (8002d70 <__libc_init_array+0x44>)
 8002d46:	1b64      	subs	r4, r4, r5
 8002d48:	10a4      	asrs	r4, r4, #2
 8002d4a:	42a6      	cmp	r6, r4
 8002d4c:	d105      	bne.n	8002d5a <__libc_init_array+0x2e>
 8002d4e:	bd70      	pop	{r4, r5, r6, pc}
 8002d50:	00b3      	lsls	r3, r6, #2
 8002d52:	58eb      	ldr	r3, [r5, r3]
 8002d54:	4798      	blx	r3
 8002d56:	3601      	adds	r6, #1
 8002d58:	e7ee      	b.n	8002d38 <__libc_init_array+0xc>
 8002d5a:	00b3      	lsls	r3, r6, #2
 8002d5c:	58eb      	ldr	r3, [r5, r3]
 8002d5e:	4798      	blx	r3
 8002d60:	3601      	adds	r6, #1
 8002d62:	e7f2      	b.n	8002d4a <__libc_init_array+0x1e>
 8002d64:	08002e80 	.word	0x08002e80
 8002d68:	08002e80 	.word	0x08002e80
 8002d6c:	08002e80 	.word	0x08002e80
 8002d70:	08002e84 	.word	0x08002e84

08002d74 <memset>:
 8002d74:	0003      	movs	r3, r0
 8002d76:	1882      	adds	r2, r0, r2
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d100      	bne.n	8002d7e <memset+0xa>
 8002d7c:	4770      	bx	lr
 8002d7e:	7019      	strb	r1, [r3, #0]
 8002d80:	3301      	adds	r3, #1
 8002d82:	e7f9      	b.n	8002d78 <memset+0x4>

08002d84 <_init>:
 8002d84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d86:	46c0      	nop			; (mov r8, r8)
 8002d88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d8a:	bc08      	pop	{r3}
 8002d8c:	469e      	mov	lr, r3
 8002d8e:	4770      	bx	lr

08002d90 <_fini>:
 8002d90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d92:	46c0      	nop			; (mov r8, r8)
 8002d94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d96:	bc08      	pop	{r3}
 8002d98:	469e      	mov	lr, r3
 8002d9a:	4770      	bx	lr
