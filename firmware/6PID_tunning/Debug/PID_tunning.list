
PID_tunning.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003460  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  08003520  08003520  00013520  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080035bc  080035bc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080035bc  080035bc  000135bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080035c4  080035c4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080035c4  080035c4  000135c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080035c8  080035c8  000135c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080035cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000cc  2000000c  080035d8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000d8  080035d8  000200d8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000088c0  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001673  00000000  00000000  000288f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008c0  00000000  00000000  00029f68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000808  00000000  00000000  0002a828  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001066e  00000000  00000000  0002b030  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009319  00000000  00000000  0003b69e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00067067  00000000  00000000  000449b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000aba1e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001fb4  00000000  00000000  000aba70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003508 	.word	0x08003508

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08003508 	.word	0x08003508

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	0008      	movs	r0, r1
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f834 	bl	80002bc <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	46ce      	mov	lr, r9
 8000264:	4647      	mov	r7, r8
 8000266:	b580      	push	{r7, lr}
 8000268:	0007      	movs	r7, r0
 800026a:	4699      	mov	r9, r3
 800026c:	0c3b      	lsrs	r3, r7, #16
 800026e:	469c      	mov	ip, r3
 8000270:	0413      	lsls	r3, r2, #16
 8000272:	0c1b      	lsrs	r3, r3, #16
 8000274:	001d      	movs	r5, r3
 8000276:	000e      	movs	r6, r1
 8000278:	4661      	mov	r1, ip
 800027a:	0400      	lsls	r0, r0, #16
 800027c:	0c14      	lsrs	r4, r2, #16
 800027e:	0c00      	lsrs	r0, r0, #16
 8000280:	4345      	muls	r5, r0
 8000282:	434b      	muls	r3, r1
 8000284:	4360      	muls	r0, r4
 8000286:	4361      	muls	r1, r4
 8000288:	18c0      	adds	r0, r0, r3
 800028a:	0c2c      	lsrs	r4, r5, #16
 800028c:	1820      	adds	r0, r4, r0
 800028e:	468c      	mov	ip, r1
 8000290:	4283      	cmp	r3, r0
 8000292:	d903      	bls.n	800029c <__aeabi_lmul+0x3c>
 8000294:	2380      	movs	r3, #128	; 0x80
 8000296:	025b      	lsls	r3, r3, #9
 8000298:	4698      	mov	r8, r3
 800029a:	44c4      	add	ip, r8
 800029c:	4649      	mov	r1, r9
 800029e:	4379      	muls	r1, r7
 80002a0:	4372      	muls	r2, r6
 80002a2:	0c03      	lsrs	r3, r0, #16
 80002a4:	4463      	add	r3, ip
 80002a6:	042d      	lsls	r5, r5, #16
 80002a8:	0c2d      	lsrs	r5, r5, #16
 80002aa:	18c9      	adds	r1, r1, r3
 80002ac:	0400      	lsls	r0, r0, #16
 80002ae:	1940      	adds	r0, r0, r5
 80002b0:	1889      	adds	r1, r1, r2
 80002b2:	bcc0      	pop	{r6, r7}
 80002b4:	46b9      	mov	r9, r7
 80002b6:	46b0      	mov	r8, r6
 80002b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ba:	46c0      	nop			; (mov r8, r8)

080002bc <__udivmoddi4>:
 80002bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002be:	4657      	mov	r7, sl
 80002c0:	464e      	mov	r6, r9
 80002c2:	4645      	mov	r5, r8
 80002c4:	46de      	mov	lr, fp
 80002c6:	b5e0      	push	{r5, r6, r7, lr}
 80002c8:	0004      	movs	r4, r0
 80002ca:	000d      	movs	r5, r1
 80002cc:	4692      	mov	sl, r2
 80002ce:	4699      	mov	r9, r3
 80002d0:	b083      	sub	sp, #12
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d830      	bhi.n	8000338 <__udivmoddi4+0x7c>
 80002d6:	d02d      	beq.n	8000334 <__udivmoddi4+0x78>
 80002d8:	4649      	mov	r1, r9
 80002da:	4650      	mov	r0, sl
 80002dc:	f000 fa32 	bl	8000744 <__clzdi2>
 80002e0:	0029      	movs	r1, r5
 80002e2:	0006      	movs	r6, r0
 80002e4:	0020      	movs	r0, r4
 80002e6:	f000 fa2d 	bl	8000744 <__clzdi2>
 80002ea:	1a33      	subs	r3, r6, r0
 80002ec:	4698      	mov	r8, r3
 80002ee:	3b20      	subs	r3, #32
 80002f0:	469b      	mov	fp, r3
 80002f2:	d433      	bmi.n	800035c <__udivmoddi4+0xa0>
 80002f4:	465a      	mov	r2, fp
 80002f6:	4653      	mov	r3, sl
 80002f8:	4093      	lsls	r3, r2
 80002fa:	4642      	mov	r2, r8
 80002fc:	001f      	movs	r7, r3
 80002fe:	4653      	mov	r3, sl
 8000300:	4093      	lsls	r3, r2
 8000302:	001e      	movs	r6, r3
 8000304:	42af      	cmp	r7, r5
 8000306:	d83a      	bhi.n	800037e <__udivmoddi4+0xc2>
 8000308:	42af      	cmp	r7, r5
 800030a:	d100      	bne.n	800030e <__udivmoddi4+0x52>
 800030c:	e078      	b.n	8000400 <__udivmoddi4+0x144>
 800030e:	465b      	mov	r3, fp
 8000310:	1ba4      	subs	r4, r4, r6
 8000312:	41bd      	sbcs	r5, r7
 8000314:	2b00      	cmp	r3, #0
 8000316:	da00      	bge.n	800031a <__udivmoddi4+0x5e>
 8000318:	e075      	b.n	8000406 <__udivmoddi4+0x14a>
 800031a:	2200      	movs	r2, #0
 800031c:	2300      	movs	r3, #0
 800031e:	9200      	str	r2, [sp, #0]
 8000320:	9301      	str	r3, [sp, #4]
 8000322:	2301      	movs	r3, #1
 8000324:	465a      	mov	r2, fp
 8000326:	4093      	lsls	r3, r2
 8000328:	9301      	str	r3, [sp, #4]
 800032a:	2301      	movs	r3, #1
 800032c:	4642      	mov	r2, r8
 800032e:	4093      	lsls	r3, r2
 8000330:	9300      	str	r3, [sp, #0]
 8000332:	e028      	b.n	8000386 <__udivmoddi4+0xca>
 8000334:	4282      	cmp	r2, r0
 8000336:	d9cf      	bls.n	80002d8 <__udivmoddi4+0x1c>
 8000338:	2200      	movs	r2, #0
 800033a:	2300      	movs	r3, #0
 800033c:	9200      	str	r2, [sp, #0]
 800033e:	9301      	str	r3, [sp, #4]
 8000340:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000342:	2b00      	cmp	r3, #0
 8000344:	d001      	beq.n	800034a <__udivmoddi4+0x8e>
 8000346:	601c      	str	r4, [r3, #0]
 8000348:	605d      	str	r5, [r3, #4]
 800034a:	9800      	ldr	r0, [sp, #0]
 800034c:	9901      	ldr	r1, [sp, #4]
 800034e:	b003      	add	sp, #12
 8000350:	bcf0      	pop	{r4, r5, r6, r7}
 8000352:	46bb      	mov	fp, r7
 8000354:	46b2      	mov	sl, r6
 8000356:	46a9      	mov	r9, r5
 8000358:	46a0      	mov	r8, r4
 800035a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800035c:	4642      	mov	r2, r8
 800035e:	2320      	movs	r3, #32
 8000360:	1a9b      	subs	r3, r3, r2
 8000362:	4652      	mov	r2, sl
 8000364:	40da      	lsrs	r2, r3
 8000366:	4641      	mov	r1, r8
 8000368:	0013      	movs	r3, r2
 800036a:	464a      	mov	r2, r9
 800036c:	408a      	lsls	r2, r1
 800036e:	0017      	movs	r7, r2
 8000370:	4642      	mov	r2, r8
 8000372:	431f      	orrs	r7, r3
 8000374:	4653      	mov	r3, sl
 8000376:	4093      	lsls	r3, r2
 8000378:	001e      	movs	r6, r3
 800037a:	42af      	cmp	r7, r5
 800037c:	d9c4      	bls.n	8000308 <__udivmoddi4+0x4c>
 800037e:	2200      	movs	r2, #0
 8000380:	2300      	movs	r3, #0
 8000382:	9200      	str	r2, [sp, #0]
 8000384:	9301      	str	r3, [sp, #4]
 8000386:	4643      	mov	r3, r8
 8000388:	2b00      	cmp	r3, #0
 800038a:	d0d9      	beq.n	8000340 <__udivmoddi4+0x84>
 800038c:	07fb      	lsls	r3, r7, #31
 800038e:	0872      	lsrs	r2, r6, #1
 8000390:	431a      	orrs	r2, r3
 8000392:	4646      	mov	r6, r8
 8000394:	087b      	lsrs	r3, r7, #1
 8000396:	e00e      	b.n	80003b6 <__udivmoddi4+0xfa>
 8000398:	42ab      	cmp	r3, r5
 800039a:	d101      	bne.n	80003a0 <__udivmoddi4+0xe4>
 800039c:	42a2      	cmp	r2, r4
 800039e:	d80c      	bhi.n	80003ba <__udivmoddi4+0xfe>
 80003a0:	1aa4      	subs	r4, r4, r2
 80003a2:	419d      	sbcs	r5, r3
 80003a4:	2001      	movs	r0, #1
 80003a6:	1924      	adds	r4, r4, r4
 80003a8:	416d      	adcs	r5, r5
 80003aa:	2100      	movs	r1, #0
 80003ac:	3e01      	subs	r6, #1
 80003ae:	1824      	adds	r4, r4, r0
 80003b0:	414d      	adcs	r5, r1
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	d006      	beq.n	80003c4 <__udivmoddi4+0x108>
 80003b6:	42ab      	cmp	r3, r5
 80003b8:	d9ee      	bls.n	8000398 <__udivmoddi4+0xdc>
 80003ba:	3e01      	subs	r6, #1
 80003bc:	1924      	adds	r4, r4, r4
 80003be:	416d      	adcs	r5, r5
 80003c0:	2e00      	cmp	r6, #0
 80003c2:	d1f8      	bne.n	80003b6 <__udivmoddi4+0xfa>
 80003c4:	9800      	ldr	r0, [sp, #0]
 80003c6:	9901      	ldr	r1, [sp, #4]
 80003c8:	465b      	mov	r3, fp
 80003ca:	1900      	adds	r0, r0, r4
 80003cc:	4169      	adcs	r1, r5
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	db24      	blt.n	800041c <__udivmoddi4+0x160>
 80003d2:	002b      	movs	r3, r5
 80003d4:	465a      	mov	r2, fp
 80003d6:	4644      	mov	r4, r8
 80003d8:	40d3      	lsrs	r3, r2
 80003da:	002a      	movs	r2, r5
 80003dc:	40e2      	lsrs	r2, r4
 80003de:	001c      	movs	r4, r3
 80003e0:	465b      	mov	r3, fp
 80003e2:	0015      	movs	r5, r2
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	db2a      	blt.n	800043e <__udivmoddi4+0x182>
 80003e8:	0026      	movs	r6, r4
 80003ea:	409e      	lsls	r6, r3
 80003ec:	0033      	movs	r3, r6
 80003ee:	0026      	movs	r6, r4
 80003f0:	4647      	mov	r7, r8
 80003f2:	40be      	lsls	r6, r7
 80003f4:	0032      	movs	r2, r6
 80003f6:	1a80      	subs	r0, r0, r2
 80003f8:	4199      	sbcs	r1, r3
 80003fa:	9000      	str	r0, [sp, #0]
 80003fc:	9101      	str	r1, [sp, #4]
 80003fe:	e79f      	b.n	8000340 <__udivmoddi4+0x84>
 8000400:	42a3      	cmp	r3, r4
 8000402:	d8bc      	bhi.n	800037e <__udivmoddi4+0xc2>
 8000404:	e783      	b.n	800030e <__udivmoddi4+0x52>
 8000406:	4642      	mov	r2, r8
 8000408:	2320      	movs	r3, #32
 800040a:	2100      	movs	r1, #0
 800040c:	1a9b      	subs	r3, r3, r2
 800040e:	2200      	movs	r2, #0
 8000410:	9100      	str	r1, [sp, #0]
 8000412:	9201      	str	r2, [sp, #4]
 8000414:	2201      	movs	r2, #1
 8000416:	40da      	lsrs	r2, r3
 8000418:	9201      	str	r2, [sp, #4]
 800041a:	e786      	b.n	800032a <__udivmoddi4+0x6e>
 800041c:	4642      	mov	r2, r8
 800041e:	2320      	movs	r3, #32
 8000420:	1a9b      	subs	r3, r3, r2
 8000422:	002a      	movs	r2, r5
 8000424:	4646      	mov	r6, r8
 8000426:	409a      	lsls	r2, r3
 8000428:	0023      	movs	r3, r4
 800042a:	40f3      	lsrs	r3, r6
 800042c:	4644      	mov	r4, r8
 800042e:	4313      	orrs	r3, r2
 8000430:	002a      	movs	r2, r5
 8000432:	40e2      	lsrs	r2, r4
 8000434:	001c      	movs	r4, r3
 8000436:	465b      	mov	r3, fp
 8000438:	0015      	movs	r5, r2
 800043a:	2b00      	cmp	r3, #0
 800043c:	dad4      	bge.n	80003e8 <__udivmoddi4+0x12c>
 800043e:	4642      	mov	r2, r8
 8000440:	002f      	movs	r7, r5
 8000442:	2320      	movs	r3, #32
 8000444:	0026      	movs	r6, r4
 8000446:	4097      	lsls	r7, r2
 8000448:	1a9b      	subs	r3, r3, r2
 800044a:	40de      	lsrs	r6, r3
 800044c:	003b      	movs	r3, r7
 800044e:	4333      	orrs	r3, r6
 8000450:	e7cd      	b.n	80003ee <__udivmoddi4+0x132>
 8000452:	46c0      	nop			; (mov r8, r8)

08000454 <__aeabi_fdiv>:
 8000454:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000456:	464f      	mov	r7, r9
 8000458:	4646      	mov	r6, r8
 800045a:	46d6      	mov	lr, sl
 800045c:	0245      	lsls	r5, r0, #9
 800045e:	b5c0      	push	{r6, r7, lr}
 8000460:	0047      	lsls	r7, r0, #1
 8000462:	1c0c      	adds	r4, r1, #0
 8000464:	0a6d      	lsrs	r5, r5, #9
 8000466:	0e3f      	lsrs	r7, r7, #24
 8000468:	0fc6      	lsrs	r6, r0, #31
 800046a:	2f00      	cmp	r7, #0
 800046c:	d100      	bne.n	8000470 <__aeabi_fdiv+0x1c>
 800046e:	e070      	b.n	8000552 <__aeabi_fdiv+0xfe>
 8000470:	2fff      	cmp	r7, #255	; 0xff
 8000472:	d100      	bne.n	8000476 <__aeabi_fdiv+0x22>
 8000474:	e075      	b.n	8000562 <__aeabi_fdiv+0x10e>
 8000476:	00eb      	lsls	r3, r5, #3
 8000478:	2580      	movs	r5, #128	; 0x80
 800047a:	04ed      	lsls	r5, r5, #19
 800047c:	431d      	orrs	r5, r3
 800047e:	2300      	movs	r3, #0
 8000480:	4699      	mov	r9, r3
 8000482:	469a      	mov	sl, r3
 8000484:	3f7f      	subs	r7, #127	; 0x7f
 8000486:	0260      	lsls	r0, r4, #9
 8000488:	0a43      	lsrs	r3, r0, #9
 800048a:	4698      	mov	r8, r3
 800048c:	0063      	lsls	r3, r4, #1
 800048e:	0e1b      	lsrs	r3, r3, #24
 8000490:	0fe4      	lsrs	r4, r4, #31
 8000492:	2b00      	cmp	r3, #0
 8000494:	d04e      	beq.n	8000534 <__aeabi_fdiv+0xe0>
 8000496:	2bff      	cmp	r3, #255	; 0xff
 8000498:	d046      	beq.n	8000528 <__aeabi_fdiv+0xd4>
 800049a:	4642      	mov	r2, r8
 800049c:	00d0      	lsls	r0, r2, #3
 800049e:	2280      	movs	r2, #128	; 0x80
 80004a0:	04d2      	lsls	r2, r2, #19
 80004a2:	4302      	orrs	r2, r0
 80004a4:	4690      	mov	r8, r2
 80004a6:	2200      	movs	r2, #0
 80004a8:	3b7f      	subs	r3, #127	; 0x7f
 80004aa:	0031      	movs	r1, r6
 80004ac:	1aff      	subs	r7, r7, r3
 80004ae:	464b      	mov	r3, r9
 80004b0:	4061      	eors	r1, r4
 80004b2:	b2c9      	uxtb	r1, r1
 80004b4:	4313      	orrs	r3, r2
 80004b6:	2b0f      	cmp	r3, #15
 80004b8:	d900      	bls.n	80004bc <__aeabi_fdiv+0x68>
 80004ba:	e0b5      	b.n	8000628 <__aeabi_fdiv+0x1d4>
 80004bc:	486e      	ldr	r0, [pc, #440]	; (8000678 <__aeabi_fdiv+0x224>)
 80004be:	009b      	lsls	r3, r3, #2
 80004c0:	58c3      	ldr	r3, [r0, r3]
 80004c2:	469f      	mov	pc, r3
 80004c4:	2300      	movs	r3, #0
 80004c6:	4698      	mov	r8, r3
 80004c8:	0026      	movs	r6, r4
 80004ca:	4645      	mov	r5, r8
 80004cc:	4692      	mov	sl, r2
 80004ce:	4653      	mov	r3, sl
 80004d0:	2b02      	cmp	r3, #2
 80004d2:	d100      	bne.n	80004d6 <__aeabi_fdiv+0x82>
 80004d4:	e089      	b.n	80005ea <__aeabi_fdiv+0x196>
 80004d6:	2b03      	cmp	r3, #3
 80004d8:	d100      	bne.n	80004dc <__aeabi_fdiv+0x88>
 80004da:	e09e      	b.n	800061a <__aeabi_fdiv+0x1c6>
 80004dc:	2b01      	cmp	r3, #1
 80004de:	d018      	beq.n	8000512 <__aeabi_fdiv+0xbe>
 80004e0:	003b      	movs	r3, r7
 80004e2:	337f      	adds	r3, #127	; 0x7f
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	dd69      	ble.n	80005bc <__aeabi_fdiv+0x168>
 80004e8:	076a      	lsls	r2, r5, #29
 80004ea:	d004      	beq.n	80004f6 <__aeabi_fdiv+0xa2>
 80004ec:	220f      	movs	r2, #15
 80004ee:	402a      	ands	r2, r5
 80004f0:	2a04      	cmp	r2, #4
 80004f2:	d000      	beq.n	80004f6 <__aeabi_fdiv+0xa2>
 80004f4:	3504      	adds	r5, #4
 80004f6:	012a      	lsls	r2, r5, #4
 80004f8:	d503      	bpl.n	8000502 <__aeabi_fdiv+0xae>
 80004fa:	4b60      	ldr	r3, [pc, #384]	; (800067c <__aeabi_fdiv+0x228>)
 80004fc:	401d      	ands	r5, r3
 80004fe:	003b      	movs	r3, r7
 8000500:	3380      	adds	r3, #128	; 0x80
 8000502:	2bfe      	cmp	r3, #254	; 0xfe
 8000504:	dd00      	ble.n	8000508 <__aeabi_fdiv+0xb4>
 8000506:	e070      	b.n	80005ea <__aeabi_fdiv+0x196>
 8000508:	01ad      	lsls	r5, r5, #6
 800050a:	0a6d      	lsrs	r5, r5, #9
 800050c:	b2d8      	uxtb	r0, r3
 800050e:	e002      	b.n	8000516 <__aeabi_fdiv+0xc2>
 8000510:	000e      	movs	r6, r1
 8000512:	2000      	movs	r0, #0
 8000514:	2500      	movs	r5, #0
 8000516:	05c0      	lsls	r0, r0, #23
 8000518:	4328      	orrs	r0, r5
 800051a:	07f6      	lsls	r6, r6, #31
 800051c:	4330      	orrs	r0, r6
 800051e:	bce0      	pop	{r5, r6, r7}
 8000520:	46ba      	mov	sl, r7
 8000522:	46b1      	mov	r9, r6
 8000524:	46a8      	mov	r8, r5
 8000526:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000528:	4643      	mov	r3, r8
 800052a:	2b00      	cmp	r3, #0
 800052c:	d13f      	bne.n	80005ae <__aeabi_fdiv+0x15a>
 800052e:	2202      	movs	r2, #2
 8000530:	3fff      	subs	r7, #255	; 0xff
 8000532:	e003      	b.n	800053c <__aeabi_fdiv+0xe8>
 8000534:	4643      	mov	r3, r8
 8000536:	2b00      	cmp	r3, #0
 8000538:	d12d      	bne.n	8000596 <__aeabi_fdiv+0x142>
 800053a:	2201      	movs	r2, #1
 800053c:	0031      	movs	r1, r6
 800053e:	464b      	mov	r3, r9
 8000540:	4061      	eors	r1, r4
 8000542:	b2c9      	uxtb	r1, r1
 8000544:	4313      	orrs	r3, r2
 8000546:	2b0f      	cmp	r3, #15
 8000548:	d834      	bhi.n	80005b4 <__aeabi_fdiv+0x160>
 800054a:	484d      	ldr	r0, [pc, #308]	; (8000680 <__aeabi_fdiv+0x22c>)
 800054c:	009b      	lsls	r3, r3, #2
 800054e:	58c3      	ldr	r3, [r0, r3]
 8000550:	469f      	mov	pc, r3
 8000552:	2d00      	cmp	r5, #0
 8000554:	d113      	bne.n	800057e <__aeabi_fdiv+0x12a>
 8000556:	2304      	movs	r3, #4
 8000558:	4699      	mov	r9, r3
 800055a:	3b03      	subs	r3, #3
 800055c:	2700      	movs	r7, #0
 800055e:	469a      	mov	sl, r3
 8000560:	e791      	b.n	8000486 <__aeabi_fdiv+0x32>
 8000562:	2d00      	cmp	r5, #0
 8000564:	d105      	bne.n	8000572 <__aeabi_fdiv+0x11e>
 8000566:	2308      	movs	r3, #8
 8000568:	4699      	mov	r9, r3
 800056a:	3b06      	subs	r3, #6
 800056c:	27ff      	movs	r7, #255	; 0xff
 800056e:	469a      	mov	sl, r3
 8000570:	e789      	b.n	8000486 <__aeabi_fdiv+0x32>
 8000572:	230c      	movs	r3, #12
 8000574:	4699      	mov	r9, r3
 8000576:	3b09      	subs	r3, #9
 8000578:	27ff      	movs	r7, #255	; 0xff
 800057a:	469a      	mov	sl, r3
 800057c:	e783      	b.n	8000486 <__aeabi_fdiv+0x32>
 800057e:	0028      	movs	r0, r5
 8000580:	f000 f8c2 	bl	8000708 <__clzsi2>
 8000584:	2776      	movs	r7, #118	; 0x76
 8000586:	1f43      	subs	r3, r0, #5
 8000588:	409d      	lsls	r5, r3
 800058a:	2300      	movs	r3, #0
 800058c:	427f      	negs	r7, r7
 800058e:	4699      	mov	r9, r3
 8000590:	469a      	mov	sl, r3
 8000592:	1a3f      	subs	r7, r7, r0
 8000594:	e777      	b.n	8000486 <__aeabi_fdiv+0x32>
 8000596:	4640      	mov	r0, r8
 8000598:	f000 f8b6 	bl	8000708 <__clzsi2>
 800059c:	4642      	mov	r2, r8
 800059e:	1f43      	subs	r3, r0, #5
 80005a0:	409a      	lsls	r2, r3
 80005a2:	2376      	movs	r3, #118	; 0x76
 80005a4:	425b      	negs	r3, r3
 80005a6:	4690      	mov	r8, r2
 80005a8:	1a1b      	subs	r3, r3, r0
 80005aa:	2200      	movs	r2, #0
 80005ac:	e77d      	b.n	80004aa <__aeabi_fdiv+0x56>
 80005ae:	23ff      	movs	r3, #255	; 0xff
 80005b0:	2203      	movs	r2, #3
 80005b2:	e77a      	b.n	80004aa <__aeabi_fdiv+0x56>
 80005b4:	000e      	movs	r6, r1
 80005b6:	20ff      	movs	r0, #255	; 0xff
 80005b8:	2500      	movs	r5, #0
 80005ba:	e7ac      	b.n	8000516 <__aeabi_fdiv+0xc2>
 80005bc:	2001      	movs	r0, #1
 80005be:	1ac0      	subs	r0, r0, r3
 80005c0:	281b      	cmp	r0, #27
 80005c2:	dca6      	bgt.n	8000512 <__aeabi_fdiv+0xbe>
 80005c4:	379e      	adds	r7, #158	; 0x9e
 80005c6:	002a      	movs	r2, r5
 80005c8:	40bd      	lsls	r5, r7
 80005ca:	40c2      	lsrs	r2, r0
 80005cc:	1e6b      	subs	r3, r5, #1
 80005ce:	419d      	sbcs	r5, r3
 80005d0:	4315      	orrs	r5, r2
 80005d2:	076b      	lsls	r3, r5, #29
 80005d4:	d004      	beq.n	80005e0 <__aeabi_fdiv+0x18c>
 80005d6:	230f      	movs	r3, #15
 80005d8:	402b      	ands	r3, r5
 80005da:	2b04      	cmp	r3, #4
 80005dc:	d000      	beq.n	80005e0 <__aeabi_fdiv+0x18c>
 80005de:	3504      	adds	r5, #4
 80005e0:	016b      	lsls	r3, r5, #5
 80005e2:	d544      	bpl.n	800066e <__aeabi_fdiv+0x21a>
 80005e4:	2001      	movs	r0, #1
 80005e6:	2500      	movs	r5, #0
 80005e8:	e795      	b.n	8000516 <__aeabi_fdiv+0xc2>
 80005ea:	20ff      	movs	r0, #255	; 0xff
 80005ec:	2500      	movs	r5, #0
 80005ee:	e792      	b.n	8000516 <__aeabi_fdiv+0xc2>
 80005f0:	2580      	movs	r5, #128	; 0x80
 80005f2:	2600      	movs	r6, #0
 80005f4:	20ff      	movs	r0, #255	; 0xff
 80005f6:	03ed      	lsls	r5, r5, #15
 80005f8:	e78d      	b.n	8000516 <__aeabi_fdiv+0xc2>
 80005fa:	2300      	movs	r3, #0
 80005fc:	4698      	mov	r8, r3
 80005fe:	2080      	movs	r0, #128	; 0x80
 8000600:	03c0      	lsls	r0, r0, #15
 8000602:	4205      	tst	r5, r0
 8000604:	d009      	beq.n	800061a <__aeabi_fdiv+0x1c6>
 8000606:	4643      	mov	r3, r8
 8000608:	4203      	tst	r3, r0
 800060a:	d106      	bne.n	800061a <__aeabi_fdiv+0x1c6>
 800060c:	4645      	mov	r5, r8
 800060e:	4305      	orrs	r5, r0
 8000610:	026d      	lsls	r5, r5, #9
 8000612:	0026      	movs	r6, r4
 8000614:	20ff      	movs	r0, #255	; 0xff
 8000616:	0a6d      	lsrs	r5, r5, #9
 8000618:	e77d      	b.n	8000516 <__aeabi_fdiv+0xc2>
 800061a:	2080      	movs	r0, #128	; 0x80
 800061c:	03c0      	lsls	r0, r0, #15
 800061e:	4305      	orrs	r5, r0
 8000620:	026d      	lsls	r5, r5, #9
 8000622:	20ff      	movs	r0, #255	; 0xff
 8000624:	0a6d      	lsrs	r5, r5, #9
 8000626:	e776      	b.n	8000516 <__aeabi_fdiv+0xc2>
 8000628:	4642      	mov	r2, r8
 800062a:	016b      	lsls	r3, r5, #5
 800062c:	0150      	lsls	r0, r2, #5
 800062e:	4283      	cmp	r3, r0
 8000630:	d219      	bcs.n	8000666 <__aeabi_fdiv+0x212>
 8000632:	221b      	movs	r2, #27
 8000634:	2500      	movs	r5, #0
 8000636:	3f01      	subs	r7, #1
 8000638:	2601      	movs	r6, #1
 800063a:	001c      	movs	r4, r3
 800063c:	006d      	lsls	r5, r5, #1
 800063e:	005b      	lsls	r3, r3, #1
 8000640:	2c00      	cmp	r4, #0
 8000642:	db01      	blt.n	8000648 <__aeabi_fdiv+0x1f4>
 8000644:	4298      	cmp	r0, r3
 8000646:	d801      	bhi.n	800064c <__aeabi_fdiv+0x1f8>
 8000648:	1a1b      	subs	r3, r3, r0
 800064a:	4335      	orrs	r5, r6
 800064c:	3a01      	subs	r2, #1
 800064e:	2a00      	cmp	r2, #0
 8000650:	d1f3      	bne.n	800063a <__aeabi_fdiv+0x1e6>
 8000652:	1e5a      	subs	r2, r3, #1
 8000654:	4193      	sbcs	r3, r2
 8000656:	431d      	orrs	r5, r3
 8000658:	003b      	movs	r3, r7
 800065a:	337f      	adds	r3, #127	; 0x7f
 800065c:	000e      	movs	r6, r1
 800065e:	2b00      	cmp	r3, #0
 8000660:	dd00      	ble.n	8000664 <__aeabi_fdiv+0x210>
 8000662:	e741      	b.n	80004e8 <__aeabi_fdiv+0x94>
 8000664:	e7aa      	b.n	80005bc <__aeabi_fdiv+0x168>
 8000666:	221a      	movs	r2, #26
 8000668:	2501      	movs	r5, #1
 800066a:	1a1b      	subs	r3, r3, r0
 800066c:	e7e4      	b.n	8000638 <__aeabi_fdiv+0x1e4>
 800066e:	01ad      	lsls	r5, r5, #6
 8000670:	2000      	movs	r0, #0
 8000672:	0a6d      	lsrs	r5, r5, #9
 8000674:	e74f      	b.n	8000516 <__aeabi_fdiv+0xc2>
 8000676:	46c0      	nop			; (mov r8, r8)
 8000678:	08003520 	.word	0x08003520
 800067c:	f7ffffff 	.word	0xf7ffffff
 8000680:	08003560 	.word	0x08003560

08000684 <__aeabi_ui2f>:
 8000684:	b570      	push	{r4, r5, r6, lr}
 8000686:	1e05      	subs	r5, r0, #0
 8000688:	d00e      	beq.n	80006a8 <__aeabi_ui2f+0x24>
 800068a:	f000 f83d 	bl	8000708 <__clzsi2>
 800068e:	239e      	movs	r3, #158	; 0x9e
 8000690:	0004      	movs	r4, r0
 8000692:	1a1b      	subs	r3, r3, r0
 8000694:	2b96      	cmp	r3, #150	; 0x96
 8000696:	dc0c      	bgt.n	80006b2 <__aeabi_ui2f+0x2e>
 8000698:	2808      	cmp	r0, #8
 800069a:	dd01      	ble.n	80006a0 <__aeabi_ui2f+0x1c>
 800069c:	3c08      	subs	r4, #8
 800069e:	40a5      	lsls	r5, r4
 80006a0:	026d      	lsls	r5, r5, #9
 80006a2:	0a6d      	lsrs	r5, r5, #9
 80006a4:	b2d8      	uxtb	r0, r3
 80006a6:	e001      	b.n	80006ac <__aeabi_ui2f+0x28>
 80006a8:	2000      	movs	r0, #0
 80006aa:	2500      	movs	r5, #0
 80006ac:	05c0      	lsls	r0, r0, #23
 80006ae:	4328      	orrs	r0, r5
 80006b0:	bd70      	pop	{r4, r5, r6, pc}
 80006b2:	2b99      	cmp	r3, #153	; 0x99
 80006b4:	dd09      	ble.n	80006ca <__aeabi_ui2f+0x46>
 80006b6:	0002      	movs	r2, r0
 80006b8:	0029      	movs	r1, r5
 80006ba:	321b      	adds	r2, #27
 80006bc:	4091      	lsls	r1, r2
 80006be:	1e4a      	subs	r2, r1, #1
 80006c0:	4191      	sbcs	r1, r2
 80006c2:	2205      	movs	r2, #5
 80006c4:	1a12      	subs	r2, r2, r0
 80006c6:	40d5      	lsrs	r5, r2
 80006c8:	430d      	orrs	r5, r1
 80006ca:	2c05      	cmp	r4, #5
 80006cc:	dc12      	bgt.n	80006f4 <__aeabi_ui2f+0x70>
 80006ce:	0029      	movs	r1, r5
 80006d0:	4e0c      	ldr	r6, [pc, #48]	; (8000704 <__aeabi_ui2f+0x80>)
 80006d2:	4031      	ands	r1, r6
 80006d4:	076a      	lsls	r2, r5, #29
 80006d6:	d009      	beq.n	80006ec <__aeabi_ui2f+0x68>
 80006d8:	200f      	movs	r0, #15
 80006da:	4028      	ands	r0, r5
 80006dc:	2804      	cmp	r0, #4
 80006de:	d005      	beq.n	80006ec <__aeabi_ui2f+0x68>
 80006e0:	3104      	adds	r1, #4
 80006e2:	014a      	lsls	r2, r1, #5
 80006e4:	d502      	bpl.n	80006ec <__aeabi_ui2f+0x68>
 80006e6:	239f      	movs	r3, #159	; 0x9f
 80006e8:	4031      	ands	r1, r6
 80006ea:	1b1b      	subs	r3, r3, r4
 80006ec:	0189      	lsls	r1, r1, #6
 80006ee:	0a4d      	lsrs	r5, r1, #9
 80006f0:	b2d8      	uxtb	r0, r3
 80006f2:	e7db      	b.n	80006ac <__aeabi_ui2f+0x28>
 80006f4:	1f62      	subs	r2, r4, #5
 80006f6:	4095      	lsls	r5, r2
 80006f8:	0029      	movs	r1, r5
 80006fa:	4e02      	ldr	r6, [pc, #8]	; (8000704 <__aeabi_ui2f+0x80>)
 80006fc:	4031      	ands	r1, r6
 80006fe:	076a      	lsls	r2, r5, #29
 8000700:	d0f4      	beq.n	80006ec <__aeabi_ui2f+0x68>
 8000702:	e7e9      	b.n	80006d8 <__aeabi_ui2f+0x54>
 8000704:	fbffffff 	.word	0xfbffffff

08000708 <__clzsi2>:
 8000708:	211c      	movs	r1, #28
 800070a:	2301      	movs	r3, #1
 800070c:	041b      	lsls	r3, r3, #16
 800070e:	4298      	cmp	r0, r3
 8000710:	d301      	bcc.n	8000716 <__clzsi2+0xe>
 8000712:	0c00      	lsrs	r0, r0, #16
 8000714:	3910      	subs	r1, #16
 8000716:	0a1b      	lsrs	r3, r3, #8
 8000718:	4298      	cmp	r0, r3
 800071a:	d301      	bcc.n	8000720 <__clzsi2+0x18>
 800071c:	0a00      	lsrs	r0, r0, #8
 800071e:	3908      	subs	r1, #8
 8000720:	091b      	lsrs	r3, r3, #4
 8000722:	4298      	cmp	r0, r3
 8000724:	d301      	bcc.n	800072a <__clzsi2+0x22>
 8000726:	0900      	lsrs	r0, r0, #4
 8000728:	3904      	subs	r1, #4
 800072a:	a202      	add	r2, pc, #8	; (adr r2, 8000734 <__clzsi2+0x2c>)
 800072c:	5c10      	ldrb	r0, [r2, r0]
 800072e:	1840      	adds	r0, r0, r1
 8000730:	4770      	bx	lr
 8000732:	46c0      	nop			; (mov r8, r8)
 8000734:	02020304 	.word	0x02020304
 8000738:	01010101 	.word	0x01010101
	...

08000744 <__clzdi2>:
 8000744:	b510      	push	{r4, lr}
 8000746:	2900      	cmp	r1, #0
 8000748:	d103      	bne.n	8000752 <__clzdi2+0xe>
 800074a:	f7ff ffdd 	bl	8000708 <__clzsi2>
 800074e:	3020      	adds	r0, #32
 8000750:	e002      	b.n	8000758 <__clzdi2+0x14>
 8000752:	0008      	movs	r0, r1
 8000754:	f7ff ffd8 	bl	8000708 <__clzsi2>
 8000758:	bd10      	pop	{r4, pc}
 800075a:	46c0      	nop			; (mov r8, r8)

0800075c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000760:	f000 fb10 	bl	8000d84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000764:	f000 f814 	bl	8000790 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000768:	f000 f97c 	bl	8000a64 <MX_GPIO_Init>
  MX_ADC_Init();
 800076c:	f000 f864 	bl	8000838 <MX_ADC_Init>
  MX_TIM21_Init();
 8000770:	f000 f8c8 	bl	8000904 <MX_TIM21_Init>
  /* USER CODE BEGIN 2 */
  	  //##############################PWM INPUT##############################
	  // Main channel (Function Period Measure):
	  HAL_TIM_IC_Start_IT(&htim21, TIM_CHANNEL_2);
 8000774:	4b05      	ldr	r3, [pc, #20]	; (800078c <main+0x30>)
 8000776:	2104      	movs	r1, #4
 8000778:	0018      	movs	r0, r3
 800077a:	f001 ffdd 	bl	8002738 <HAL_TIM_IC_Start_IT>
	  // Indirect channel (Pulse Width Measure):
	  HAL_TIM_IC_Start(&htim21, TIM_CHANNEL_1);
 800077e:	4b03      	ldr	r3, [pc, #12]	; (800078c <main+0x30>)
 8000780:	2100      	movs	r1, #0
 8000782:	0018      	movs	r0, r3
 8000784:	f001 ff5e 	bl	8002644 <HAL_TIM_IC_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000788:	e7fe      	b.n	8000788 <main+0x2c>
 800078a:	46c0      	nop			; (mov r8, r8)
 800078c:	20000084 	.word	0x20000084

08000790 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000790:	b590      	push	{r4, r7, lr}
 8000792:	b093      	sub	sp, #76	; 0x4c
 8000794:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000796:	2414      	movs	r4, #20
 8000798:	193b      	adds	r3, r7, r4
 800079a:	0018      	movs	r0, r3
 800079c:	2334      	movs	r3, #52	; 0x34
 800079e:	001a      	movs	r2, r3
 80007a0:	2100      	movs	r1, #0
 80007a2:	f002 fea9 	bl	80034f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007a6:	003b      	movs	r3, r7
 80007a8:	0018      	movs	r0, r3
 80007aa:	2314      	movs	r3, #20
 80007ac:	001a      	movs	r2, r3
 80007ae:	2100      	movs	r1, #0
 80007b0:	f002 fea2 	bl	80034f8 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007b4:	4b1e      	ldr	r3, [pc, #120]	; (8000830 <SystemClock_Config+0xa0>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	4a1e      	ldr	r2, [pc, #120]	; (8000834 <SystemClock_Config+0xa4>)
 80007ba:	401a      	ands	r2, r3
 80007bc:	4b1c      	ldr	r3, [pc, #112]	; (8000830 <SystemClock_Config+0xa0>)
 80007be:	2180      	movs	r1, #128	; 0x80
 80007c0:	0109      	lsls	r1, r1, #4
 80007c2:	430a      	orrs	r2, r1
 80007c4:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80007c6:	0021      	movs	r1, r4
 80007c8:	187b      	adds	r3, r7, r1
 80007ca:	2210      	movs	r2, #16
 80007cc:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80007ce:	187b      	adds	r3, r7, r1
 80007d0:	2201      	movs	r2, #1
 80007d2:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80007d4:	187b      	adds	r3, r7, r1
 80007d6:	2200      	movs	r2, #0
 80007d8:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 80007da:	187b      	adds	r3, r7, r1
 80007dc:	22a0      	movs	r2, #160	; 0xa0
 80007de:	0212      	lsls	r2, r2, #8
 80007e0:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80007e2:	187b      	adds	r3, r7, r1
 80007e4:	2200      	movs	r2, #0
 80007e6:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007e8:	187b      	adds	r3, r7, r1
 80007ea:	0018      	movs	r0, r3
 80007ec:	f001 f938 	bl	8001a60 <HAL_RCC_OscConfig>
 80007f0:	1e03      	subs	r3, r0, #0
 80007f2:	d001      	beq.n	80007f8 <SystemClock_Config+0x68>
  {
    Error_Handler();
 80007f4:	f000 f9a4 	bl	8000b40 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007f8:	003b      	movs	r3, r7
 80007fa:	220f      	movs	r2, #15
 80007fc:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80007fe:	003b      	movs	r3, r7
 8000800:	2200      	movs	r2, #0
 8000802:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000804:	003b      	movs	r3, r7
 8000806:	2200      	movs	r2, #0
 8000808:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800080a:	003b      	movs	r3, r7
 800080c:	2200      	movs	r2, #0
 800080e:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000810:	003b      	movs	r3, r7
 8000812:	2200      	movs	r2, #0
 8000814:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000816:	003b      	movs	r3, r7
 8000818:	2100      	movs	r1, #0
 800081a:	0018      	movs	r0, r3
 800081c:	f001 fc9c 	bl	8002158 <HAL_RCC_ClockConfig>
 8000820:	1e03      	subs	r3, r0, #0
 8000822:	d001      	beq.n	8000828 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000824:	f000 f98c 	bl	8000b40 <Error_Handler>
  }
}
 8000828:	46c0      	nop			; (mov r8, r8)
 800082a:	46bd      	mov	sp, r7
 800082c:	b013      	add	sp, #76	; 0x4c
 800082e:	bd90      	pop	{r4, r7, pc}
 8000830:	40007000 	.word	0x40007000
 8000834:	ffffe7ff 	.word	0xffffe7ff

08000838 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b082      	sub	sp, #8
 800083c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800083e:	003b      	movs	r3, r7
 8000840:	0018      	movs	r0, r3
 8000842:	2308      	movs	r3, #8
 8000844:	001a      	movs	r2, r3
 8000846:	2100      	movs	r1, #0
 8000848:	f002 fe56 	bl	80034f8 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 800084c:	4b2a      	ldr	r3, [pc, #168]	; (80008f8 <MX_ADC_Init+0xc0>)
 800084e:	4a2b      	ldr	r2, [pc, #172]	; (80008fc <MX_ADC_Init+0xc4>)
 8000850:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 8000852:	4b29      	ldr	r3, [pc, #164]	; (80008f8 <MX_ADC_Init+0xc0>)
 8000854:	2200      	movs	r2, #0
 8000856:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8000858:	4b27      	ldr	r3, [pc, #156]	; (80008f8 <MX_ADC_Init+0xc0>)
 800085a:	22c0      	movs	r2, #192	; 0xc0
 800085c:	0612      	lsls	r2, r2, #24
 800085e:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000860:	4b25      	ldr	r3, [pc, #148]	; (80008f8 <MX_ADC_Init+0xc0>)
 8000862:	2200      	movs	r2, #0
 8000864:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000866:	4b24      	ldr	r3, [pc, #144]	; (80008f8 <MX_ADC_Init+0xc0>)
 8000868:	2200      	movs	r2, #0
 800086a:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 800086c:	4b22      	ldr	r3, [pc, #136]	; (80008f8 <MX_ADC_Init+0xc0>)
 800086e:	2201      	movs	r2, #1
 8000870:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000872:	4b21      	ldr	r3, [pc, #132]	; (80008f8 <MX_ADC_Init+0xc0>)
 8000874:	2200      	movs	r2, #0
 8000876:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000878:	4b1f      	ldr	r3, [pc, #124]	; (80008f8 <MX_ADC_Init+0xc0>)
 800087a:	2220      	movs	r2, #32
 800087c:	2100      	movs	r1, #0
 800087e:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000880:	4b1d      	ldr	r3, [pc, #116]	; (80008f8 <MX_ADC_Init+0xc0>)
 8000882:	2221      	movs	r2, #33	; 0x21
 8000884:	2100      	movs	r1, #0
 8000886:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000888:	4b1b      	ldr	r3, [pc, #108]	; (80008f8 <MX_ADC_Init+0xc0>)
 800088a:	2200      	movs	r2, #0
 800088c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800088e:	4b1a      	ldr	r3, [pc, #104]	; (80008f8 <MX_ADC_Init+0xc0>)
 8000890:	22c2      	movs	r2, #194	; 0xc2
 8000892:	32ff      	adds	r2, #255	; 0xff
 8000894:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000896:	4b18      	ldr	r3, [pc, #96]	; (80008f8 <MX_ADC_Init+0xc0>)
 8000898:	222c      	movs	r2, #44	; 0x2c
 800089a:	2100      	movs	r1, #0
 800089c:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800089e:	4b16      	ldr	r3, [pc, #88]	; (80008f8 <MX_ADC_Init+0xc0>)
 80008a0:	2204      	movs	r2, #4
 80008a2:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80008a4:	4b14      	ldr	r3, [pc, #80]	; (80008f8 <MX_ADC_Init+0xc0>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 80008aa:	4b13      	ldr	r3, [pc, #76]	; (80008f8 <MX_ADC_Init+0xc0>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = ENABLE;
 80008b0:	4b11      	ldr	r3, [pc, #68]	; (80008f8 <MX_ADC_Init+0xc0>)
 80008b2:	2201      	movs	r2, #1
 80008b4:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80008b6:	4b10      	ldr	r3, [pc, #64]	; (80008f8 <MX_ADC_Init+0xc0>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80008bc:	4b0e      	ldr	r3, [pc, #56]	; (80008f8 <MX_ADC_Init+0xc0>)
 80008be:	0018      	movs	r0, r3
 80008c0:	f000 fad0 	bl	8000e64 <HAL_ADC_Init>
 80008c4:	1e03      	subs	r3, r0, #0
 80008c6:	d001      	beq.n	80008cc <MX_ADC_Init+0x94>
  {
    Error_Handler();
 80008c8:	f000 f93a 	bl	8000b40 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80008cc:	003b      	movs	r3, r7
 80008ce:	4a0c      	ldr	r2, [pc, #48]	; (8000900 <MX_ADC_Init+0xc8>)
 80008d0:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80008d2:	003b      	movs	r3, r7
 80008d4:	2280      	movs	r2, #128	; 0x80
 80008d6:	0152      	lsls	r2, r2, #5
 80008d8:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80008da:	003a      	movs	r2, r7
 80008dc:	4b06      	ldr	r3, [pc, #24]	; (80008f8 <MX_ADC_Init+0xc0>)
 80008de:	0011      	movs	r1, r2
 80008e0:	0018      	movs	r0, r3
 80008e2:	f000 fd6b 	bl	80013bc <HAL_ADC_ConfigChannel>
 80008e6:	1e03      	subs	r3, r0, #0
 80008e8:	d001      	beq.n	80008ee <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 80008ea:	f000 f929 	bl	8000b40 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 80008ee:	46c0      	nop			; (mov r8, r8)
 80008f0:	46bd      	mov	sp, r7
 80008f2:	b002      	add	sp, #8
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	46c0      	nop			; (mov r8, r8)
 80008f8:	20000028 	.word	0x20000028
 80008fc:	40012400 	.word	0x40012400
 8000900:	10000010 	.word	0x10000010

08000904 <MX_TIM21_Init>:
  * @brief TIM21 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM21_Init(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b090      	sub	sp, #64	; 0x40
 8000908:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM21_Init 0 */

  /* USER CODE END TIM21_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800090a:	2330      	movs	r3, #48	; 0x30
 800090c:	18fb      	adds	r3, r7, r3
 800090e:	0018      	movs	r0, r3
 8000910:	2310      	movs	r3, #16
 8000912:	001a      	movs	r2, r3
 8000914:	2100      	movs	r1, #0
 8000916:	f002 fdef 	bl	80034f8 <memset>
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800091a:	231c      	movs	r3, #28
 800091c:	18fb      	adds	r3, r7, r3
 800091e:	0018      	movs	r0, r3
 8000920:	2314      	movs	r3, #20
 8000922:	001a      	movs	r2, r3
 8000924:	2100      	movs	r1, #0
 8000926:	f002 fde7 	bl	80034f8 <memset>
  TIM_IC_InitTypeDef sConfigIC = {0};
 800092a:	230c      	movs	r3, #12
 800092c:	18fb      	adds	r3, r7, r3
 800092e:	0018      	movs	r0, r3
 8000930:	2310      	movs	r3, #16
 8000932:	001a      	movs	r2, r3
 8000934:	2100      	movs	r1, #0
 8000936:	f002 fddf 	bl	80034f8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800093a:	1d3b      	adds	r3, r7, #4
 800093c:	0018      	movs	r0, r3
 800093e:	2308      	movs	r3, #8
 8000940:	001a      	movs	r2, r3
 8000942:	2100      	movs	r1, #0
 8000944:	f002 fdd8 	bl	80034f8 <memset>

  /* USER CODE BEGIN TIM21_Init 1 */

  /* USER CODE END TIM21_Init 1 */
  htim21.Instance = TIM21;
 8000948:	4b43      	ldr	r3, [pc, #268]	; (8000a58 <MX_TIM21_Init+0x154>)
 800094a:	4a44      	ldr	r2, [pc, #272]	; (8000a5c <MX_TIM21_Init+0x158>)
 800094c:	601a      	str	r2, [r3, #0]
  htim21.Init.Prescaler = 16-1;
 800094e:	4b42      	ldr	r3, [pc, #264]	; (8000a58 <MX_TIM21_Init+0x154>)
 8000950:	220f      	movs	r2, #15
 8000952:	605a      	str	r2, [r3, #4]
  htim21.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000954:	4b40      	ldr	r3, [pc, #256]	; (8000a58 <MX_TIM21_Init+0x154>)
 8000956:	2200      	movs	r2, #0
 8000958:	609a      	str	r2, [r3, #8]
  htim21.Init.Period = 10000;
 800095a:	4b3f      	ldr	r3, [pc, #252]	; (8000a58 <MX_TIM21_Init+0x154>)
 800095c:	4a40      	ldr	r2, [pc, #256]	; (8000a60 <MX_TIM21_Init+0x15c>)
 800095e:	60da      	str	r2, [r3, #12]
  htim21.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000960:	4b3d      	ldr	r3, [pc, #244]	; (8000a58 <MX_TIM21_Init+0x154>)
 8000962:	2200      	movs	r2, #0
 8000964:	611a      	str	r2, [r3, #16]
  htim21.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000966:	4b3c      	ldr	r3, [pc, #240]	; (8000a58 <MX_TIM21_Init+0x154>)
 8000968:	2200      	movs	r2, #0
 800096a:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim21) != HAL_OK)
 800096c:	4b3a      	ldr	r3, [pc, #232]	; (8000a58 <MX_TIM21_Init+0x154>)
 800096e:	0018      	movs	r0, r3
 8000970:	f001 fde0 	bl	8002534 <HAL_TIM_Base_Init>
 8000974:	1e03      	subs	r3, r0, #0
 8000976:	d001      	beq.n	800097c <MX_TIM21_Init+0x78>
  {
    Error_Handler();
 8000978:	f000 f8e2 	bl	8000b40 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800097c:	2130      	movs	r1, #48	; 0x30
 800097e:	187b      	adds	r3, r7, r1
 8000980:	2280      	movs	r2, #128	; 0x80
 8000982:	0152      	lsls	r2, r2, #5
 8000984:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim21, &sClockSourceConfig) != HAL_OK)
 8000986:	187a      	adds	r2, r7, r1
 8000988:	4b33      	ldr	r3, [pc, #204]	; (8000a58 <MX_TIM21_Init+0x154>)
 800098a:	0011      	movs	r1, r2
 800098c:	0018      	movs	r0, r3
 800098e:	f002 f91f 	bl	8002bd0 <HAL_TIM_ConfigClockSource>
 8000992:	1e03      	subs	r3, r0, #0
 8000994:	d001      	beq.n	800099a <MX_TIM21_Init+0x96>
  {
    Error_Handler();
 8000996:	f000 f8d3 	bl	8000b40 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim21) != HAL_OK)
 800099a:	4b2f      	ldr	r3, [pc, #188]	; (8000a58 <MX_TIM21_Init+0x154>)
 800099c:	0018      	movs	r0, r3
 800099e:	f001 fe09 	bl	80025b4 <HAL_TIM_IC_Init>
 80009a2:	1e03      	subs	r3, r0, #0
 80009a4:	d001      	beq.n	80009aa <MX_TIM21_Init+0xa6>
  {
    Error_Handler();
 80009a6:	f000 f8cb 	bl	8000b40 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 80009aa:	211c      	movs	r1, #28
 80009ac:	187b      	adds	r3, r7, r1
 80009ae:	2204      	movs	r2, #4
 80009b0:	601a      	str	r2, [r3, #0]
  sSlaveConfig.InputTrigger = TIM_TS_TI2FP2;
 80009b2:	187b      	adds	r3, r7, r1
 80009b4:	2260      	movs	r2, #96	; 0x60
 80009b6:	605a      	str	r2, [r3, #4]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80009b8:	187b      	adds	r3, r7, r1
 80009ba:	2200      	movs	r2, #0
 80009bc:	609a      	str	r2, [r3, #8]
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 80009be:	187b      	adds	r3, r7, r1
 80009c0:	2200      	movs	r2, #0
 80009c2:	60da      	str	r2, [r3, #12]
  sSlaveConfig.TriggerFilter = 0;
 80009c4:	187b      	adds	r3, r7, r1
 80009c6:	2200      	movs	r2, #0
 80009c8:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim21, &sSlaveConfig) != HAL_OK)
 80009ca:	187a      	adds	r2, r7, r1
 80009cc:	4b22      	ldr	r3, [pc, #136]	; (8000a58 <MX_TIM21_Init+0x154>)
 80009ce:	0011      	movs	r1, r2
 80009d0:	0018      	movs	r0, r3
 80009d2:	f002 f9d1 	bl	8002d78 <HAL_TIM_SlaveConfigSynchro>
 80009d6:	1e03      	subs	r3, r0, #0
 80009d8:	d001      	beq.n	80009de <MX_TIM21_Init+0xda>
  {
    Error_Handler();
 80009da:	f000 f8b1 	bl	8000b40 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80009de:	210c      	movs	r1, #12
 80009e0:	187b      	adds	r3, r7, r1
 80009e2:	2202      	movs	r2, #2
 80009e4:	601a      	str	r2, [r3, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 80009e6:	187b      	adds	r3, r7, r1
 80009e8:	2202      	movs	r2, #2
 80009ea:	605a      	str	r2, [r3, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80009ec:	187b      	adds	r3, r7, r1
 80009ee:	2200      	movs	r2, #0
 80009f0:	609a      	str	r2, [r3, #8]
  sConfigIC.ICFilter = 0;
 80009f2:	187b      	adds	r3, r7, r1
 80009f4:	2200      	movs	r2, #0
 80009f6:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim21, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80009f8:	1879      	adds	r1, r7, r1
 80009fa:	4b17      	ldr	r3, [pc, #92]	; (8000a58 <MX_TIM21_Init+0x154>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	0018      	movs	r0, r3
 8000a00:	f002 f842 	bl	8002a88 <HAL_TIM_IC_ConfigChannel>
 8000a04:	1e03      	subs	r3, r0, #0
 8000a06:	d001      	beq.n	8000a0c <MX_TIM21_Init+0x108>
  {
    Error_Handler();
 8000a08:	f000 f89a 	bl	8000b40 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000a0c:	210c      	movs	r1, #12
 8000a0e:	187b      	adds	r3, r7, r1
 8000a10:	2200      	movs	r2, #0
 8000a12:	601a      	str	r2, [r3, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000a14:	187b      	adds	r3, r7, r1
 8000a16:	2201      	movs	r2, #1
 8000a18:	605a      	str	r2, [r3, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim21, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000a1a:	1879      	adds	r1, r7, r1
 8000a1c:	4b0e      	ldr	r3, [pc, #56]	; (8000a58 <MX_TIM21_Init+0x154>)
 8000a1e:	2204      	movs	r2, #4
 8000a20:	0018      	movs	r0, r3
 8000a22:	f002 f831 	bl	8002a88 <HAL_TIM_IC_ConfigChannel>
 8000a26:	1e03      	subs	r3, r0, #0
 8000a28:	d001      	beq.n	8000a2e <MX_TIM21_Init+0x12a>
  {
    Error_Handler();
 8000a2a:	f000 f889 	bl	8000b40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a2e:	1d3b      	adds	r3, r7, #4
 8000a30:	2200      	movs	r2, #0
 8000a32:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a34:	1d3b      	adds	r3, r7, #4
 8000a36:	2200      	movs	r2, #0
 8000a38:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim21, &sMasterConfig) != HAL_OK)
 8000a3a:	1d3a      	adds	r2, r7, #4
 8000a3c:	4b06      	ldr	r3, [pc, #24]	; (8000a58 <MX_TIM21_Init+0x154>)
 8000a3e:	0011      	movs	r1, r2
 8000a40:	0018      	movs	r0, r3
 8000a42:	f002 fce5 	bl	8003410 <HAL_TIMEx_MasterConfigSynchronization>
 8000a46:	1e03      	subs	r3, r0, #0
 8000a48:	d001      	beq.n	8000a4e <MX_TIM21_Init+0x14a>
  {
    Error_Handler();
 8000a4a:	f000 f879 	bl	8000b40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM21_Init 2 */

  /* USER CODE END TIM21_Init 2 */

}
 8000a4e:	46c0      	nop			; (mov r8, r8)
 8000a50:	46bd      	mov	sp, r7
 8000a52:	b010      	add	sp, #64	; 0x40
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	46c0      	nop			; (mov r8, r8)
 8000a58:	20000084 	.word	0x20000084
 8000a5c:	40010800 	.word	0x40010800
 8000a60:	00002710 	.word	0x00002710

08000a64 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b082      	sub	sp, #8
 8000a68:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a6a:	4b08      	ldr	r3, [pc, #32]	; (8000a8c <MX_GPIO_Init+0x28>)
 8000a6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000a6e:	4b07      	ldr	r3, [pc, #28]	; (8000a8c <MX_GPIO_Init+0x28>)
 8000a70:	2101      	movs	r1, #1
 8000a72:	430a      	orrs	r2, r1
 8000a74:	62da      	str	r2, [r3, #44]	; 0x2c
 8000a76:	4b05      	ldr	r3, [pc, #20]	; (8000a8c <MX_GPIO_Init+0x28>)
 8000a78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a7a:	2201      	movs	r2, #1
 8000a7c:	4013      	ands	r3, r2
 8000a7e:	607b      	str	r3, [r7, #4]
 8000a80:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a82:	46c0      	nop			; (mov r8, r8)
 8000a84:	46bd      	mov	sp, r7
 8000a86:	b002      	add	sp, #8
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	46c0      	nop			; (mov r8, r8)
 8000a8c:	40021000 	.word	0x40021000

08000a90 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc1)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b082      	sub	sp, #8
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
	V_meas = HAL_ADC_GetValue(hadc1);
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	0018      	movs	r0, r3
 8000a9c:	f000 fbc8 	bl	8001230 <HAL_ADC_GetValue>
 8000aa0:	0003      	movs	r3, r0
 8000aa2:	b29a      	uxth	r2, r3
 8000aa4:	4b02      	ldr	r3, [pc, #8]	; (8000ab0 <HAL_ADC_ConvCpltCallback+0x20>)
 8000aa6:	801a      	strh	r2, [r3, #0]
}
 8000aa8:	46c0      	nop			; (mov r8, r8)
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	b002      	add	sp, #8
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	200000c4 	.word	0x200000c4

08000ab4 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 8000ab4:	b590      	push	{r4, r7, lr}
 8000ab6:	b083      	sub	sp, #12
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]

	// Check which version of the timer triggered
	if(htim == &htim21)
 8000abc:	687a      	ldr	r2, [r7, #4]
 8000abe:	4b1b      	ldr	r3, [pc, #108]	; (8000b2c <HAL_TIM_IC_CaptureCallback+0x78>)
 8000ac0:	429a      	cmp	r2, r3
 8000ac2:	d12f      	bne.n	8000b24 <HAL_TIM_IC_CaptureCallback+0x70>
	{ //It's called each 10*10000/32000000=3.215ms, as the input PWM frequency is 400Hz
		// If the interrupt is triggered by channel 2
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2){
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	7e1b      	ldrb	r3, [r3, #24]
 8000ac8:	2b02      	cmp	r3, #2
 8000aca:	d127      	bne.n	8000b1c <HAL_TIM_IC_CaptureCallback+0x68>
			// Read the IC value
			PWM_input_period = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	2104      	movs	r1, #4
 8000ad0:	0018      	movs	r0, r3
 8000ad2:	f002 f997 	bl	8002e04 <HAL_TIM_ReadCapturedValue>
 8000ad6:	0002      	movs	r2, r0
 8000ad8:	4b15      	ldr	r3, [pc, #84]	; (8000b30 <HAL_TIM_IC_CaptureCallback+0x7c>)
 8000ada:	601a      	str	r2, [r3, #0]
			//If it ́s not the initial 0 capture (=>no pulse registered)
			if (PWM_input_period != 0){
 8000adc:	4b14      	ldr	r3, [pc, #80]	; (8000b30 <HAL_TIM_IC_CaptureCallback+0x7c>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d01b      	beq.n	8000b1c <HAL_TIM_IC_CaptureCallback+0x68>
				PWM_input_pulseON = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	2100      	movs	r1, #0
 8000ae8:	0018      	movs	r0, r3
 8000aea:	f002 f98b 	bl	8002e04 <HAL_TIM_ReadCapturedValue>
 8000aee:	0002      	movs	r2, r0
 8000af0:	4b10      	ldr	r3, [pc, #64]	; (8000b34 <HAL_TIM_IC_CaptureCallback+0x80>)
 8000af2:	601a      	str	r2, [r3, #0]
				// Compute the Duty Cycle
				Duty_input = (float)(PWM_input_pulseON)/(float)PWM_input_period;
 8000af4:	4b0f      	ldr	r3, [pc, #60]	; (8000b34 <HAL_TIM_IC_CaptureCallback+0x80>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	0018      	movs	r0, r3
 8000afa:	f7ff fdc3 	bl	8000684 <__aeabi_ui2f>
 8000afe:	1c04      	adds	r4, r0, #0
 8000b00:	4b0b      	ldr	r3, [pc, #44]	; (8000b30 <HAL_TIM_IC_CaptureCallback+0x7c>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	0018      	movs	r0, r3
 8000b06:	f7ff fdbd 	bl	8000684 <__aeabi_ui2f>
 8000b0a:	1c03      	adds	r3, r0, #0
 8000b0c:	1c19      	adds	r1, r3, #0
 8000b0e:	1c20      	adds	r0, r4, #0
 8000b10:	f7ff fca0 	bl	8000454 <__aeabi_fdiv>
 8000b14:	1c03      	adds	r3, r0, #0
 8000b16:	1c1a      	adds	r2, r3, #0
 8000b18:	4b07      	ldr	r3, [pc, #28]	; (8000b38 <HAL_TIM_IC_CaptureCallback+0x84>)
 8000b1a:	601a      	str	r2, [r3, #0]

				//Computing the Thrust desired.
				//Thrust_desired = linear_map(Duty_input, 0.5, 1, 0, 25);//Depends on the comunication protocol?
			}
		}
		HAL_ADC_Start_IT(&hadc);
 8000b1c:	4b07      	ldr	r3, [pc, #28]	; (8000b3c <HAL_TIM_IC_CaptureCallback+0x88>)
 8000b1e:	0018      	movs	r0, r3
 8000b20:	f000 fb14 	bl	800114c <HAL_ADC_Start_IT>
		//Duty_output = Duty_input;

	}
}
 8000b24:	46c0      	nop			; (mov r8, r8)
 8000b26:	46bd      	mov	sp, r7
 8000b28:	b003      	add	sp, #12
 8000b2a:	bd90      	pop	{r4, r7, pc}
 8000b2c:	20000084 	.word	0x20000084
 8000b30:	200000cc 	.word	0x200000cc
 8000b34:	200000d0 	.word	0x200000d0
 8000b38:	200000c8 	.word	0x200000c8
 8000b3c:	20000028 	.word	0x20000028

08000b40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b44:	b672      	cpsid	i
}
 8000b46:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b48:	e7fe      	b.n	8000b48 <Error_Handler+0x8>
	...

08000b4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b50:	4b07      	ldr	r3, [pc, #28]	; (8000b70 <HAL_MspInit+0x24>)
 8000b52:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000b54:	4b06      	ldr	r3, [pc, #24]	; (8000b70 <HAL_MspInit+0x24>)
 8000b56:	2101      	movs	r1, #1
 8000b58:	430a      	orrs	r2, r1
 8000b5a:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b5c:	4b04      	ldr	r3, [pc, #16]	; (8000b70 <HAL_MspInit+0x24>)
 8000b5e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000b60:	4b03      	ldr	r3, [pc, #12]	; (8000b70 <HAL_MspInit+0x24>)
 8000b62:	2180      	movs	r1, #128	; 0x80
 8000b64:	0549      	lsls	r1, r1, #21
 8000b66:	430a      	orrs	r2, r1
 8000b68:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b6a:	46c0      	nop			; (mov r8, r8)
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	40021000 	.word	0x40021000

08000b74 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000b74:	b590      	push	{r4, r7, lr}
 8000b76:	b089      	sub	sp, #36	; 0x24
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b7c:	240c      	movs	r4, #12
 8000b7e:	193b      	adds	r3, r7, r4
 8000b80:	0018      	movs	r0, r3
 8000b82:	2314      	movs	r3, #20
 8000b84:	001a      	movs	r2, r3
 8000b86:	2100      	movs	r1, #0
 8000b88:	f002 fcb6 	bl	80034f8 <memset>
  if(hadc->Instance==ADC1)
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	4a18      	ldr	r2, [pc, #96]	; (8000bf4 <HAL_ADC_MspInit+0x80>)
 8000b92:	4293      	cmp	r3, r2
 8000b94:	d12a      	bne.n	8000bec <HAL_ADC_MspInit+0x78>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000b96:	4b18      	ldr	r3, [pc, #96]	; (8000bf8 <HAL_ADC_MspInit+0x84>)
 8000b98:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000b9a:	4b17      	ldr	r3, [pc, #92]	; (8000bf8 <HAL_ADC_MspInit+0x84>)
 8000b9c:	2180      	movs	r1, #128	; 0x80
 8000b9e:	0089      	lsls	r1, r1, #2
 8000ba0:	430a      	orrs	r2, r1
 8000ba2:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ba4:	4b14      	ldr	r3, [pc, #80]	; (8000bf8 <HAL_ADC_MspInit+0x84>)
 8000ba6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ba8:	4b13      	ldr	r3, [pc, #76]	; (8000bf8 <HAL_ADC_MspInit+0x84>)
 8000baa:	2101      	movs	r1, #1
 8000bac:	430a      	orrs	r2, r1
 8000bae:	62da      	str	r2, [r3, #44]	; 0x2c
 8000bb0:	4b11      	ldr	r3, [pc, #68]	; (8000bf8 <HAL_ADC_MspInit+0x84>)
 8000bb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bb4:	2201      	movs	r2, #1
 8000bb6:	4013      	ands	r3, r2
 8000bb8:	60bb      	str	r3, [r7, #8]
 8000bba:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PA4     ------> ADC_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000bbc:	193b      	adds	r3, r7, r4
 8000bbe:	2210      	movs	r2, #16
 8000bc0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000bc2:	193b      	adds	r3, r7, r4
 8000bc4:	2203      	movs	r2, #3
 8000bc6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc8:	193b      	adds	r3, r7, r4
 8000bca:	2200      	movs	r2, #0
 8000bcc:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bce:	193a      	adds	r2, r7, r4
 8000bd0:	23a0      	movs	r3, #160	; 0xa0
 8000bd2:	05db      	lsls	r3, r3, #23
 8000bd4:	0011      	movs	r1, r2
 8000bd6:	0018      	movs	r0, r3
 8000bd8:	f000 fddc 	bl	8001794 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_COMP_IRQn, 0, 0);
 8000bdc:	2200      	movs	r2, #0
 8000bde:	2100      	movs	r1, #0
 8000be0:	200c      	movs	r0, #12
 8000be2:	f000 fda5 	bl	8001730 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_COMP_IRQn);
 8000be6:	200c      	movs	r0, #12
 8000be8:	f000 fdb7 	bl	800175a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000bec:	46c0      	nop			; (mov r8, r8)
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	b009      	add	sp, #36	; 0x24
 8000bf2:	bd90      	pop	{r4, r7, pc}
 8000bf4:	40012400 	.word	0x40012400
 8000bf8:	40021000 	.word	0x40021000

08000bfc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000bfc:	b590      	push	{r4, r7, lr}
 8000bfe:	b089      	sub	sp, #36	; 0x24
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c04:	240c      	movs	r4, #12
 8000c06:	193b      	adds	r3, r7, r4
 8000c08:	0018      	movs	r0, r3
 8000c0a:	2314      	movs	r3, #20
 8000c0c:	001a      	movs	r2, r3
 8000c0e:	2100      	movs	r1, #0
 8000c10:	f002 fc72 	bl	80034f8 <memset>
  if(htim_base->Instance==TIM21)
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	4a1c      	ldr	r2, [pc, #112]	; (8000c8c <HAL_TIM_Base_MspInit+0x90>)
 8000c1a:	4293      	cmp	r3, r2
 8000c1c:	d131      	bne.n	8000c82 <HAL_TIM_Base_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM21_MspInit 0 */

  /* USER CODE END TIM21_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM21_CLK_ENABLE();
 8000c1e:	4b1c      	ldr	r3, [pc, #112]	; (8000c90 <HAL_TIM_Base_MspInit+0x94>)
 8000c20:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000c22:	4b1b      	ldr	r3, [pc, #108]	; (8000c90 <HAL_TIM_Base_MspInit+0x94>)
 8000c24:	2104      	movs	r1, #4
 8000c26:	430a      	orrs	r2, r1
 8000c28:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c2a:	4b19      	ldr	r3, [pc, #100]	; (8000c90 <HAL_TIM_Base_MspInit+0x94>)
 8000c2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000c2e:	4b18      	ldr	r3, [pc, #96]	; (8000c90 <HAL_TIM_Base_MspInit+0x94>)
 8000c30:	2101      	movs	r1, #1
 8000c32:	430a      	orrs	r2, r1
 8000c34:	62da      	str	r2, [r3, #44]	; 0x2c
 8000c36:	4b16      	ldr	r3, [pc, #88]	; (8000c90 <HAL_TIM_Base_MspInit+0x94>)
 8000c38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c3a:	2201      	movs	r2, #1
 8000c3c:	4013      	ands	r3, r2
 8000c3e:	60bb      	str	r3, [r7, #8]
 8000c40:	68bb      	ldr	r3, [r7, #8]
    /**TIM21 GPIO Configuration
    PA9     ------> TIM21_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000c42:	193b      	adds	r3, r7, r4
 8000c44:	2280      	movs	r2, #128	; 0x80
 8000c46:	0092      	lsls	r2, r2, #2
 8000c48:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c4a:	0021      	movs	r1, r4
 8000c4c:	187b      	adds	r3, r7, r1
 8000c4e:	2202      	movs	r2, #2
 8000c50:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c52:	187b      	adds	r3, r7, r1
 8000c54:	2200      	movs	r2, #0
 8000c56:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c58:	187b      	adds	r3, r7, r1
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM21;
 8000c5e:	187b      	adds	r3, r7, r1
 8000c60:	2205      	movs	r2, #5
 8000c62:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c64:	187a      	adds	r2, r7, r1
 8000c66:	23a0      	movs	r3, #160	; 0xa0
 8000c68:	05db      	lsls	r3, r3, #23
 8000c6a:	0011      	movs	r1, r2
 8000c6c:	0018      	movs	r0, r3
 8000c6e:	f000 fd91 	bl	8001794 <HAL_GPIO_Init>

    /* TIM21 interrupt Init */
    HAL_NVIC_SetPriority(TIM21_IRQn, 0, 0);
 8000c72:	2200      	movs	r2, #0
 8000c74:	2100      	movs	r1, #0
 8000c76:	2014      	movs	r0, #20
 8000c78:	f000 fd5a 	bl	8001730 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM21_IRQn);
 8000c7c:	2014      	movs	r0, #20
 8000c7e:	f000 fd6c 	bl	800175a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM21_MspInit 1 */

  /* USER CODE END TIM21_MspInit 1 */
  }

}
 8000c82:	46c0      	nop			; (mov r8, r8)
 8000c84:	46bd      	mov	sp, r7
 8000c86:	b009      	add	sp, #36	; 0x24
 8000c88:	bd90      	pop	{r4, r7, pc}
 8000c8a:	46c0      	nop			; (mov r8, r8)
 8000c8c:	40010800 	.word	0x40010800
 8000c90:	40021000 	.word	0x40021000

08000c94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c98:	e7fe      	b.n	8000c98 <NMI_Handler+0x4>

08000c9a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c9a:	b580      	push	{r7, lr}
 8000c9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c9e:	e7fe      	b.n	8000c9e <HardFault_Handler+0x4>

08000ca0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000ca4:	46c0      	nop			; (mov r8, r8)
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}

08000caa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000caa:	b580      	push	{r7, lr}
 8000cac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cae:	46c0      	nop			; (mov r8, r8)
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}

08000cb4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cb8:	f000 f8b8 	bl	8000e2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cbc:	46c0      	nop			; (mov r8, r8)
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}
	...

08000cc4 <ADC1_COMP_IRQHandler>:

/**
  * @brief This function handles ADC, COMP1 and COMP2 interrupts (COMP interrupts through EXTI lines 21 and 22).
  */
void ADC1_COMP_IRQHandler(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_COMP_IRQn 0 */

  /* USER CODE END ADC1_COMP_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc);
 8000cc8:	4b03      	ldr	r3, [pc, #12]	; (8000cd8 <ADC1_COMP_IRQHandler+0x14>)
 8000cca:	0018      	movs	r0, r3
 8000ccc:	f000 fabc 	bl	8001248 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_COMP_IRQn 1 */

  /* USER CODE END ADC1_COMP_IRQn 1 */
}
 8000cd0:	46c0      	nop			; (mov r8, r8)
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	46c0      	nop			; (mov r8, r8)
 8000cd8:	20000028 	.word	0x20000028

08000cdc <TIM21_IRQHandler>:

/**
  * @brief This function handles TIM21 global interrupt.
  */
void TIM21_IRQHandler(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM21_IRQn 0 */

  /* USER CODE END TIM21_IRQn 0 */
  HAL_TIM_IRQHandler(&htim21);
 8000ce0:	4b03      	ldr	r3, [pc, #12]	; (8000cf0 <TIM21_IRQHandler+0x14>)
 8000ce2:	0018      	movs	r0, r3
 8000ce4:	f001 fde8 	bl	80028b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM21_IRQn 1 */

  /* USER CODE END TIM21_IRQn 1 */
}
 8000ce8:	46c0      	nop			; (mov r8, r8)
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	46c0      	nop			; (mov r8, r8)
 8000cf0:	20000084 	.word	0x20000084

08000cf4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cf8:	46c0      	nop			; (mov r8, r8)
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}
	...

08000d00 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8000d00:	4813      	ldr	r0, [pc, #76]	; (8000d50 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8000d02:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000d04:	f7ff fff6 	bl	8000cf4 <SystemInit>

/*Check if boot space corresponds to system memory*/

    LDR R0,=0x00000004
 8000d08:	4812      	ldr	r0, [pc, #72]	; (8000d54 <LoopForever+0x6>)
    LDR R1, [R0]
 8000d0a:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8000d0c:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8000d0e:	4a12      	ldr	r2, [pc, #72]	; (8000d58 <LoopForever+0xa>)
    CMP R1, R2
 8000d10:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8000d12:	d105      	bne.n	8000d20 <ApplicationStart>

 /*SYSCFG clock enable*/
    LDR R0,=0x40021034
 8000d14:	4811      	ldr	r0, [pc, #68]	; (8000d5c <LoopForever+0xe>)
    LDR R1,=0x00000001
 8000d16:	4912      	ldr	r1, [pc, #72]	; (8000d60 <LoopForever+0x12>)
    STR R1, [R0]
 8000d18:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8000d1a:	4812      	ldr	r0, [pc, #72]	; (8000d64 <LoopForever+0x16>)
    LDR R1,=0x00000000
 8000d1c:	4912      	ldr	r1, [pc, #72]	; (8000d68 <LoopForever+0x1a>)
    STR R1, [R0]
 8000d1e:	6001      	str	r1, [r0, #0]

08000d20 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d20:	4812      	ldr	r0, [pc, #72]	; (8000d6c <LoopForever+0x1e>)
  ldr r1, =_edata
 8000d22:	4913      	ldr	r1, [pc, #76]	; (8000d70 <LoopForever+0x22>)
  ldr r2, =_sidata
 8000d24:	4a13      	ldr	r2, [pc, #76]	; (8000d74 <LoopForever+0x26>)
  movs r3, #0
 8000d26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d28:	e002      	b.n	8000d30 <LoopCopyDataInit>

08000d2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d2e:	3304      	adds	r3, #4

08000d30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d34:	d3f9      	bcc.n	8000d2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d36:	4a10      	ldr	r2, [pc, #64]	; (8000d78 <LoopForever+0x2a>)
  ldr r4, =_ebss
 8000d38:	4c10      	ldr	r4, [pc, #64]	; (8000d7c <LoopForever+0x2e>)
  movs r3, #0
 8000d3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d3c:	e001      	b.n	8000d42 <LoopFillZerobss>

08000d3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d40:	3204      	adds	r2, #4

08000d42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d44:	d3fb      	bcc.n	8000d3e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d46:	f002 fbb3 	bl	80034b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d4a:	f7ff fd07 	bl	800075c <main>

08000d4e <LoopForever>:

LoopForever:
    b LoopForever
 8000d4e:	e7fe      	b.n	8000d4e <LoopForever>
   ldr   r0, =_estack
 8000d50:	20000800 	.word	0x20000800
    LDR R0,=0x00000004
 8000d54:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8000d58:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021034
 8000d5c:	40021034 	.word	0x40021034
    LDR R1,=0x00000001
 8000d60:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8000d64:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8000d68:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8000d6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d70:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000d74:	080035cc 	.word	0x080035cc
  ldr r2, =_sbss
 8000d78:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000d7c:	200000d8 	.word	0x200000d8

08000d80 <DMA1_Channel1_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d80:	e7fe      	b.n	8000d80 <DMA1_Channel1_IRQHandler>
	...

08000d84 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b082      	sub	sp, #8
 8000d88:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d8a:	1dfb      	adds	r3, r7, #7
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000d90:	4b0b      	ldr	r3, [pc, #44]	; (8000dc0 <HAL_Init+0x3c>)
 8000d92:	681a      	ldr	r2, [r3, #0]
 8000d94:	4b0a      	ldr	r3, [pc, #40]	; (8000dc0 <HAL_Init+0x3c>)
 8000d96:	2140      	movs	r1, #64	; 0x40
 8000d98:	430a      	orrs	r2, r1
 8000d9a:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d9c:	2003      	movs	r0, #3
 8000d9e:	f000 f811 	bl	8000dc4 <HAL_InitTick>
 8000da2:	1e03      	subs	r3, r0, #0
 8000da4:	d003      	beq.n	8000dae <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000da6:	1dfb      	adds	r3, r7, #7
 8000da8:	2201      	movs	r2, #1
 8000daa:	701a      	strb	r2, [r3, #0]
 8000dac:	e001      	b.n	8000db2 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000dae:	f7ff fecd 	bl	8000b4c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000db2:	1dfb      	adds	r3, r7, #7
 8000db4:	781b      	ldrb	r3, [r3, #0]
}
 8000db6:	0018      	movs	r0, r3
 8000db8:	46bd      	mov	sp, r7
 8000dba:	b002      	add	sp, #8
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	46c0      	nop			; (mov r8, r8)
 8000dc0:	40022000 	.word	0x40022000

08000dc4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dc4:	b590      	push	{r4, r7, lr}
 8000dc6:	b083      	sub	sp, #12
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000dcc:	4b14      	ldr	r3, [pc, #80]	; (8000e20 <HAL_InitTick+0x5c>)
 8000dce:	681c      	ldr	r4, [r3, #0]
 8000dd0:	4b14      	ldr	r3, [pc, #80]	; (8000e24 <HAL_InitTick+0x60>)
 8000dd2:	781b      	ldrb	r3, [r3, #0]
 8000dd4:	0019      	movs	r1, r3
 8000dd6:	23fa      	movs	r3, #250	; 0xfa
 8000dd8:	0098      	lsls	r0, r3, #2
 8000dda:	f7ff f995 	bl	8000108 <__udivsi3>
 8000dde:	0003      	movs	r3, r0
 8000de0:	0019      	movs	r1, r3
 8000de2:	0020      	movs	r0, r4
 8000de4:	f7ff f990 	bl	8000108 <__udivsi3>
 8000de8:	0003      	movs	r3, r0
 8000dea:	0018      	movs	r0, r3
 8000dec:	f000 fcc5 	bl	800177a <HAL_SYSTICK_Config>
 8000df0:	1e03      	subs	r3, r0, #0
 8000df2:	d001      	beq.n	8000df8 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000df4:	2301      	movs	r3, #1
 8000df6:	e00f      	b.n	8000e18 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	2b03      	cmp	r3, #3
 8000dfc:	d80b      	bhi.n	8000e16 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dfe:	6879      	ldr	r1, [r7, #4]
 8000e00:	2301      	movs	r3, #1
 8000e02:	425b      	negs	r3, r3
 8000e04:	2200      	movs	r2, #0
 8000e06:	0018      	movs	r0, r3
 8000e08:	f000 fc92 	bl	8001730 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e0c:	4b06      	ldr	r3, [pc, #24]	; (8000e28 <HAL_InitTick+0x64>)
 8000e0e:	687a      	ldr	r2, [r7, #4]
 8000e10:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e12:	2300      	movs	r3, #0
 8000e14:	e000      	b.n	8000e18 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000e16:	2301      	movs	r3, #1
}
 8000e18:	0018      	movs	r0, r3
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	b003      	add	sp, #12
 8000e1e:	bd90      	pop	{r4, r7, pc}
 8000e20:	20000000 	.word	0x20000000
 8000e24:	20000008 	.word	0x20000008
 8000e28:	20000004 	.word	0x20000004

08000e2c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e30:	4b05      	ldr	r3, [pc, #20]	; (8000e48 <HAL_IncTick+0x1c>)
 8000e32:	781b      	ldrb	r3, [r3, #0]
 8000e34:	001a      	movs	r2, r3
 8000e36:	4b05      	ldr	r3, [pc, #20]	; (8000e4c <HAL_IncTick+0x20>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	18d2      	adds	r2, r2, r3
 8000e3c:	4b03      	ldr	r3, [pc, #12]	; (8000e4c <HAL_IncTick+0x20>)
 8000e3e:	601a      	str	r2, [r3, #0]
}
 8000e40:	46c0      	nop			; (mov r8, r8)
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	46c0      	nop			; (mov r8, r8)
 8000e48:	20000008 	.word	0x20000008
 8000e4c:	200000d4 	.word	0x200000d4

08000e50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	af00      	add	r7, sp, #0
  return uwTick;
 8000e54:	4b02      	ldr	r3, [pc, #8]	; (8000e60 <HAL_GetTick+0x10>)
 8000e56:	681b      	ldr	r3, [r3, #0]
}
 8000e58:	0018      	movs	r0, r3
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	46c0      	nop			; (mov r8, r8)
 8000e60:	200000d4 	.word	0x200000d4

08000e64 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b082      	sub	sp, #8
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d101      	bne.n	8000e76 <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 8000e72:	2301      	movs	r3, #1
 8000e74:	e159      	b.n	800112a <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d10a      	bne.n	8000e94 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	2200      	movs	r2, #0
 8000e82:	659a      	str	r2, [r3, #88]	; 0x58

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	2250      	movs	r2, #80	; 0x50
 8000e88:	2100      	movs	r1, #0
 8000e8a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	0018      	movs	r0, r3
 8000e90:	f7ff fe70 	bl	8000b74 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000e98:	2210      	movs	r2, #16
 8000e9a:	4013      	ands	r3, r2
 8000e9c:	2b10      	cmp	r3, #16
 8000e9e:	d005      	beq.n	8000eac <HAL_ADC_Init+0x48>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET))
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	689b      	ldr	r3, [r3, #8]
 8000ea6:	2204      	movs	r2, #4
 8000ea8:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8000eaa:	d00b      	beq.n	8000ec4 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000eb0:	2210      	movs	r2, #16
 8000eb2:	431a      	orrs	r2, r3
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	2250      	movs	r2, #80	; 0x50
 8000ebc:	2100      	movs	r1, #0
 8000ebe:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8000ec0:	2301      	movs	r3, #1
 8000ec2:	e132      	b.n	800112a <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000ec8:	4a9a      	ldr	r2, [pc, #616]	; (8001134 <HAL_ADC_Init+0x2d0>)
 8000eca:	4013      	ands	r3, r2
 8000ecc:	2202      	movs	r2, #2
 8000ece:	431a      	orrs	r2, r3
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	655a      	str	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	689b      	ldr	r3, [r3, #8]
 8000eda:	2203      	movs	r2, #3
 8000edc:	4013      	ands	r3, r2
 8000ede:	2b01      	cmp	r3, #1
 8000ee0:	d108      	bne.n	8000ef4 <HAL_ADC_Init+0x90>
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	2201      	movs	r2, #1
 8000eea:	4013      	ands	r3, r2
 8000eec:	2b01      	cmp	r3, #1
 8000eee:	d101      	bne.n	8000ef4 <HAL_ADC_Init+0x90>
 8000ef0:	2301      	movs	r3, #1
 8000ef2:	e000      	b.n	8000ef6 <HAL_ADC_Init+0x92>
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d149      	bne.n	8000f8e <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */

    /* Configuration of ADC clock: clock source PCLK or asynchronous with
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	685a      	ldr	r2, [r3, #4]
 8000efe:	23c0      	movs	r3, #192	; 0xc0
 8000f00:	061b      	lsls	r3, r3, #24
 8000f02:	429a      	cmp	r2, r3
 8000f04:	d00b      	beq.n	8000f1e <HAL_ADC_Init+0xba>
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	685a      	ldr	r2, [r3, #4]
 8000f0a:	2380      	movs	r3, #128	; 0x80
 8000f0c:	05db      	lsls	r3, r3, #23
 8000f0e:	429a      	cmp	r2, r3
 8000f10:	d005      	beq.n	8000f1e <HAL_ADC_Init+0xba>
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	685a      	ldr	r2, [r3, #4]
 8000f16:	2380      	movs	r3, #128	; 0x80
 8000f18:	061b      	lsls	r3, r3, #24
 8000f1a:	429a      	cmp	r2, r3
 8000f1c:	d111      	bne.n	8000f42 <HAL_ADC_Init+0xde>
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	691a      	ldr	r2, [r3, #16]
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	0092      	lsls	r2, r2, #2
 8000f2a:	0892      	lsrs	r2, r2, #2
 8000f2c:	611a      	str	r2, [r3, #16]
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	6919      	ldr	r1, [r3, #16]
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	685a      	ldr	r2, [r3, #4]
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	430a      	orrs	r2, r1
 8000f3e:	611a      	str	r2, [r3, #16]
 8000f40:	e014      	b.n	8000f6c <HAL_ADC_Init+0x108>
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	691a      	ldr	r2, [r3, #16]
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	0092      	lsls	r2, r2, #2
 8000f4e:	0892      	lsrs	r2, r2, #2
 8000f50:	611a      	str	r2, [r3, #16]
 8000f52:	4b79      	ldr	r3, [pc, #484]	; (8001138 <HAL_ADC_Init+0x2d4>)
 8000f54:	681a      	ldr	r2, [r3, #0]
 8000f56:	4b78      	ldr	r3, [pc, #480]	; (8001138 <HAL_ADC_Init+0x2d4>)
 8000f58:	4978      	ldr	r1, [pc, #480]	; (800113c <HAL_ADC_Init+0x2d8>)
 8000f5a:	400a      	ands	r2, r1
 8000f5c:	601a      	str	r2, [r3, #0]
 8000f5e:	4b76      	ldr	r3, [pc, #472]	; (8001138 <HAL_ADC_Init+0x2d4>)
 8000f60:	6819      	ldr	r1, [r3, #0]
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	685a      	ldr	r2, [r3, #4]
 8000f66:	4b74      	ldr	r3, [pc, #464]	; (8001138 <HAL_ADC_Init+0x2d4>)
 8000f68:	430a      	orrs	r2, r1
 8000f6a:	601a      	str	r2, [r3, #0]

    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_RES);
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	68da      	ldr	r2, [r3, #12]
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	2118      	movs	r1, #24
 8000f78:	438a      	bics	r2, r1
 8000f7a:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	68d9      	ldr	r1, [r3, #12]
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	689a      	ldr	r2, [r3, #8]
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	430a      	orrs	r2, r1
 8000f8c:	60da      	str	r2, [r3, #12]
  }

  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8000f8e:	4b6a      	ldr	r3, [pc, #424]	; (8001138 <HAL_ADC_Init+0x2d4>)
 8000f90:	681a      	ldr	r2, [r3, #0]
 8000f92:	4b69      	ldr	r3, [pc, #420]	; (8001138 <HAL_ADC_Init+0x2d4>)
 8000f94:	496a      	ldr	r1, [pc, #424]	; (8001140 <HAL_ADC_Init+0x2dc>)
 8000f96:	400a      	ands	r2, r1
 8000f98:	601a      	str	r2, [r3, #0]
  ADC->CCR |= __HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);
 8000f9a:	4b67      	ldr	r3, [pc, #412]	; (8001138 <HAL_ADC_Init+0x2d4>)
 8000f9c:	6819      	ldr	r1, [r3, #0]
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fa2:	065a      	lsls	r2, r3, #25
 8000fa4:	4b64      	ldr	r3, [pc, #400]	; (8001138 <HAL_ADC_Init+0x2d4>)
 8000fa6:	430a      	orrs	r2, r1
 8000fa8:	601a      	str	r2, [r3, #0]

  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	689a      	ldr	r2, [r3, #8]
 8000fb0:	2380      	movs	r3, #128	; 0x80
 8000fb2:	055b      	lsls	r3, r3, #21
 8000fb4:	4013      	ands	r3, r2
 8000fb6:	d108      	bne.n	8000fca <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	689a      	ldr	r2, [r3, #8]
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	2180      	movs	r1, #128	; 0x80
 8000fc4:	0549      	lsls	r1, r1, #21
 8000fc6:	430a      	orrs	r2, r1
 8000fc8:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	68da      	ldr	r2, [r3, #12]
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	495b      	ldr	r1, [pc, #364]	; (8001144 <HAL_ADC_Init+0x2e0>)
 8000fd6:	400a      	ands	r2, r1
 8000fd8:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN);

  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	68d9      	ldr	r1, [r3, #12]
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	691b      	ldr	r3, [r3, #16]
 8000fe8:	2b02      	cmp	r3, #2
 8000fea:	d101      	bne.n	8000ff0 <HAL_ADC_Init+0x18c>
 8000fec:	2304      	movs	r3, #4
 8000fee:	e000      	b.n	8000ff2 <HAL_ADC_Init+0x18e>
 8000ff0:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000ff2:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	2020      	movs	r0, #32
 8000ff8:	5c1b      	ldrb	r3, [r3, r0]
 8000ffa:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8000ffc:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	202c      	movs	r0, #44	; 0x2c
 8001002:	5c1b      	ldrb	r3, [r3, r0]
 8001004:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001006:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 800100c:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	699b      	ldr	r3, [r3, #24]
 8001012:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 8001014:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	69db      	ldr	r3, [r3, #28]
 800101a:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 800101c:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	430a      	orrs	r2, r1
 8001024:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800102a:	23c2      	movs	r3, #194	; 0xc2
 800102c:	33ff      	adds	r3, #255	; 0xff
 800102e:	429a      	cmp	r2, r3
 8001030:	d00b      	beq.n	800104a <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	68d9      	ldr	r1, [r3, #12]
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                             hadc->Init.ExternalTrigConvEdge;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8001040:	431a      	orrs	r2, r3
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	430a      	orrs	r2, r1
 8001048:	60da      	str	r2, [r3, #12]
  }

  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	2221      	movs	r2, #33	; 0x21
 800104e:	5c9b      	ldrb	r3, [r3, r2]
 8001050:	2b01      	cmp	r3, #1
 8001052:	d11a      	bne.n	800108a <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	2220      	movs	r2, #32
 8001058:	5c9b      	ldrb	r3, [r3, r2]
 800105a:	2b00      	cmp	r3, #0
 800105c:	d109      	bne.n	8001072 <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	68da      	ldr	r2, [r3, #12]
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	2180      	movs	r1, #128	; 0x80
 800106a:	0249      	lsls	r1, r1, #9
 800106c:	430a      	orrs	r2, r1
 800106e:	60da      	str	r2, [r3, #12]
 8001070:	e00b      	b.n	800108a <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */

      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001076:	2220      	movs	r2, #32
 8001078:	431a      	orrs	r2, r3
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001082:	2201      	movs	r2, #1
 8001084:	431a      	orrs	r2, r3
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  if (hadc->Init.OversamplingMode == ENABLE)
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800108e:	2b01      	cmp	r3, #1
 8001090:	d11f      	bne.n	80010d2 <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */

    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_OVSR |
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	691a      	ldr	r2, [r3, #16]
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	492a      	ldr	r1, [pc, #168]	; (8001148 <HAL_ADC_Init+0x2e4>)
 800109e:	400a      	ands	r2, r1
 80010a0:	611a      	str	r2, [r3, #16]
                               ADC_CFGR2_OVSS |
                               ADC_CFGR2_TOVS);

    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	6919      	ldr	r1, [r3, #16]
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                              hadc->Init.Oversample.RightBitShift             |
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 80010b0:	431a      	orrs	r2, r3
                              hadc->Init.Oversample.TriggeredMode);
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                              hadc->Init.Oversample.RightBitShift             |
 80010b6:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	430a      	orrs	r2, r1
 80010be:	611a      	str	r2, [r3, #16]

    /* Enable OverSampling mode */
    hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	691a      	ldr	r2, [r3, #16]
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	2101      	movs	r1, #1
 80010cc:	430a      	orrs	r2, r1
 80010ce:	611a      	str	r2, [r3, #16]
 80010d0:	e00e      	b.n	80010f0 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	691b      	ldr	r3, [r3, #16]
 80010d8:	2201      	movs	r2, #1
 80010da:	4013      	ands	r3, r2
 80010dc:	2b01      	cmp	r3, #1
 80010de:	d107      	bne.n	80010f0 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	691a      	ldr	r2, [r3, #16]
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	2101      	movs	r1, #1
 80010ec:	438a      	bics	r2, r1
 80010ee:	611a      	str	r2, [r3, #16]
    }
  }

  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	695a      	ldr	r2, [r3, #20]
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	2107      	movs	r1, #7
 80010fc:	438a      	bics	r2, r1
 80010fe:	615a      	str	r2, [r3, #20]

  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	6959      	ldr	r1, [r3, #20]
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	430a      	orrs	r2, r1
 8001110:	615a      	str	r2, [r3, #20]

  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	2200      	movs	r2, #0
 8001116:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800111c:	2203      	movs	r2, #3
 800111e:	4393      	bics	r3, r2
 8001120:	2201      	movs	r2, #1
 8001122:	431a      	orrs	r2, r3
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	655a      	str	r2, [r3, #84]	; 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8001128:	2300      	movs	r3, #0
}
 800112a:	0018      	movs	r0, r3
 800112c:	46bd      	mov	sp, r7
 800112e:	b002      	add	sp, #8
 8001130:	bd80      	pop	{r7, pc}
 8001132:	46c0      	nop			; (mov r8, r8)
 8001134:	fffffefd 	.word	0xfffffefd
 8001138:	40012708 	.word	0x40012708
 800113c:	ffc3ffff 	.word	0xffc3ffff
 8001140:	fdffffff 	.word	0xfdffffff
 8001144:	fffe0219 	.word	0xfffe0219
 8001148:	fffffc03 	.word	0xfffffc03

0800114c <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 800114c:	b590      	push	{r4, r7, lr}
 800114e:	b085      	sub	sp, #20
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001154:	230f      	movs	r3, #15
 8001156:	18fb      	adds	r3, r7, r3
 8001158:	2200      	movs	r2, #0
 800115a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	689b      	ldr	r3, [r3, #8]
 8001162:	2204      	movs	r2, #4
 8001164:	4013      	ands	r3, r2
 8001166:	d156      	bne.n	8001216 <HAL_ADC_Start_IT+0xca>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	2250      	movs	r2, #80	; 0x50
 800116c:	5c9b      	ldrb	r3, [r3, r2]
 800116e:	2b01      	cmp	r3, #1
 8001170:	d101      	bne.n	8001176 <HAL_ADC_Start_IT+0x2a>
 8001172:	2302      	movs	r3, #2
 8001174:	e056      	b.n	8001224 <HAL_ADC_Start_IT+0xd8>
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	2250      	movs	r2, #80	; 0x50
 800117a:	2101      	movs	r1, #1
 800117c:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	69db      	ldr	r3, [r3, #28]
 8001182:	2b01      	cmp	r3, #1
 8001184:	d007      	beq.n	8001196 <HAL_ADC_Start_IT+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8001186:	230f      	movs	r3, #15
 8001188:	18fc      	adds	r4, r7, r3
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	0018      	movs	r0, r3
 800118e:	f000 f99b 	bl	80014c8 <ADC_Enable>
 8001192:	0003      	movs	r3, r0
 8001194:	7023      	strb	r3, [r4, #0]
    }

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001196:	230f      	movs	r3, #15
 8001198:	18fb      	adds	r3, r7, r3
 800119a:	781b      	ldrb	r3, [r3, #0]
 800119c:	2b00      	cmp	r3, #0
 800119e:	d13e      	bne.n	800121e <HAL_ADC_Start_IT+0xd2>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011a4:	4a21      	ldr	r2, [pc, #132]	; (800122c <HAL_ADC_Start_IT+0xe0>)
 80011a6:	4013      	ands	r3, r2
 80011a8:	2280      	movs	r2, #128	; 0x80
 80011aa:	0052      	lsls	r2, r2, #1
 80011ac:	431a      	orrs	r2, r3
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	2200      	movs	r2, #0
 80011b6:	659a      	str	r2, [r3, #88]	; 0x58

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	2250      	movs	r2, #80	; 0x50
 80011bc:	2100      	movs	r1, #0
 80011be:	5499      	strb	r1, [r3, r2]

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	221c      	movs	r2, #28
 80011c6:	601a      	str	r2, [r3, #0]

      /* Enable ADC end of conversion interrupt */
      /* Enable ADC overrun interrupt */
      switch (hadc->Init.EOCSelection)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	695b      	ldr	r3, [r3, #20]
 80011cc:	2b08      	cmp	r3, #8
 80011ce:	d110      	bne.n	80011f2 <HAL_ADC_Start_IT+0xa6>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	685a      	ldr	r2, [r3, #4]
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	2104      	movs	r1, #4
 80011dc:	438a      	bics	r2, r1
 80011de:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOS | ADC_IT_OVR));
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	685a      	ldr	r2, [r3, #4]
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	2118      	movs	r1, #24
 80011ec:	430a      	orrs	r2, r1
 80011ee:	605a      	str	r2, [r3, #4]
          break;
 80011f0:	e008      	b.n	8001204 <HAL_ADC_Start_IT+0xb8>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	685a      	ldr	r2, [r3, #4]
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	211c      	movs	r1, #28
 80011fe:	430a      	orrs	r2, r1
 8001200:	605a      	str	r2, [r3, #4]
          break;
 8001202:	46c0      	nop			; (mov r8, r8)

      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	689a      	ldr	r2, [r3, #8]
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	2104      	movs	r1, #4
 8001210:	430a      	orrs	r2, r1
 8001212:	609a      	str	r2, [r3, #8]
 8001214:	e003      	b.n	800121e <HAL_ADC_Start_IT+0xd2>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001216:	230f      	movs	r3, #15
 8001218:	18fb      	adds	r3, r7, r3
 800121a:	2202      	movs	r2, #2
 800121c:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 800121e:	230f      	movs	r3, #15
 8001220:	18fb      	adds	r3, r7, r3
 8001222:	781b      	ldrb	r3, [r3, #0]
}
 8001224:	0018      	movs	r0, r3
 8001226:	46bd      	mov	sp, r7
 8001228:	b005      	add	sp, #20
 800122a:	bd90      	pop	{r4, r7, pc}
 800122c:	fffff0fe 	.word	0xfffff0fe

08001230 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b082      	sub	sp, #8
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800123e:	0018      	movs	r0, r3
 8001240:	46bd      	mov	sp, r7
 8001242:	b002      	add	sp, #8
 8001244:	bd80      	pop	{r7, pc}
	...

08001248 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b084      	sub	sp, #16
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_ier = hadc->Instance->IER;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	685b      	ldr	r3, [r3, #4]
 800125e:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Conversion flag for regular group ========== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	2204      	movs	r2, #4
 8001264:	4013      	ands	r3, r2
 8001266:	d003      	beq.n	8001270 <HAL_ADC_IRQHandler+0x28>
 8001268:	68bb      	ldr	r3, [r7, #8]
 800126a:	2204      	movs	r2, #4
 800126c:	4013      	ands	r3, r2
 800126e:	d107      	bne.n	8001280 <HAL_ADC_IRQHandler+0x38>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	2208      	movs	r2, #8
 8001274:	4013      	ands	r3, r2
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001276:	d04e      	beq.n	8001316 <HAL_ADC_IRQHandler+0xce>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001278:	68bb      	ldr	r3, [r7, #8]
 800127a:	2208      	movs	r2, #8
 800127c:	4013      	ands	r3, r2
 800127e:	d04a      	beq.n	8001316 <HAL_ADC_IRQHandler+0xce>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001284:	2210      	movs	r2, #16
 8001286:	4013      	ands	r3, r2
 8001288:	d106      	bne.n	8001298 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800128e:	2280      	movs	r2, #128	; 0x80
 8001290:	0092      	lsls	r2, r2, #2
 8001292:	431a      	orrs	r2, r3
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	68da      	ldr	r2, [r3, #12]
 800129e:	23c0      	movs	r3, #192	; 0xc0
 80012a0:	011b      	lsls	r3, r3, #4
 80012a2:	4013      	ands	r3, r2
 80012a4:	d12b      	bne.n	80012fe <HAL_ADC_IRQHandler+0xb6>
        (hadc->Init.ContinuousConvMode == DISABLE))
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	2220      	movs	r2, #32
 80012aa:	5c9b      	ldrb	r3, [r3, r2]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d126      	bne.n	80012fe <HAL_ADC_IRQHandler+0xb6>
    {
      /* If End of Sequence is reached, disable interrupts */
      if ((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS)
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	2208      	movs	r2, #8
 80012b4:	4013      	ands	r3, r2
 80012b6:	d022      	beq.n	80012fe <HAL_ADC_IRQHandler+0xb6>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	689b      	ldr	r3, [r3, #8]
 80012be:	2204      	movs	r2, #4
 80012c0:	4013      	ands	r3, r2
 80012c2:	d110      	bne.n	80012e6 <HAL_ADC_IRQHandler+0x9e>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	685a      	ldr	r2, [r3, #4]
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	210c      	movs	r1, #12
 80012d0:	438a      	bics	r2, r1
 80012d2:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012d8:	4a2f      	ldr	r2, [pc, #188]	; (8001398 <HAL_ADC_IRQHandler+0x150>)
 80012da:	4013      	ands	r3, r2
 80012dc:	2201      	movs	r2, #1
 80012de:	431a      	orrs	r2, r3
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	655a      	str	r2, [r3, #84]	; 0x54
 80012e4:	e00b      	b.n	80012fe <HAL_ADC_IRQHandler+0xb6>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012ea:	2220      	movs	r2, #32
 80012ec:	431a      	orrs	r2, r3
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012f6:	2201      	movs	r2, #1
 80012f8:	431a      	orrs	r2, r3
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	659a      	str	r2, [r3, #88]	; 0x58
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	0018      	movs	r0, r3
 8001302:	f7ff fbc5 	bl	8000a90 <HAL_ADC_ConvCpltCallback>
    /* Note: Management of low power auto-wait enabled: flags must be cleared */
    /*       by user when fetching ADC conversion data.                       */
    /*       This case is managed in IRQ handler, but this low-power mode     */
    /*       should not be used with programming model IT or DMA.             */
    /*       Refer to comment of parameter "LowPowerAutoWait".                */
    if (hadc->Init.LowPowerAutoWait != ENABLE)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	699b      	ldr	r3, [r3, #24]
 800130a:	2b01      	cmp	r3, #1
 800130c:	d003      	beq.n	8001316 <HAL_ADC_IRQHandler+0xce>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	220c      	movs	r2, #12
 8001314:	601a      	str	r2, [r3, #0]
    }
  }

  /* ========== Check analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD) == ADC_FLAG_AWD) && ((tmp_ier & ADC_IT_AWD) == ADC_IT_AWD))
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	2280      	movs	r2, #128	; 0x80
 800131a:	4013      	ands	r3, r2
 800131c:	d012      	beq.n	8001344 <HAL_ADC_IRQHandler+0xfc>
 800131e:	68bb      	ldr	r3, [r7, #8]
 8001320:	2280      	movs	r2, #128	; 0x80
 8001322:	4013      	ands	r3, r2
 8001324:	d00e      	beq.n	8001344 <HAL_ADC_IRQHandler+0xfc>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800132a:	2280      	movs	r2, #128	; 0x80
 800132c:	0252      	lsls	r2, r2, #9
 800132e:	431a      	orrs	r2, r3
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	655a      	str	r2, [r3, #84]	; 0x54

#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	0018      	movs	r0, r3
 8001338:	f000 f830 	bl	800139c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC Analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	2280      	movs	r2, #128	; 0x80
 8001342:	601a      	str	r2, [r3, #0]

  }


  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	2210      	movs	r2, #16
 8001348:	4013      	ands	r3, r2
 800134a:	d020      	beq.n	800138e <HAL_ADC_IRQHandler+0x146>
 800134c:	68bb      	ldr	r3, [r7, #8]
 800134e:	2210      	movs	r2, #16
 8001350:	4013      	ands	r3, r2
 8001352:	d01c      	beq.n	800138e <HAL_ADC_IRQHandler+0x146>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001358:	2b00      	cmp	r3, #0
 800135a:	d006      	beq.n	800136a <HAL_ADC_IRQHandler+0x122>
        HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	68db      	ldr	r3, [r3, #12]
 8001362:	2201      	movs	r2, #1
 8001364:	4013      	ands	r3, r2
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 8001366:	2b01      	cmp	r3, #1
 8001368:	d10d      	bne.n	8001386 <HAL_ADC_IRQHandler+0x13e>
    {
      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800136e:	2202      	movs	r2, #2
 8001370:	431a      	orrs	r2, r3
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	659a      	str	r2, [r3, #88]	; 0x58

      /* Clear ADC overrun flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	2210      	movs	r2, #16
 800137c:	601a      	str	r2, [r3, #0]

#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	0018      	movs	r0, r3
 8001382:	f000 f813 	bl	80013ac <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	2210      	movs	r2, #16
 800138c:	601a      	str	r2, [r3, #0]
  }

}
 800138e:	46c0      	nop			; (mov r8, r8)
 8001390:	46bd      	mov	sp, r7
 8001392:	b004      	add	sp, #16
 8001394:	bd80      	pop	{r7, pc}
 8001396:	46c0      	nop			; (mov r8, r8)
 8001398:	fffffefe 	.word	0xfffffefe

0800139c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b082      	sub	sp, #8
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80013a4:	46c0      	nop			; (mov r8, r8)
 80013a6:	46bd      	mov	sp, r7
 80013a8:	b002      	add	sp, #8
 80013aa:	bd80      	pop	{r7, pc}

080013ac <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b082      	sub	sp, #8
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80013b4:	46c0      	nop			; (mov r8, r8)
 80013b6:	46bd      	mov	sp, r7
 80013b8:	b002      	add	sp, #8
 80013ba:	bd80      	pop	{r7, pc}

080013bc <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b082      	sub	sp, #8
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
 80013c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));

  /* Process locked */
  __HAL_LOCK(hadc);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	2250      	movs	r2, #80	; 0x50
 80013ca:	5c9b      	ldrb	r3, [r3, r2]
 80013cc:	2b01      	cmp	r3, #1
 80013ce:	d101      	bne.n	80013d4 <HAL_ADC_ConfigChannel+0x18>
 80013d0:	2302      	movs	r3, #2
 80013d2:	e06c      	b.n	80014ae <HAL_ADC_ConfigChannel+0xf2>
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	2250      	movs	r2, #80	; 0x50
 80013d8:	2101      	movs	r1, #1
 80013da:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	689b      	ldr	r3, [r3, #8]
 80013e2:	2204      	movs	r2, #4
 80013e4:	4013      	ands	r3, r2
 80013e6:	d00b      	beq.n	8001400 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013ec:	2220      	movs	r2, #32
 80013ee:	431a      	orrs	r2, r3
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	655a      	str	r2, [r3, #84]	; 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	2250      	movs	r2, #80	; 0x50
 80013f8:	2100      	movs	r1, #0
 80013fa:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 80013fc:	2301      	movs	r3, #1
 80013fe:	e056      	b.n	80014ae <HAL_ADC_ConfigChannel+0xf2>
  }

  if (sConfig->Rank != ADC_RANK_NONE)
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	4a2c      	ldr	r2, [pc, #176]	; (80014b8 <HAL_ADC_ConfigChannel+0xfc>)
 8001406:	4293      	cmp	r3, r2
 8001408:	d028      	beq.n	800145c <HAL_ADC_ConfigChannel+0xa0>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	035b      	lsls	r3, r3, #13
 8001416:	0b5a      	lsrs	r2, r3, #13
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	430a      	orrs	r2, r1
 800141e:	629a      	str	r2, [r3, #40]	; 0x28
    /* dedicated internal buffers and path.                                     */

#if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	681a      	ldr	r2, [r3, #0]
 8001424:	2380      	movs	r3, #128	; 0x80
 8001426:	02db      	lsls	r3, r3, #11
 8001428:	4013      	ands	r3, r2
 800142a:	d009      	beq.n	8001440 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;
 800142c:	4b23      	ldr	r3, [pc, #140]	; (80014bc <HAL_ADC_ConfigChannel+0x100>)
 800142e:	681a      	ldr	r2, [r3, #0]
 8001430:	4b22      	ldr	r3, [pc, #136]	; (80014bc <HAL_ADC_ConfigChannel+0x100>)
 8001432:	2180      	movs	r1, #128	; 0x80
 8001434:	0409      	lsls	r1, r1, #16
 8001436:	430a      	orrs	r2, r1
 8001438:	601a      	str	r2, [r3, #0]

      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 800143a:	200a      	movs	r0, #10
 800143c:	f000 f8ac 	bl	8001598 <ADC_DelayMicroSecond>
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	681a      	ldr	r2, [r3, #0]
 8001444:	2380      	movs	r3, #128	; 0x80
 8001446:	029b      	lsls	r3, r3, #10
 8001448:	4013      	ands	r3, r2
 800144a:	d02b      	beq.n	80014a4 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR |= ADC_CCR_VREFEN;
 800144c:	4b1b      	ldr	r3, [pc, #108]	; (80014bc <HAL_ADC_ConfigChannel+0x100>)
 800144e:	681a      	ldr	r2, [r3, #0]
 8001450:	4b1a      	ldr	r3, [pc, #104]	; (80014bc <HAL_ADC_ConfigChannel+0x100>)
 8001452:	2180      	movs	r1, #128	; 0x80
 8001454:	03c9      	lsls	r1, r1, #15
 8001456:	430a      	orrs	r2, r1
 8001458:	601a      	str	r2, [r3, #0]
 800145a:	e023      	b.n	80014a4 <HAL_ADC_ConfigChannel+0xe8>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	035b      	lsls	r3, r3, #13
 8001468:	0b5b      	lsrs	r3, r3, #13
 800146a:	43d9      	mvns	r1, r3
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	400a      	ands	r2, r1
 8001472:	629a      	str	r2, [r3, #40]	; 0x28

    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
#if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	681a      	ldr	r2, [r3, #0]
 8001478:	2380      	movs	r3, #128	; 0x80
 800147a:	02db      	lsls	r3, r3, #11
 800147c:	4013      	ands	r3, r2
 800147e:	d005      	beq.n	800148c <HAL_ADC_ConfigChannel+0xd0>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;
 8001480:	4b0e      	ldr	r3, [pc, #56]	; (80014bc <HAL_ADC_ConfigChannel+0x100>)
 8001482:	681a      	ldr	r2, [r3, #0]
 8001484:	4b0d      	ldr	r3, [pc, #52]	; (80014bc <HAL_ADC_ConfigChannel+0x100>)
 8001486:	490e      	ldr	r1, [pc, #56]	; (80014c0 <HAL_ADC_ConfigChannel+0x104>)
 8001488:	400a      	ands	r2, r1
 800148a:	601a      	str	r2, [r3, #0]
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	681a      	ldr	r2, [r3, #0]
 8001490:	2380      	movs	r3, #128	; 0x80
 8001492:	029b      	lsls	r3, r3, #10
 8001494:	4013      	ands	r3, r2
 8001496:	d005      	beq.n	80014a4 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;
 8001498:	4b08      	ldr	r3, [pc, #32]	; (80014bc <HAL_ADC_ConfigChannel+0x100>)
 800149a:	681a      	ldr	r2, [r3, #0]
 800149c:	4b07      	ldr	r3, [pc, #28]	; (80014bc <HAL_ADC_ConfigChannel+0x100>)
 800149e:	4909      	ldr	r1, [pc, #36]	; (80014c4 <HAL_ADC_ConfigChannel+0x108>)
 80014a0:	400a      	ands	r2, r1
 80014a2:	601a      	str	r2, [r3, #0]
    }
#endif
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	2250      	movs	r2, #80	; 0x50
 80014a8:	2100      	movs	r1, #0
 80014aa:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80014ac:	2300      	movs	r3, #0
}
 80014ae:	0018      	movs	r0, r3
 80014b0:	46bd      	mov	sp, r7
 80014b2:	b002      	add	sp, #8
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	46c0      	nop			; (mov r8, r8)
 80014b8:	00001001 	.word	0x00001001
 80014bc:	40012708 	.word	0x40012708
 80014c0:	ff7fffff 	.word	0xff7fffff
 80014c4:	ffbfffff 	.word	0xffbfffff

080014c8 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b084      	sub	sp, #16
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80014d0:	2300      	movs	r3, #0
 80014d2:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	689b      	ldr	r3, [r3, #8]
 80014da:	2203      	movs	r2, #3
 80014dc:	4013      	ands	r3, r2
 80014de:	2b01      	cmp	r3, #1
 80014e0:	d108      	bne.n	80014f4 <ADC_Enable+0x2c>
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	2201      	movs	r2, #1
 80014ea:	4013      	ands	r3, r2
 80014ec:	2b01      	cmp	r3, #1
 80014ee:	d101      	bne.n	80014f4 <ADC_Enable+0x2c>
 80014f0:	2301      	movs	r3, #1
 80014f2:	e000      	b.n	80014f6 <ADC_Enable+0x2e>
 80014f4:	2300      	movs	r3, #0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d146      	bne.n	8001588 <ADC_Enable+0xc0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	689b      	ldr	r3, [r3, #8]
 8001500:	4a24      	ldr	r2, [pc, #144]	; (8001594 <ADC_Enable+0xcc>)
 8001502:	4013      	ands	r3, r2
 8001504:	d00d      	beq.n	8001522 <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800150a:	2210      	movs	r2, #16
 800150c:	431a      	orrs	r2, r3
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001516:	2201      	movs	r2, #1
 8001518:	431a      	orrs	r2, r3
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800151e:	2301      	movs	r3, #1
 8001520:	e033      	b.n	800158a <ADC_Enable+0xc2>
    }

    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	689a      	ldr	r2, [r3, #8]
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	2101      	movs	r1, #1
 800152e:	430a      	orrs	r2, r1
 8001530:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 8001532:	2001      	movs	r0, #1
 8001534:	f000 f830 	bl	8001598 <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 8001538:	f7ff fc8a 	bl	8000e50 <HAL_GetTick>
 800153c:	0003      	movs	r3, r0
 800153e:	60fb      	str	r3, [r7, #12]

    /* Wait for ADC effectively enabled */
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001540:	e01b      	b.n	800157a <ADC_Enable+0xb2>
    {
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001542:	f7ff fc85 	bl	8000e50 <HAL_GetTick>
 8001546:	0002      	movs	r2, r0
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	1ad3      	subs	r3, r2, r3
 800154c:	2b0a      	cmp	r3, #10
 800154e:	d914      	bls.n	800157a <ADC_Enable+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	2201      	movs	r2, #1
 8001558:	4013      	ands	r3, r2
 800155a:	2b01      	cmp	r3, #1
 800155c:	d00d      	beq.n	800157a <ADC_Enable+0xb2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001562:	2210      	movs	r2, #16
 8001564:	431a      	orrs	r2, r3
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800156e:	2201      	movs	r2, #1
 8001570:	431a      	orrs	r2, r3
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8001576:	2301      	movs	r3, #1
 8001578:	e007      	b.n	800158a <ADC_Enable+0xc2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	2201      	movs	r2, #1
 8001582:	4013      	ands	r3, r2
 8001584:	2b01      	cmp	r3, #1
 8001586:	d1dc      	bne.n	8001542 <ADC_Enable+0x7a>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001588:	2300      	movs	r3, #0
}
 800158a:	0018      	movs	r0, r3
 800158c:	46bd      	mov	sp, r7
 800158e:	b004      	add	sp, #16
 8001590:	bd80      	pop	{r7, pc}
 8001592:	46c0      	nop			; (mov r8, r8)
 8001594:	80000017 	.word	0x80000017

08001598 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b084      	sub	sp, #16
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 80015a0:	4b0b      	ldr	r3, [pc, #44]	; (80015d0 <ADC_DelayMicroSecond+0x38>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	490b      	ldr	r1, [pc, #44]	; (80015d4 <ADC_DelayMicroSecond+0x3c>)
 80015a6:	0018      	movs	r0, r3
 80015a8:	f7fe fdae 	bl	8000108 <__udivsi3>
 80015ac:	0003      	movs	r3, r0
 80015ae:	001a      	movs	r2, r3
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	4353      	muls	r3, r2
 80015b4:	60fb      	str	r3, [r7, #12]

  while (waitLoopIndex != 0U)
 80015b6:	e002      	b.n	80015be <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	3b01      	subs	r3, #1
 80015bc:	60fb      	str	r3, [r7, #12]
  while (waitLoopIndex != 0U)
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d1f9      	bne.n	80015b8 <ADC_DelayMicroSecond+0x20>
  }
}
 80015c4:	46c0      	nop			; (mov r8, r8)
 80015c6:	46c0      	nop			; (mov r8, r8)
 80015c8:	46bd      	mov	sp, r7
 80015ca:	b004      	add	sp, #16
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	46c0      	nop			; (mov r8, r8)
 80015d0:	20000000 	.word	0x20000000
 80015d4:	000f4240 	.word	0x000f4240

080015d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b082      	sub	sp, #8
 80015dc:	af00      	add	r7, sp, #0
 80015de:	0002      	movs	r2, r0
 80015e0:	1dfb      	adds	r3, r7, #7
 80015e2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80015e4:	1dfb      	adds	r3, r7, #7
 80015e6:	781b      	ldrb	r3, [r3, #0]
 80015e8:	2b7f      	cmp	r3, #127	; 0x7f
 80015ea:	d809      	bhi.n	8001600 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015ec:	1dfb      	adds	r3, r7, #7
 80015ee:	781b      	ldrb	r3, [r3, #0]
 80015f0:	001a      	movs	r2, r3
 80015f2:	231f      	movs	r3, #31
 80015f4:	401a      	ands	r2, r3
 80015f6:	4b04      	ldr	r3, [pc, #16]	; (8001608 <__NVIC_EnableIRQ+0x30>)
 80015f8:	2101      	movs	r1, #1
 80015fa:	4091      	lsls	r1, r2
 80015fc:	000a      	movs	r2, r1
 80015fe:	601a      	str	r2, [r3, #0]
  }
}
 8001600:	46c0      	nop			; (mov r8, r8)
 8001602:	46bd      	mov	sp, r7
 8001604:	b002      	add	sp, #8
 8001606:	bd80      	pop	{r7, pc}
 8001608:	e000e100 	.word	0xe000e100

0800160c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800160c:	b590      	push	{r4, r7, lr}
 800160e:	b083      	sub	sp, #12
 8001610:	af00      	add	r7, sp, #0
 8001612:	0002      	movs	r2, r0
 8001614:	6039      	str	r1, [r7, #0]
 8001616:	1dfb      	adds	r3, r7, #7
 8001618:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800161a:	1dfb      	adds	r3, r7, #7
 800161c:	781b      	ldrb	r3, [r3, #0]
 800161e:	2b7f      	cmp	r3, #127	; 0x7f
 8001620:	d828      	bhi.n	8001674 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001622:	4a2f      	ldr	r2, [pc, #188]	; (80016e0 <__NVIC_SetPriority+0xd4>)
 8001624:	1dfb      	adds	r3, r7, #7
 8001626:	781b      	ldrb	r3, [r3, #0]
 8001628:	b25b      	sxtb	r3, r3
 800162a:	089b      	lsrs	r3, r3, #2
 800162c:	33c0      	adds	r3, #192	; 0xc0
 800162e:	009b      	lsls	r3, r3, #2
 8001630:	589b      	ldr	r3, [r3, r2]
 8001632:	1dfa      	adds	r2, r7, #7
 8001634:	7812      	ldrb	r2, [r2, #0]
 8001636:	0011      	movs	r1, r2
 8001638:	2203      	movs	r2, #3
 800163a:	400a      	ands	r2, r1
 800163c:	00d2      	lsls	r2, r2, #3
 800163e:	21ff      	movs	r1, #255	; 0xff
 8001640:	4091      	lsls	r1, r2
 8001642:	000a      	movs	r2, r1
 8001644:	43d2      	mvns	r2, r2
 8001646:	401a      	ands	r2, r3
 8001648:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	019b      	lsls	r3, r3, #6
 800164e:	22ff      	movs	r2, #255	; 0xff
 8001650:	401a      	ands	r2, r3
 8001652:	1dfb      	adds	r3, r7, #7
 8001654:	781b      	ldrb	r3, [r3, #0]
 8001656:	0018      	movs	r0, r3
 8001658:	2303      	movs	r3, #3
 800165a:	4003      	ands	r3, r0
 800165c:	00db      	lsls	r3, r3, #3
 800165e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001660:	481f      	ldr	r0, [pc, #124]	; (80016e0 <__NVIC_SetPriority+0xd4>)
 8001662:	1dfb      	adds	r3, r7, #7
 8001664:	781b      	ldrb	r3, [r3, #0]
 8001666:	b25b      	sxtb	r3, r3
 8001668:	089b      	lsrs	r3, r3, #2
 800166a:	430a      	orrs	r2, r1
 800166c:	33c0      	adds	r3, #192	; 0xc0
 800166e:	009b      	lsls	r3, r3, #2
 8001670:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001672:	e031      	b.n	80016d8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001674:	4a1b      	ldr	r2, [pc, #108]	; (80016e4 <__NVIC_SetPriority+0xd8>)
 8001676:	1dfb      	adds	r3, r7, #7
 8001678:	781b      	ldrb	r3, [r3, #0]
 800167a:	0019      	movs	r1, r3
 800167c:	230f      	movs	r3, #15
 800167e:	400b      	ands	r3, r1
 8001680:	3b08      	subs	r3, #8
 8001682:	089b      	lsrs	r3, r3, #2
 8001684:	3306      	adds	r3, #6
 8001686:	009b      	lsls	r3, r3, #2
 8001688:	18d3      	adds	r3, r2, r3
 800168a:	3304      	adds	r3, #4
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	1dfa      	adds	r2, r7, #7
 8001690:	7812      	ldrb	r2, [r2, #0]
 8001692:	0011      	movs	r1, r2
 8001694:	2203      	movs	r2, #3
 8001696:	400a      	ands	r2, r1
 8001698:	00d2      	lsls	r2, r2, #3
 800169a:	21ff      	movs	r1, #255	; 0xff
 800169c:	4091      	lsls	r1, r2
 800169e:	000a      	movs	r2, r1
 80016a0:	43d2      	mvns	r2, r2
 80016a2:	401a      	ands	r2, r3
 80016a4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	019b      	lsls	r3, r3, #6
 80016aa:	22ff      	movs	r2, #255	; 0xff
 80016ac:	401a      	ands	r2, r3
 80016ae:	1dfb      	adds	r3, r7, #7
 80016b0:	781b      	ldrb	r3, [r3, #0]
 80016b2:	0018      	movs	r0, r3
 80016b4:	2303      	movs	r3, #3
 80016b6:	4003      	ands	r3, r0
 80016b8:	00db      	lsls	r3, r3, #3
 80016ba:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80016bc:	4809      	ldr	r0, [pc, #36]	; (80016e4 <__NVIC_SetPriority+0xd8>)
 80016be:	1dfb      	adds	r3, r7, #7
 80016c0:	781b      	ldrb	r3, [r3, #0]
 80016c2:	001c      	movs	r4, r3
 80016c4:	230f      	movs	r3, #15
 80016c6:	4023      	ands	r3, r4
 80016c8:	3b08      	subs	r3, #8
 80016ca:	089b      	lsrs	r3, r3, #2
 80016cc:	430a      	orrs	r2, r1
 80016ce:	3306      	adds	r3, #6
 80016d0:	009b      	lsls	r3, r3, #2
 80016d2:	18c3      	adds	r3, r0, r3
 80016d4:	3304      	adds	r3, #4
 80016d6:	601a      	str	r2, [r3, #0]
}
 80016d8:	46c0      	nop			; (mov r8, r8)
 80016da:	46bd      	mov	sp, r7
 80016dc:	b003      	add	sp, #12
 80016de:	bd90      	pop	{r4, r7, pc}
 80016e0:	e000e100 	.word	0xe000e100
 80016e4:	e000ed00 	.word	0xe000ed00

080016e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b082      	sub	sp, #8
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	1e5a      	subs	r2, r3, #1
 80016f4:	2380      	movs	r3, #128	; 0x80
 80016f6:	045b      	lsls	r3, r3, #17
 80016f8:	429a      	cmp	r2, r3
 80016fa:	d301      	bcc.n	8001700 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016fc:	2301      	movs	r3, #1
 80016fe:	e010      	b.n	8001722 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001700:	4b0a      	ldr	r3, [pc, #40]	; (800172c <SysTick_Config+0x44>)
 8001702:	687a      	ldr	r2, [r7, #4]
 8001704:	3a01      	subs	r2, #1
 8001706:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001708:	2301      	movs	r3, #1
 800170a:	425b      	negs	r3, r3
 800170c:	2103      	movs	r1, #3
 800170e:	0018      	movs	r0, r3
 8001710:	f7ff ff7c 	bl	800160c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001714:	4b05      	ldr	r3, [pc, #20]	; (800172c <SysTick_Config+0x44>)
 8001716:	2200      	movs	r2, #0
 8001718:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800171a:	4b04      	ldr	r3, [pc, #16]	; (800172c <SysTick_Config+0x44>)
 800171c:	2207      	movs	r2, #7
 800171e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001720:	2300      	movs	r3, #0
}
 8001722:	0018      	movs	r0, r3
 8001724:	46bd      	mov	sp, r7
 8001726:	b002      	add	sp, #8
 8001728:	bd80      	pop	{r7, pc}
 800172a:	46c0      	nop			; (mov r8, r8)
 800172c:	e000e010 	.word	0xe000e010

08001730 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001730:	b580      	push	{r7, lr}
 8001732:	b084      	sub	sp, #16
 8001734:	af00      	add	r7, sp, #0
 8001736:	60b9      	str	r1, [r7, #8]
 8001738:	607a      	str	r2, [r7, #4]
 800173a:	210f      	movs	r1, #15
 800173c:	187b      	adds	r3, r7, r1
 800173e:	1c02      	adds	r2, r0, #0
 8001740:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001742:	68ba      	ldr	r2, [r7, #8]
 8001744:	187b      	adds	r3, r7, r1
 8001746:	781b      	ldrb	r3, [r3, #0]
 8001748:	b25b      	sxtb	r3, r3
 800174a:	0011      	movs	r1, r2
 800174c:	0018      	movs	r0, r3
 800174e:	f7ff ff5d 	bl	800160c <__NVIC_SetPriority>
}
 8001752:	46c0      	nop			; (mov r8, r8)
 8001754:	46bd      	mov	sp, r7
 8001756:	b004      	add	sp, #16
 8001758:	bd80      	pop	{r7, pc}

0800175a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800175a:	b580      	push	{r7, lr}
 800175c:	b082      	sub	sp, #8
 800175e:	af00      	add	r7, sp, #0
 8001760:	0002      	movs	r2, r0
 8001762:	1dfb      	adds	r3, r7, #7
 8001764:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001766:	1dfb      	adds	r3, r7, #7
 8001768:	781b      	ldrb	r3, [r3, #0]
 800176a:	b25b      	sxtb	r3, r3
 800176c:	0018      	movs	r0, r3
 800176e:	f7ff ff33 	bl	80015d8 <__NVIC_EnableIRQ>
}
 8001772:	46c0      	nop			; (mov r8, r8)
 8001774:	46bd      	mov	sp, r7
 8001776:	b002      	add	sp, #8
 8001778:	bd80      	pop	{r7, pc}

0800177a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800177a:	b580      	push	{r7, lr}
 800177c:	b082      	sub	sp, #8
 800177e:	af00      	add	r7, sp, #0
 8001780:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	0018      	movs	r0, r3
 8001786:	f7ff ffaf 	bl	80016e8 <SysTick_Config>
 800178a:	0003      	movs	r3, r0
}
 800178c:	0018      	movs	r0, r3
 800178e:	46bd      	mov	sp, r7
 8001790:	b002      	add	sp, #8
 8001792:	bd80      	pop	{r7, pc}

08001794 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b086      	sub	sp, #24
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
 800179c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800179e:	2300      	movs	r3, #0
 80017a0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80017a2:	2300      	movs	r3, #0
 80017a4:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 80017a6:	2300      	movs	r3, #0
 80017a8:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80017aa:	e143      	b.n	8001a34 <HAL_GPIO_Init+0x2a0>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	2101      	movs	r1, #1
 80017b2:	697a      	ldr	r2, [r7, #20]
 80017b4:	4091      	lsls	r1, r2
 80017b6:	000a      	movs	r2, r1
 80017b8:	4013      	ands	r3, r2
 80017ba:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d100      	bne.n	80017c4 <HAL_GPIO_Init+0x30>
 80017c2:	e134      	b.n	8001a2e <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	2203      	movs	r2, #3
 80017ca:	4013      	ands	r3, r2
 80017cc:	2b01      	cmp	r3, #1
 80017ce:	d005      	beq.n	80017dc <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	2203      	movs	r2, #3
 80017d6:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80017d8:	2b02      	cmp	r3, #2
 80017da:	d130      	bne.n	800183e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	689b      	ldr	r3, [r3, #8]
 80017e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80017e2:	697b      	ldr	r3, [r7, #20]
 80017e4:	005b      	lsls	r3, r3, #1
 80017e6:	2203      	movs	r2, #3
 80017e8:	409a      	lsls	r2, r3
 80017ea:	0013      	movs	r3, r2
 80017ec:	43da      	mvns	r2, r3
 80017ee:	693b      	ldr	r3, [r7, #16]
 80017f0:	4013      	ands	r3, r2
 80017f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	68da      	ldr	r2, [r3, #12]
 80017f8:	697b      	ldr	r3, [r7, #20]
 80017fa:	005b      	lsls	r3, r3, #1
 80017fc:	409a      	lsls	r2, r3
 80017fe:	0013      	movs	r3, r2
 8001800:	693a      	ldr	r2, [r7, #16]
 8001802:	4313      	orrs	r3, r2
 8001804:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	693a      	ldr	r2, [r7, #16]
 800180a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001812:	2201      	movs	r2, #1
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	409a      	lsls	r2, r3
 8001818:	0013      	movs	r3, r2
 800181a:	43da      	mvns	r2, r3
 800181c:	693b      	ldr	r3, [r7, #16]
 800181e:	4013      	ands	r3, r2
 8001820:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	091b      	lsrs	r3, r3, #4
 8001828:	2201      	movs	r2, #1
 800182a:	401a      	ands	r2, r3
 800182c:	697b      	ldr	r3, [r7, #20]
 800182e:	409a      	lsls	r2, r3
 8001830:	0013      	movs	r3, r2
 8001832:	693a      	ldr	r2, [r7, #16]
 8001834:	4313      	orrs	r3, r2
 8001836:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	693a      	ldr	r2, [r7, #16]
 800183c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	2203      	movs	r2, #3
 8001844:	4013      	ands	r3, r2
 8001846:	2b03      	cmp	r3, #3
 8001848:	d017      	beq.n	800187a <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	68db      	ldr	r3, [r3, #12]
 800184e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001850:	697b      	ldr	r3, [r7, #20]
 8001852:	005b      	lsls	r3, r3, #1
 8001854:	2203      	movs	r2, #3
 8001856:	409a      	lsls	r2, r3
 8001858:	0013      	movs	r3, r2
 800185a:	43da      	mvns	r2, r3
 800185c:	693b      	ldr	r3, [r7, #16]
 800185e:	4013      	ands	r3, r2
 8001860:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	689a      	ldr	r2, [r3, #8]
 8001866:	697b      	ldr	r3, [r7, #20]
 8001868:	005b      	lsls	r3, r3, #1
 800186a:	409a      	lsls	r2, r3
 800186c:	0013      	movs	r3, r2
 800186e:	693a      	ldr	r2, [r7, #16]
 8001870:	4313      	orrs	r3, r2
 8001872:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	693a      	ldr	r2, [r7, #16]
 8001878:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	2203      	movs	r2, #3
 8001880:	4013      	ands	r3, r2
 8001882:	2b02      	cmp	r3, #2
 8001884:	d123      	bne.n	80018ce <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001886:	697b      	ldr	r3, [r7, #20]
 8001888:	08da      	lsrs	r2, r3, #3
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	3208      	adds	r2, #8
 800188e:	0092      	lsls	r2, r2, #2
 8001890:	58d3      	ldr	r3, [r2, r3]
 8001892:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	2207      	movs	r2, #7
 8001898:	4013      	ands	r3, r2
 800189a:	009b      	lsls	r3, r3, #2
 800189c:	220f      	movs	r2, #15
 800189e:	409a      	lsls	r2, r3
 80018a0:	0013      	movs	r3, r2
 80018a2:	43da      	mvns	r2, r3
 80018a4:	693b      	ldr	r3, [r7, #16]
 80018a6:	4013      	ands	r3, r2
 80018a8:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	691a      	ldr	r2, [r3, #16]
 80018ae:	697b      	ldr	r3, [r7, #20]
 80018b0:	2107      	movs	r1, #7
 80018b2:	400b      	ands	r3, r1
 80018b4:	009b      	lsls	r3, r3, #2
 80018b6:	409a      	lsls	r2, r3
 80018b8:	0013      	movs	r3, r2
 80018ba:	693a      	ldr	r2, [r7, #16]
 80018bc:	4313      	orrs	r3, r2
 80018be:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	08da      	lsrs	r2, r3, #3
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	3208      	adds	r2, #8
 80018c8:	0092      	lsls	r2, r2, #2
 80018ca:	6939      	ldr	r1, [r7, #16]
 80018cc:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80018d4:	697b      	ldr	r3, [r7, #20]
 80018d6:	005b      	lsls	r3, r3, #1
 80018d8:	2203      	movs	r2, #3
 80018da:	409a      	lsls	r2, r3
 80018dc:	0013      	movs	r3, r2
 80018de:	43da      	mvns	r2, r3
 80018e0:	693b      	ldr	r3, [r7, #16]
 80018e2:	4013      	ands	r3, r2
 80018e4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	2203      	movs	r2, #3
 80018ec:	401a      	ands	r2, r3
 80018ee:	697b      	ldr	r3, [r7, #20]
 80018f0:	005b      	lsls	r3, r3, #1
 80018f2:	409a      	lsls	r2, r3
 80018f4:	0013      	movs	r3, r2
 80018f6:	693a      	ldr	r2, [r7, #16]
 80018f8:	4313      	orrs	r3, r2
 80018fa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	693a      	ldr	r2, [r7, #16]
 8001900:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	685a      	ldr	r2, [r3, #4]
 8001906:	23c0      	movs	r3, #192	; 0xc0
 8001908:	029b      	lsls	r3, r3, #10
 800190a:	4013      	ands	r3, r2
 800190c:	d100      	bne.n	8001910 <HAL_GPIO_Init+0x17c>
 800190e:	e08e      	b.n	8001a2e <HAL_GPIO_Init+0x29a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001910:	4b4e      	ldr	r3, [pc, #312]	; (8001a4c <HAL_GPIO_Init+0x2b8>)
 8001912:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001914:	4b4d      	ldr	r3, [pc, #308]	; (8001a4c <HAL_GPIO_Init+0x2b8>)
 8001916:	2101      	movs	r1, #1
 8001918:	430a      	orrs	r2, r1
 800191a:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 800191c:	4a4c      	ldr	r2, [pc, #304]	; (8001a50 <HAL_GPIO_Init+0x2bc>)
 800191e:	697b      	ldr	r3, [r7, #20]
 8001920:	089b      	lsrs	r3, r3, #2
 8001922:	3302      	adds	r3, #2
 8001924:	009b      	lsls	r3, r3, #2
 8001926:	589b      	ldr	r3, [r3, r2]
 8001928:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 800192a:	697b      	ldr	r3, [r7, #20]
 800192c:	2203      	movs	r2, #3
 800192e:	4013      	ands	r3, r2
 8001930:	009b      	lsls	r3, r3, #2
 8001932:	220f      	movs	r2, #15
 8001934:	409a      	lsls	r2, r3
 8001936:	0013      	movs	r3, r2
 8001938:	43da      	mvns	r2, r3
 800193a:	693b      	ldr	r3, [r7, #16]
 800193c:	4013      	ands	r3, r2
 800193e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001940:	687a      	ldr	r2, [r7, #4]
 8001942:	23a0      	movs	r3, #160	; 0xa0
 8001944:	05db      	lsls	r3, r3, #23
 8001946:	429a      	cmp	r2, r3
 8001948:	d00d      	beq.n	8001966 <HAL_GPIO_Init+0x1d2>
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	4a41      	ldr	r2, [pc, #260]	; (8001a54 <HAL_GPIO_Init+0x2c0>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d007      	beq.n	8001962 <HAL_GPIO_Init+0x1ce>
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	4a40      	ldr	r2, [pc, #256]	; (8001a58 <HAL_GPIO_Init+0x2c4>)
 8001956:	4293      	cmp	r3, r2
 8001958:	d101      	bne.n	800195e <HAL_GPIO_Init+0x1ca>
 800195a:	2302      	movs	r3, #2
 800195c:	e004      	b.n	8001968 <HAL_GPIO_Init+0x1d4>
 800195e:	2306      	movs	r3, #6
 8001960:	e002      	b.n	8001968 <HAL_GPIO_Init+0x1d4>
 8001962:	2301      	movs	r3, #1
 8001964:	e000      	b.n	8001968 <HAL_GPIO_Init+0x1d4>
 8001966:	2300      	movs	r3, #0
 8001968:	697a      	ldr	r2, [r7, #20]
 800196a:	2103      	movs	r1, #3
 800196c:	400a      	ands	r2, r1
 800196e:	0092      	lsls	r2, r2, #2
 8001970:	4093      	lsls	r3, r2
 8001972:	693a      	ldr	r2, [r7, #16]
 8001974:	4313      	orrs	r3, r2
 8001976:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001978:	4935      	ldr	r1, [pc, #212]	; (8001a50 <HAL_GPIO_Init+0x2bc>)
 800197a:	697b      	ldr	r3, [r7, #20]
 800197c:	089b      	lsrs	r3, r3, #2
 800197e:	3302      	adds	r3, #2
 8001980:	009b      	lsls	r3, r3, #2
 8001982:	693a      	ldr	r2, [r7, #16]
 8001984:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001986:	4b35      	ldr	r3, [pc, #212]	; (8001a5c <HAL_GPIO_Init+0x2c8>)
 8001988:	689b      	ldr	r3, [r3, #8]
 800198a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	43da      	mvns	r2, r3
 8001990:	693b      	ldr	r3, [r7, #16]
 8001992:	4013      	ands	r3, r2
 8001994:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	685a      	ldr	r2, [r3, #4]
 800199a:	2380      	movs	r3, #128	; 0x80
 800199c:	035b      	lsls	r3, r3, #13
 800199e:	4013      	ands	r3, r2
 80019a0:	d003      	beq.n	80019aa <HAL_GPIO_Init+0x216>
        {
          temp |= iocurrent;
 80019a2:	693a      	ldr	r2, [r7, #16]
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	4313      	orrs	r3, r2
 80019a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80019aa:	4b2c      	ldr	r3, [pc, #176]	; (8001a5c <HAL_GPIO_Init+0x2c8>)
 80019ac:	693a      	ldr	r2, [r7, #16]
 80019ae:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80019b0:	4b2a      	ldr	r3, [pc, #168]	; (8001a5c <HAL_GPIO_Init+0x2c8>)
 80019b2:	68db      	ldr	r3, [r3, #12]
 80019b4:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	43da      	mvns	r2, r3
 80019ba:	693b      	ldr	r3, [r7, #16]
 80019bc:	4013      	ands	r3, r2
 80019be:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	685a      	ldr	r2, [r3, #4]
 80019c4:	2380      	movs	r3, #128	; 0x80
 80019c6:	039b      	lsls	r3, r3, #14
 80019c8:	4013      	ands	r3, r2
 80019ca:	d003      	beq.n	80019d4 <HAL_GPIO_Init+0x240>
        {
          temp |= iocurrent;
 80019cc:	693a      	ldr	r2, [r7, #16]
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	4313      	orrs	r3, r2
 80019d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80019d4:	4b21      	ldr	r3, [pc, #132]	; (8001a5c <HAL_GPIO_Init+0x2c8>)
 80019d6:	693a      	ldr	r2, [r7, #16]
 80019d8:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 80019da:	4b20      	ldr	r3, [pc, #128]	; (8001a5c <HAL_GPIO_Init+0x2c8>)
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	43da      	mvns	r2, r3
 80019e4:	693b      	ldr	r3, [r7, #16]
 80019e6:	4013      	ands	r3, r2
 80019e8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	685a      	ldr	r2, [r3, #4]
 80019ee:	2380      	movs	r3, #128	; 0x80
 80019f0:	029b      	lsls	r3, r3, #10
 80019f2:	4013      	ands	r3, r2
 80019f4:	d003      	beq.n	80019fe <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80019f6:	693a      	ldr	r2, [r7, #16]
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	4313      	orrs	r3, r2
 80019fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80019fe:	4b17      	ldr	r3, [pc, #92]	; (8001a5c <HAL_GPIO_Init+0x2c8>)
 8001a00:	693a      	ldr	r2, [r7, #16]
 8001a02:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a04:	4b15      	ldr	r3, [pc, #84]	; (8001a5c <HAL_GPIO_Init+0x2c8>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	43da      	mvns	r2, r3
 8001a0e:	693b      	ldr	r3, [r7, #16]
 8001a10:	4013      	ands	r3, r2
 8001a12:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	685a      	ldr	r2, [r3, #4]
 8001a18:	2380      	movs	r3, #128	; 0x80
 8001a1a:	025b      	lsls	r3, r3, #9
 8001a1c:	4013      	ands	r3, r2
 8001a1e:	d003      	beq.n	8001a28 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001a20:	693a      	ldr	r2, [r7, #16]
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	4313      	orrs	r3, r2
 8001a26:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001a28:	4b0c      	ldr	r3, [pc, #48]	; (8001a5c <HAL_GPIO_Init+0x2c8>)
 8001a2a:	693a      	ldr	r2, [r7, #16]
 8001a2c:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8001a2e:	697b      	ldr	r3, [r7, #20]
 8001a30:	3301      	adds	r3, #1
 8001a32:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	681a      	ldr	r2, [r3, #0]
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	40da      	lsrs	r2, r3
 8001a3c:	1e13      	subs	r3, r2, #0
 8001a3e:	d000      	beq.n	8001a42 <HAL_GPIO_Init+0x2ae>
 8001a40:	e6b4      	b.n	80017ac <HAL_GPIO_Init+0x18>
  }
}
 8001a42:	46c0      	nop			; (mov r8, r8)
 8001a44:	46c0      	nop			; (mov r8, r8)
 8001a46:	46bd      	mov	sp, r7
 8001a48:	b006      	add	sp, #24
 8001a4a:	bd80      	pop	{r7, pc}
 8001a4c:	40021000 	.word	0x40021000
 8001a50:	40010000 	.word	0x40010000
 8001a54:	50000400 	.word	0x50000400
 8001a58:	50000800 	.word	0x50000800
 8001a5c:	40010400 	.word	0x40010400

08001a60 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a60:	b5b0      	push	{r4, r5, r7, lr}
 8001a62:	b08a      	sub	sp, #40	; 0x28
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d102      	bne.n	8001a74 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	f000 fb6c 	bl	800214c <HAL_RCC_OscConfig+0x6ec>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a74:	4bc8      	ldr	r3, [pc, #800]	; (8001d98 <HAL_RCC_OscConfig+0x338>)
 8001a76:	68db      	ldr	r3, [r3, #12]
 8001a78:	220c      	movs	r2, #12
 8001a7a:	4013      	ands	r3, r2
 8001a7c:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a7e:	4bc6      	ldr	r3, [pc, #792]	; (8001d98 <HAL_RCC_OscConfig+0x338>)
 8001a80:	68da      	ldr	r2, [r3, #12]
 8001a82:	2380      	movs	r3, #128	; 0x80
 8001a84:	025b      	lsls	r3, r3, #9
 8001a86:	4013      	ands	r3, r2
 8001a88:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	2201      	movs	r2, #1
 8001a90:	4013      	ands	r3, r2
 8001a92:	d100      	bne.n	8001a96 <HAL_RCC_OscConfig+0x36>
 8001a94:	e07d      	b.n	8001b92 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a96:	69fb      	ldr	r3, [r7, #28]
 8001a98:	2b08      	cmp	r3, #8
 8001a9a:	d007      	beq.n	8001aac <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001a9c:	69fb      	ldr	r3, [r7, #28]
 8001a9e:	2b0c      	cmp	r3, #12
 8001aa0:	d112      	bne.n	8001ac8 <HAL_RCC_OscConfig+0x68>
 8001aa2:	69ba      	ldr	r2, [r7, #24]
 8001aa4:	2380      	movs	r3, #128	; 0x80
 8001aa6:	025b      	lsls	r3, r3, #9
 8001aa8:	429a      	cmp	r2, r3
 8001aaa:	d10d      	bne.n	8001ac8 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001aac:	4bba      	ldr	r3, [pc, #744]	; (8001d98 <HAL_RCC_OscConfig+0x338>)
 8001aae:	681a      	ldr	r2, [r3, #0]
 8001ab0:	2380      	movs	r3, #128	; 0x80
 8001ab2:	029b      	lsls	r3, r3, #10
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	d100      	bne.n	8001aba <HAL_RCC_OscConfig+0x5a>
 8001ab8:	e06a      	b.n	8001b90 <HAL_RCC_OscConfig+0x130>
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d166      	bne.n	8001b90 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	f000 fb42 	bl	800214c <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	685a      	ldr	r2, [r3, #4]
 8001acc:	2380      	movs	r3, #128	; 0x80
 8001ace:	025b      	lsls	r3, r3, #9
 8001ad0:	429a      	cmp	r2, r3
 8001ad2:	d107      	bne.n	8001ae4 <HAL_RCC_OscConfig+0x84>
 8001ad4:	4bb0      	ldr	r3, [pc, #704]	; (8001d98 <HAL_RCC_OscConfig+0x338>)
 8001ad6:	681a      	ldr	r2, [r3, #0]
 8001ad8:	4baf      	ldr	r3, [pc, #700]	; (8001d98 <HAL_RCC_OscConfig+0x338>)
 8001ada:	2180      	movs	r1, #128	; 0x80
 8001adc:	0249      	lsls	r1, r1, #9
 8001ade:	430a      	orrs	r2, r1
 8001ae0:	601a      	str	r2, [r3, #0]
 8001ae2:	e027      	b.n	8001b34 <HAL_RCC_OscConfig+0xd4>
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	685a      	ldr	r2, [r3, #4]
 8001ae8:	23a0      	movs	r3, #160	; 0xa0
 8001aea:	02db      	lsls	r3, r3, #11
 8001aec:	429a      	cmp	r2, r3
 8001aee:	d10e      	bne.n	8001b0e <HAL_RCC_OscConfig+0xae>
 8001af0:	4ba9      	ldr	r3, [pc, #676]	; (8001d98 <HAL_RCC_OscConfig+0x338>)
 8001af2:	681a      	ldr	r2, [r3, #0]
 8001af4:	4ba8      	ldr	r3, [pc, #672]	; (8001d98 <HAL_RCC_OscConfig+0x338>)
 8001af6:	2180      	movs	r1, #128	; 0x80
 8001af8:	02c9      	lsls	r1, r1, #11
 8001afa:	430a      	orrs	r2, r1
 8001afc:	601a      	str	r2, [r3, #0]
 8001afe:	4ba6      	ldr	r3, [pc, #664]	; (8001d98 <HAL_RCC_OscConfig+0x338>)
 8001b00:	681a      	ldr	r2, [r3, #0]
 8001b02:	4ba5      	ldr	r3, [pc, #660]	; (8001d98 <HAL_RCC_OscConfig+0x338>)
 8001b04:	2180      	movs	r1, #128	; 0x80
 8001b06:	0249      	lsls	r1, r1, #9
 8001b08:	430a      	orrs	r2, r1
 8001b0a:	601a      	str	r2, [r3, #0]
 8001b0c:	e012      	b.n	8001b34 <HAL_RCC_OscConfig+0xd4>
 8001b0e:	4ba2      	ldr	r3, [pc, #648]	; (8001d98 <HAL_RCC_OscConfig+0x338>)
 8001b10:	681a      	ldr	r2, [r3, #0]
 8001b12:	4ba1      	ldr	r3, [pc, #644]	; (8001d98 <HAL_RCC_OscConfig+0x338>)
 8001b14:	49a1      	ldr	r1, [pc, #644]	; (8001d9c <HAL_RCC_OscConfig+0x33c>)
 8001b16:	400a      	ands	r2, r1
 8001b18:	601a      	str	r2, [r3, #0]
 8001b1a:	4b9f      	ldr	r3, [pc, #636]	; (8001d98 <HAL_RCC_OscConfig+0x338>)
 8001b1c:	681a      	ldr	r2, [r3, #0]
 8001b1e:	2380      	movs	r3, #128	; 0x80
 8001b20:	025b      	lsls	r3, r3, #9
 8001b22:	4013      	ands	r3, r2
 8001b24:	60fb      	str	r3, [r7, #12]
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	4b9b      	ldr	r3, [pc, #620]	; (8001d98 <HAL_RCC_OscConfig+0x338>)
 8001b2a:	681a      	ldr	r2, [r3, #0]
 8001b2c:	4b9a      	ldr	r3, [pc, #616]	; (8001d98 <HAL_RCC_OscConfig+0x338>)
 8001b2e:	499c      	ldr	r1, [pc, #624]	; (8001da0 <HAL_RCC_OscConfig+0x340>)
 8001b30:	400a      	ands	r2, r1
 8001b32:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d014      	beq.n	8001b66 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b3c:	f7ff f988 	bl	8000e50 <HAL_GetTick>
 8001b40:	0003      	movs	r3, r0
 8001b42:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001b44:	e008      	b.n	8001b58 <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b46:	f7ff f983 	bl	8000e50 <HAL_GetTick>
 8001b4a:	0002      	movs	r2, r0
 8001b4c:	697b      	ldr	r3, [r7, #20]
 8001b4e:	1ad3      	subs	r3, r2, r3
 8001b50:	2b64      	cmp	r3, #100	; 0x64
 8001b52:	d901      	bls.n	8001b58 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8001b54:	2303      	movs	r3, #3
 8001b56:	e2f9      	b.n	800214c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001b58:	4b8f      	ldr	r3, [pc, #572]	; (8001d98 <HAL_RCC_OscConfig+0x338>)
 8001b5a:	681a      	ldr	r2, [r3, #0]
 8001b5c:	2380      	movs	r3, #128	; 0x80
 8001b5e:	029b      	lsls	r3, r3, #10
 8001b60:	4013      	ands	r3, r2
 8001b62:	d0f0      	beq.n	8001b46 <HAL_RCC_OscConfig+0xe6>
 8001b64:	e015      	b.n	8001b92 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b66:	f7ff f973 	bl	8000e50 <HAL_GetTick>
 8001b6a:	0003      	movs	r3, r0
 8001b6c:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001b6e:	e008      	b.n	8001b82 <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b70:	f7ff f96e 	bl	8000e50 <HAL_GetTick>
 8001b74:	0002      	movs	r2, r0
 8001b76:	697b      	ldr	r3, [r7, #20]
 8001b78:	1ad3      	subs	r3, r2, r3
 8001b7a:	2b64      	cmp	r3, #100	; 0x64
 8001b7c:	d901      	bls.n	8001b82 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001b7e:	2303      	movs	r3, #3
 8001b80:	e2e4      	b.n	800214c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001b82:	4b85      	ldr	r3, [pc, #532]	; (8001d98 <HAL_RCC_OscConfig+0x338>)
 8001b84:	681a      	ldr	r2, [r3, #0]
 8001b86:	2380      	movs	r3, #128	; 0x80
 8001b88:	029b      	lsls	r3, r3, #10
 8001b8a:	4013      	ands	r3, r2
 8001b8c:	d1f0      	bne.n	8001b70 <HAL_RCC_OscConfig+0x110>
 8001b8e:	e000      	b.n	8001b92 <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b90:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	2202      	movs	r2, #2
 8001b98:	4013      	ands	r3, r2
 8001b9a:	d100      	bne.n	8001b9e <HAL_RCC_OscConfig+0x13e>
 8001b9c:	e099      	b.n	8001cd2 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	68db      	ldr	r3, [r3, #12]
 8001ba2:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8001ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ba6:	2220      	movs	r2, #32
 8001ba8:	4013      	ands	r3, r2
 8001baa:	d009      	beq.n	8001bc0 <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8001bac:	4b7a      	ldr	r3, [pc, #488]	; (8001d98 <HAL_RCC_OscConfig+0x338>)
 8001bae:	681a      	ldr	r2, [r3, #0]
 8001bb0:	4b79      	ldr	r3, [pc, #484]	; (8001d98 <HAL_RCC_OscConfig+0x338>)
 8001bb2:	2120      	movs	r1, #32
 8001bb4:	430a      	orrs	r2, r1
 8001bb6:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8001bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bba:	2220      	movs	r2, #32
 8001bbc:	4393      	bics	r3, r2
 8001bbe:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001bc0:	69fb      	ldr	r3, [r7, #28]
 8001bc2:	2b04      	cmp	r3, #4
 8001bc4:	d005      	beq.n	8001bd2 <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001bc6:	69fb      	ldr	r3, [r7, #28]
 8001bc8:	2b0c      	cmp	r3, #12
 8001bca:	d13e      	bne.n	8001c4a <HAL_RCC_OscConfig+0x1ea>
 8001bcc:	69bb      	ldr	r3, [r7, #24]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d13b      	bne.n	8001c4a <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8001bd2:	4b71      	ldr	r3, [pc, #452]	; (8001d98 <HAL_RCC_OscConfig+0x338>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	2204      	movs	r2, #4
 8001bd8:	4013      	ands	r3, r2
 8001bda:	d004      	beq.n	8001be6 <HAL_RCC_OscConfig+0x186>
 8001bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d101      	bne.n	8001be6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001be2:	2301      	movs	r3, #1
 8001be4:	e2b2      	b.n	800214c <HAL_RCC_OscConfig+0x6ec>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001be6:	4b6c      	ldr	r3, [pc, #432]	; (8001d98 <HAL_RCC_OscConfig+0x338>)
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	4a6e      	ldr	r2, [pc, #440]	; (8001da4 <HAL_RCC_OscConfig+0x344>)
 8001bec:	4013      	ands	r3, r2
 8001bee:	0019      	movs	r1, r3
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	691b      	ldr	r3, [r3, #16]
 8001bf4:	021a      	lsls	r2, r3, #8
 8001bf6:	4b68      	ldr	r3, [pc, #416]	; (8001d98 <HAL_RCC_OscConfig+0x338>)
 8001bf8:	430a      	orrs	r2, r1
 8001bfa:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001bfc:	4b66      	ldr	r3, [pc, #408]	; (8001d98 <HAL_RCC_OscConfig+0x338>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	2209      	movs	r2, #9
 8001c02:	4393      	bics	r3, r2
 8001c04:	0019      	movs	r1, r3
 8001c06:	4b64      	ldr	r3, [pc, #400]	; (8001d98 <HAL_RCC_OscConfig+0x338>)
 8001c08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c0a:	430a      	orrs	r2, r1
 8001c0c:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001c0e:	f000 fbeb 	bl	80023e8 <HAL_RCC_GetSysClockFreq>
 8001c12:	0001      	movs	r1, r0
 8001c14:	4b60      	ldr	r3, [pc, #384]	; (8001d98 <HAL_RCC_OscConfig+0x338>)
 8001c16:	68db      	ldr	r3, [r3, #12]
 8001c18:	091b      	lsrs	r3, r3, #4
 8001c1a:	220f      	movs	r2, #15
 8001c1c:	4013      	ands	r3, r2
 8001c1e:	4a62      	ldr	r2, [pc, #392]	; (8001da8 <HAL_RCC_OscConfig+0x348>)
 8001c20:	5cd3      	ldrb	r3, [r2, r3]
 8001c22:	000a      	movs	r2, r1
 8001c24:	40da      	lsrs	r2, r3
 8001c26:	4b61      	ldr	r3, [pc, #388]	; (8001dac <HAL_RCC_OscConfig+0x34c>)
 8001c28:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8001c2a:	4b61      	ldr	r3, [pc, #388]	; (8001db0 <HAL_RCC_OscConfig+0x350>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	2513      	movs	r5, #19
 8001c30:	197c      	adds	r4, r7, r5
 8001c32:	0018      	movs	r0, r3
 8001c34:	f7ff f8c6 	bl	8000dc4 <HAL_InitTick>
 8001c38:	0003      	movs	r3, r0
 8001c3a:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8001c3c:	197b      	adds	r3, r7, r5
 8001c3e:	781b      	ldrb	r3, [r3, #0]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d046      	beq.n	8001cd2 <HAL_RCC_OscConfig+0x272>
      {
        return status;
 8001c44:	197b      	adds	r3, r7, r5
 8001c46:	781b      	ldrb	r3, [r3, #0]
 8001c48:	e280      	b.n	800214c <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8001c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d027      	beq.n	8001ca0 <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001c50:	4b51      	ldr	r3, [pc, #324]	; (8001d98 <HAL_RCC_OscConfig+0x338>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	2209      	movs	r2, #9
 8001c56:	4393      	bics	r3, r2
 8001c58:	0019      	movs	r1, r3
 8001c5a:	4b4f      	ldr	r3, [pc, #316]	; (8001d98 <HAL_RCC_OscConfig+0x338>)
 8001c5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c5e:	430a      	orrs	r2, r1
 8001c60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c62:	f7ff f8f5 	bl	8000e50 <HAL_GetTick>
 8001c66:	0003      	movs	r3, r0
 8001c68:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001c6a:	e008      	b.n	8001c7e <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c6c:	f7ff f8f0 	bl	8000e50 <HAL_GetTick>
 8001c70:	0002      	movs	r2, r0
 8001c72:	697b      	ldr	r3, [r7, #20]
 8001c74:	1ad3      	subs	r3, r2, r3
 8001c76:	2b02      	cmp	r3, #2
 8001c78:	d901      	bls.n	8001c7e <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 8001c7a:	2303      	movs	r3, #3
 8001c7c:	e266      	b.n	800214c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001c7e:	4b46      	ldr	r3, [pc, #280]	; (8001d98 <HAL_RCC_OscConfig+0x338>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	2204      	movs	r2, #4
 8001c84:	4013      	ands	r3, r2
 8001c86:	d0f1      	beq.n	8001c6c <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c88:	4b43      	ldr	r3, [pc, #268]	; (8001d98 <HAL_RCC_OscConfig+0x338>)
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	4a45      	ldr	r2, [pc, #276]	; (8001da4 <HAL_RCC_OscConfig+0x344>)
 8001c8e:	4013      	ands	r3, r2
 8001c90:	0019      	movs	r1, r3
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	691b      	ldr	r3, [r3, #16]
 8001c96:	021a      	lsls	r2, r3, #8
 8001c98:	4b3f      	ldr	r3, [pc, #252]	; (8001d98 <HAL_RCC_OscConfig+0x338>)
 8001c9a:	430a      	orrs	r2, r1
 8001c9c:	605a      	str	r2, [r3, #4]
 8001c9e:	e018      	b.n	8001cd2 <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ca0:	4b3d      	ldr	r3, [pc, #244]	; (8001d98 <HAL_RCC_OscConfig+0x338>)
 8001ca2:	681a      	ldr	r2, [r3, #0]
 8001ca4:	4b3c      	ldr	r3, [pc, #240]	; (8001d98 <HAL_RCC_OscConfig+0x338>)
 8001ca6:	2101      	movs	r1, #1
 8001ca8:	438a      	bics	r2, r1
 8001caa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cac:	f7ff f8d0 	bl	8000e50 <HAL_GetTick>
 8001cb0:	0003      	movs	r3, r0
 8001cb2:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001cb4:	e008      	b.n	8001cc8 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001cb6:	f7ff f8cb 	bl	8000e50 <HAL_GetTick>
 8001cba:	0002      	movs	r2, r0
 8001cbc:	697b      	ldr	r3, [r7, #20]
 8001cbe:	1ad3      	subs	r3, r2, r3
 8001cc0:	2b02      	cmp	r3, #2
 8001cc2:	d901      	bls.n	8001cc8 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8001cc4:	2303      	movs	r3, #3
 8001cc6:	e241      	b.n	800214c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001cc8:	4b33      	ldr	r3, [pc, #204]	; (8001d98 <HAL_RCC_OscConfig+0x338>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	2204      	movs	r2, #4
 8001cce:	4013      	ands	r3, r2
 8001cd0:	d1f1      	bne.n	8001cb6 <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	2210      	movs	r2, #16
 8001cd8:	4013      	ands	r3, r2
 8001cda:	d100      	bne.n	8001cde <HAL_RCC_OscConfig+0x27e>
 8001cdc:	e0a1      	b.n	8001e22 <HAL_RCC_OscConfig+0x3c2>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001cde:	69fb      	ldr	r3, [r7, #28]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d140      	bne.n	8001d66 <HAL_RCC_OscConfig+0x306>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001ce4:	4b2c      	ldr	r3, [pc, #176]	; (8001d98 <HAL_RCC_OscConfig+0x338>)
 8001ce6:	681a      	ldr	r2, [r3, #0]
 8001ce8:	2380      	movs	r3, #128	; 0x80
 8001cea:	009b      	lsls	r3, r3, #2
 8001cec:	4013      	ands	r3, r2
 8001cee:	d005      	beq.n	8001cfc <HAL_RCC_OscConfig+0x29c>
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	699b      	ldr	r3, [r3, #24]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d101      	bne.n	8001cfc <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	e227      	b.n	800214c <HAL_RCC_OscConfig+0x6ec>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001cfc:	4b26      	ldr	r3, [pc, #152]	; (8001d98 <HAL_RCC_OscConfig+0x338>)
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	4a2c      	ldr	r2, [pc, #176]	; (8001db4 <HAL_RCC_OscConfig+0x354>)
 8001d02:	4013      	ands	r3, r2
 8001d04:	0019      	movs	r1, r3
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6a1a      	ldr	r2, [r3, #32]
 8001d0a:	4b23      	ldr	r3, [pc, #140]	; (8001d98 <HAL_RCC_OscConfig+0x338>)
 8001d0c:	430a      	orrs	r2, r1
 8001d0e:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d10:	4b21      	ldr	r3, [pc, #132]	; (8001d98 <HAL_RCC_OscConfig+0x338>)
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	021b      	lsls	r3, r3, #8
 8001d16:	0a19      	lsrs	r1, r3, #8
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	69db      	ldr	r3, [r3, #28]
 8001d1c:	061a      	lsls	r2, r3, #24
 8001d1e:	4b1e      	ldr	r3, [pc, #120]	; (8001d98 <HAL_RCC_OscConfig+0x338>)
 8001d20:	430a      	orrs	r2, r1
 8001d22:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6a1b      	ldr	r3, [r3, #32]
 8001d28:	0b5b      	lsrs	r3, r3, #13
 8001d2a:	3301      	adds	r3, #1
 8001d2c:	2280      	movs	r2, #128	; 0x80
 8001d2e:	0212      	lsls	r2, r2, #8
 8001d30:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001d32:	4b19      	ldr	r3, [pc, #100]	; (8001d98 <HAL_RCC_OscConfig+0x338>)
 8001d34:	68db      	ldr	r3, [r3, #12]
 8001d36:	091b      	lsrs	r3, r3, #4
 8001d38:	210f      	movs	r1, #15
 8001d3a:	400b      	ands	r3, r1
 8001d3c:	491a      	ldr	r1, [pc, #104]	; (8001da8 <HAL_RCC_OscConfig+0x348>)
 8001d3e:	5ccb      	ldrb	r3, [r1, r3]
 8001d40:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001d42:	4b1a      	ldr	r3, [pc, #104]	; (8001dac <HAL_RCC_OscConfig+0x34c>)
 8001d44:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8001d46:	4b1a      	ldr	r3, [pc, #104]	; (8001db0 <HAL_RCC_OscConfig+0x350>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	2513      	movs	r5, #19
 8001d4c:	197c      	adds	r4, r7, r5
 8001d4e:	0018      	movs	r0, r3
 8001d50:	f7ff f838 	bl	8000dc4 <HAL_InitTick>
 8001d54:	0003      	movs	r3, r0
 8001d56:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8001d58:	197b      	adds	r3, r7, r5
 8001d5a:	781b      	ldrb	r3, [r3, #0]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d060      	beq.n	8001e22 <HAL_RCC_OscConfig+0x3c2>
        {
          return status;
 8001d60:	197b      	adds	r3, r7, r5
 8001d62:	781b      	ldrb	r3, [r3, #0]
 8001d64:	e1f2      	b.n	800214c <HAL_RCC_OscConfig+0x6ec>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	699b      	ldr	r3, [r3, #24]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d03f      	beq.n	8001dee <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001d6e:	4b0a      	ldr	r3, [pc, #40]	; (8001d98 <HAL_RCC_OscConfig+0x338>)
 8001d70:	681a      	ldr	r2, [r3, #0]
 8001d72:	4b09      	ldr	r3, [pc, #36]	; (8001d98 <HAL_RCC_OscConfig+0x338>)
 8001d74:	2180      	movs	r1, #128	; 0x80
 8001d76:	0049      	lsls	r1, r1, #1
 8001d78:	430a      	orrs	r2, r1
 8001d7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d7c:	f7ff f868 	bl	8000e50 <HAL_GetTick>
 8001d80:	0003      	movs	r3, r0
 8001d82:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001d84:	e018      	b.n	8001db8 <HAL_RCC_OscConfig+0x358>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001d86:	f7ff f863 	bl	8000e50 <HAL_GetTick>
 8001d8a:	0002      	movs	r2, r0
 8001d8c:	697b      	ldr	r3, [r7, #20]
 8001d8e:	1ad3      	subs	r3, r2, r3
 8001d90:	2b02      	cmp	r3, #2
 8001d92:	d911      	bls.n	8001db8 <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 8001d94:	2303      	movs	r3, #3
 8001d96:	e1d9      	b.n	800214c <HAL_RCC_OscConfig+0x6ec>
 8001d98:	40021000 	.word	0x40021000
 8001d9c:	fffeffff 	.word	0xfffeffff
 8001da0:	fffbffff 	.word	0xfffbffff
 8001da4:	ffffe0ff 	.word	0xffffe0ff
 8001da8:	080035a0 	.word	0x080035a0
 8001dac:	20000000 	.word	0x20000000
 8001db0:	20000004 	.word	0x20000004
 8001db4:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001db8:	4bc9      	ldr	r3, [pc, #804]	; (80020e0 <HAL_RCC_OscConfig+0x680>)
 8001dba:	681a      	ldr	r2, [r3, #0]
 8001dbc:	2380      	movs	r3, #128	; 0x80
 8001dbe:	009b      	lsls	r3, r3, #2
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	d0e0      	beq.n	8001d86 <HAL_RCC_OscConfig+0x326>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001dc4:	4bc6      	ldr	r3, [pc, #792]	; (80020e0 <HAL_RCC_OscConfig+0x680>)
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	4ac6      	ldr	r2, [pc, #792]	; (80020e4 <HAL_RCC_OscConfig+0x684>)
 8001dca:	4013      	ands	r3, r2
 8001dcc:	0019      	movs	r1, r3
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6a1a      	ldr	r2, [r3, #32]
 8001dd2:	4bc3      	ldr	r3, [pc, #780]	; (80020e0 <HAL_RCC_OscConfig+0x680>)
 8001dd4:	430a      	orrs	r2, r1
 8001dd6:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001dd8:	4bc1      	ldr	r3, [pc, #772]	; (80020e0 <HAL_RCC_OscConfig+0x680>)
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	021b      	lsls	r3, r3, #8
 8001dde:	0a19      	lsrs	r1, r3, #8
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	69db      	ldr	r3, [r3, #28]
 8001de4:	061a      	lsls	r2, r3, #24
 8001de6:	4bbe      	ldr	r3, [pc, #760]	; (80020e0 <HAL_RCC_OscConfig+0x680>)
 8001de8:	430a      	orrs	r2, r1
 8001dea:	605a      	str	r2, [r3, #4]
 8001dec:	e019      	b.n	8001e22 <HAL_RCC_OscConfig+0x3c2>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001dee:	4bbc      	ldr	r3, [pc, #752]	; (80020e0 <HAL_RCC_OscConfig+0x680>)
 8001df0:	681a      	ldr	r2, [r3, #0]
 8001df2:	4bbb      	ldr	r3, [pc, #748]	; (80020e0 <HAL_RCC_OscConfig+0x680>)
 8001df4:	49bc      	ldr	r1, [pc, #752]	; (80020e8 <HAL_RCC_OscConfig+0x688>)
 8001df6:	400a      	ands	r2, r1
 8001df8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dfa:	f7ff f829 	bl	8000e50 <HAL_GetTick>
 8001dfe:	0003      	movs	r3, r0
 8001e00:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001e02:	e008      	b.n	8001e16 <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001e04:	f7ff f824 	bl	8000e50 <HAL_GetTick>
 8001e08:	0002      	movs	r2, r0
 8001e0a:	697b      	ldr	r3, [r7, #20]
 8001e0c:	1ad3      	subs	r3, r2, r3
 8001e0e:	2b02      	cmp	r3, #2
 8001e10:	d901      	bls.n	8001e16 <HAL_RCC_OscConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 8001e12:	2303      	movs	r3, #3
 8001e14:	e19a      	b.n	800214c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001e16:	4bb2      	ldr	r3, [pc, #712]	; (80020e0 <HAL_RCC_OscConfig+0x680>)
 8001e18:	681a      	ldr	r2, [r3, #0]
 8001e1a:	2380      	movs	r3, #128	; 0x80
 8001e1c:	009b      	lsls	r3, r3, #2
 8001e1e:	4013      	ands	r3, r2
 8001e20:	d1f0      	bne.n	8001e04 <HAL_RCC_OscConfig+0x3a4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	2208      	movs	r2, #8
 8001e28:	4013      	ands	r3, r2
 8001e2a:	d036      	beq.n	8001e9a <HAL_RCC_OscConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	695b      	ldr	r3, [r3, #20]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d019      	beq.n	8001e68 <HAL_RCC_OscConfig+0x408>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e34:	4baa      	ldr	r3, [pc, #680]	; (80020e0 <HAL_RCC_OscConfig+0x680>)
 8001e36:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001e38:	4ba9      	ldr	r3, [pc, #676]	; (80020e0 <HAL_RCC_OscConfig+0x680>)
 8001e3a:	2101      	movs	r1, #1
 8001e3c:	430a      	orrs	r2, r1
 8001e3e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e40:	f7ff f806 	bl	8000e50 <HAL_GetTick>
 8001e44:	0003      	movs	r3, r0
 8001e46:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001e48:	e008      	b.n	8001e5c <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e4a:	f7ff f801 	bl	8000e50 <HAL_GetTick>
 8001e4e:	0002      	movs	r2, r0
 8001e50:	697b      	ldr	r3, [r7, #20]
 8001e52:	1ad3      	subs	r3, r2, r3
 8001e54:	2b02      	cmp	r3, #2
 8001e56:	d901      	bls.n	8001e5c <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 8001e58:	2303      	movs	r3, #3
 8001e5a:	e177      	b.n	800214c <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001e5c:	4ba0      	ldr	r3, [pc, #640]	; (80020e0 <HAL_RCC_OscConfig+0x680>)
 8001e5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e60:	2202      	movs	r2, #2
 8001e62:	4013      	ands	r3, r2
 8001e64:	d0f1      	beq.n	8001e4a <HAL_RCC_OscConfig+0x3ea>
 8001e66:	e018      	b.n	8001e9a <HAL_RCC_OscConfig+0x43a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e68:	4b9d      	ldr	r3, [pc, #628]	; (80020e0 <HAL_RCC_OscConfig+0x680>)
 8001e6a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001e6c:	4b9c      	ldr	r3, [pc, #624]	; (80020e0 <HAL_RCC_OscConfig+0x680>)
 8001e6e:	2101      	movs	r1, #1
 8001e70:	438a      	bics	r2, r1
 8001e72:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e74:	f7fe ffec 	bl	8000e50 <HAL_GetTick>
 8001e78:	0003      	movs	r3, r0
 8001e7a:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001e7c:	e008      	b.n	8001e90 <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e7e:	f7fe ffe7 	bl	8000e50 <HAL_GetTick>
 8001e82:	0002      	movs	r2, r0
 8001e84:	697b      	ldr	r3, [r7, #20]
 8001e86:	1ad3      	subs	r3, r2, r3
 8001e88:	2b02      	cmp	r3, #2
 8001e8a:	d901      	bls.n	8001e90 <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 8001e8c:	2303      	movs	r3, #3
 8001e8e:	e15d      	b.n	800214c <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001e90:	4b93      	ldr	r3, [pc, #588]	; (80020e0 <HAL_RCC_OscConfig+0x680>)
 8001e92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e94:	2202      	movs	r2, #2
 8001e96:	4013      	ands	r3, r2
 8001e98:	d1f1      	bne.n	8001e7e <HAL_RCC_OscConfig+0x41e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	2204      	movs	r2, #4
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	d100      	bne.n	8001ea6 <HAL_RCC_OscConfig+0x446>
 8001ea4:	e0ae      	b.n	8002004 <HAL_RCC_OscConfig+0x5a4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ea6:	2023      	movs	r0, #35	; 0x23
 8001ea8:	183b      	adds	r3, r7, r0
 8001eaa:	2200      	movs	r2, #0
 8001eac:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001eae:	4b8c      	ldr	r3, [pc, #560]	; (80020e0 <HAL_RCC_OscConfig+0x680>)
 8001eb0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001eb2:	2380      	movs	r3, #128	; 0x80
 8001eb4:	055b      	lsls	r3, r3, #21
 8001eb6:	4013      	ands	r3, r2
 8001eb8:	d109      	bne.n	8001ece <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001eba:	4b89      	ldr	r3, [pc, #548]	; (80020e0 <HAL_RCC_OscConfig+0x680>)
 8001ebc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001ebe:	4b88      	ldr	r3, [pc, #544]	; (80020e0 <HAL_RCC_OscConfig+0x680>)
 8001ec0:	2180      	movs	r1, #128	; 0x80
 8001ec2:	0549      	lsls	r1, r1, #21
 8001ec4:	430a      	orrs	r2, r1
 8001ec6:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001ec8:	183b      	adds	r3, r7, r0
 8001eca:	2201      	movs	r2, #1
 8001ecc:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ece:	4b87      	ldr	r3, [pc, #540]	; (80020ec <HAL_RCC_OscConfig+0x68c>)
 8001ed0:	681a      	ldr	r2, [r3, #0]
 8001ed2:	2380      	movs	r3, #128	; 0x80
 8001ed4:	005b      	lsls	r3, r3, #1
 8001ed6:	4013      	ands	r3, r2
 8001ed8:	d11a      	bne.n	8001f10 <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001eda:	4b84      	ldr	r3, [pc, #528]	; (80020ec <HAL_RCC_OscConfig+0x68c>)
 8001edc:	681a      	ldr	r2, [r3, #0]
 8001ede:	4b83      	ldr	r3, [pc, #524]	; (80020ec <HAL_RCC_OscConfig+0x68c>)
 8001ee0:	2180      	movs	r1, #128	; 0x80
 8001ee2:	0049      	lsls	r1, r1, #1
 8001ee4:	430a      	orrs	r2, r1
 8001ee6:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ee8:	f7fe ffb2 	bl	8000e50 <HAL_GetTick>
 8001eec:	0003      	movs	r3, r0
 8001eee:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ef0:	e008      	b.n	8001f04 <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ef2:	f7fe ffad 	bl	8000e50 <HAL_GetTick>
 8001ef6:	0002      	movs	r2, r0
 8001ef8:	697b      	ldr	r3, [r7, #20]
 8001efa:	1ad3      	subs	r3, r2, r3
 8001efc:	2b64      	cmp	r3, #100	; 0x64
 8001efe:	d901      	bls.n	8001f04 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 8001f00:	2303      	movs	r3, #3
 8001f02:	e123      	b.n	800214c <HAL_RCC_OscConfig+0x6ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f04:	4b79      	ldr	r3, [pc, #484]	; (80020ec <HAL_RCC_OscConfig+0x68c>)
 8001f06:	681a      	ldr	r2, [r3, #0]
 8001f08:	2380      	movs	r3, #128	; 0x80
 8001f0a:	005b      	lsls	r3, r3, #1
 8001f0c:	4013      	ands	r3, r2
 8001f0e:	d0f0      	beq.n	8001ef2 <HAL_RCC_OscConfig+0x492>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	689a      	ldr	r2, [r3, #8]
 8001f14:	2380      	movs	r3, #128	; 0x80
 8001f16:	005b      	lsls	r3, r3, #1
 8001f18:	429a      	cmp	r2, r3
 8001f1a:	d107      	bne.n	8001f2c <HAL_RCC_OscConfig+0x4cc>
 8001f1c:	4b70      	ldr	r3, [pc, #448]	; (80020e0 <HAL_RCC_OscConfig+0x680>)
 8001f1e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001f20:	4b6f      	ldr	r3, [pc, #444]	; (80020e0 <HAL_RCC_OscConfig+0x680>)
 8001f22:	2180      	movs	r1, #128	; 0x80
 8001f24:	0049      	lsls	r1, r1, #1
 8001f26:	430a      	orrs	r2, r1
 8001f28:	651a      	str	r2, [r3, #80]	; 0x50
 8001f2a:	e031      	b.n	8001f90 <HAL_RCC_OscConfig+0x530>
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	689b      	ldr	r3, [r3, #8]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d10c      	bne.n	8001f4e <HAL_RCC_OscConfig+0x4ee>
 8001f34:	4b6a      	ldr	r3, [pc, #424]	; (80020e0 <HAL_RCC_OscConfig+0x680>)
 8001f36:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001f38:	4b69      	ldr	r3, [pc, #420]	; (80020e0 <HAL_RCC_OscConfig+0x680>)
 8001f3a:	496b      	ldr	r1, [pc, #428]	; (80020e8 <HAL_RCC_OscConfig+0x688>)
 8001f3c:	400a      	ands	r2, r1
 8001f3e:	651a      	str	r2, [r3, #80]	; 0x50
 8001f40:	4b67      	ldr	r3, [pc, #412]	; (80020e0 <HAL_RCC_OscConfig+0x680>)
 8001f42:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001f44:	4b66      	ldr	r3, [pc, #408]	; (80020e0 <HAL_RCC_OscConfig+0x680>)
 8001f46:	496a      	ldr	r1, [pc, #424]	; (80020f0 <HAL_RCC_OscConfig+0x690>)
 8001f48:	400a      	ands	r2, r1
 8001f4a:	651a      	str	r2, [r3, #80]	; 0x50
 8001f4c:	e020      	b.n	8001f90 <HAL_RCC_OscConfig+0x530>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	689a      	ldr	r2, [r3, #8]
 8001f52:	23a0      	movs	r3, #160	; 0xa0
 8001f54:	00db      	lsls	r3, r3, #3
 8001f56:	429a      	cmp	r2, r3
 8001f58:	d10e      	bne.n	8001f78 <HAL_RCC_OscConfig+0x518>
 8001f5a:	4b61      	ldr	r3, [pc, #388]	; (80020e0 <HAL_RCC_OscConfig+0x680>)
 8001f5c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001f5e:	4b60      	ldr	r3, [pc, #384]	; (80020e0 <HAL_RCC_OscConfig+0x680>)
 8001f60:	2180      	movs	r1, #128	; 0x80
 8001f62:	00c9      	lsls	r1, r1, #3
 8001f64:	430a      	orrs	r2, r1
 8001f66:	651a      	str	r2, [r3, #80]	; 0x50
 8001f68:	4b5d      	ldr	r3, [pc, #372]	; (80020e0 <HAL_RCC_OscConfig+0x680>)
 8001f6a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001f6c:	4b5c      	ldr	r3, [pc, #368]	; (80020e0 <HAL_RCC_OscConfig+0x680>)
 8001f6e:	2180      	movs	r1, #128	; 0x80
 8001f70:	0049      	lsls	r1, r1, #1
 8001f72:	430a      	orrs	r2, r1
 8001f74:	651a      	str	r2, [r3, #80]	; 0x50
 8001f76:	e00b      	b.n	8001f90 <HAL_RCC_OscConfig+0x530>
 8001f78:	4b59      	ldr	r3, [pc, #356]	; (80020e0 <HAL_RCC_OscConfig+0x680>)
 8001f7a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001f7c:	4b58      	ldr	r3, [pc, #352]	; (80020e0 <HAL_RCC_OscConfig+0x680>)
 8001f7e:	495a      	ldr	r1, [pc, #360]	; (80020e8 <HAL_RCC_OscConfig+0x688>)
 8001f80:	400a      	ands	r2, r1
 8001f82:	651a      	str	r2, [r3, #80]	; 0x50
 8001f84:	4b56      	ldr	r3, [pc, #344]	; (80020e0 <HAL_RCC_OscConfig+0x680>)
 8001f86:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001f88:	4b55      	ldr	r3, [pc, #340]	; (80020e0 <HAL_RCC_OscConfig+0x680>)
 8001f8a:	4959      	ldr	r1, [pc, #356]	; (80020f0 <HAL_RCC_OscConfig+0x690>)
 8001f8c:	400a      	ands	r2, r1
 8001f8e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	689b      	ldr	r3, [r3, #8]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d015      	beq.n	8001fc4 <HAL_RCC_OscConfig+0x564>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f98:	f7fe ff5a 	bl	8000e50 <HAL_GetTick>
 8001f9c:	0003      	movs	r3, r0
 8001f9e:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001fa0:	e009      	b.n	8001fb6 <HAL_RCC_OscConfig+0x556>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fa2:	f7fe ff55 	bl	8000e50 <HAL_GetTick>
 8001fa6:	0002      	movs	r2, r0
 8001fa8:	697b      	ldr	r3, [r7, #20]
 8001faa:	1ad3      	subs	r3, r2, r3
 8001fac:	4a51      	ldr	r2, [pc, #324]	; (80020f4 <HAL_RCC_OscConfig+0x694>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d901      	bls.n	8001fb6 <HAL_RCC_OscConfig+0x556>
        {
          return HAL_TIMEOUT;
 8001fb2:	2303      	movs	r3, #3
 8001fb4:	e0ca      	b.n	800214c <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001fb6:	4b4a      	ldr	r3, [pc, #296]	; (80020e0 <HAL_RCC_OscConfig+0x680>)
 8001fb8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001fba:	2380      	movs	r3, #128	; 0x80
 8001fbc:	009b      	lsls	r3, r3, #2
 8001fbe:	4013      	ands	r3, r2
 8001fc0:	d0ef      	beq.n	8001fa2 <HAL_RCC_OscConfig+0x542>
 8001fc2:	e014      	b.n	8001fee <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fc4:	f7fe ff44 	bl	8000e50 <HAL_GetTick>
 8001fc8:	0003      	movs	r3, r0
 8001fca:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001fcc:	e009      	b.n	8001fe2 <HAL_RCC_OscConfig+0x582>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fce:	f7fe ff3f 	bl	8000e50 <HAL_GetTick>
 8001fd2:	0002      	movs	r2, r0
 8001fd4:	697b      	ldr	r3, [r7, #20]
 8001fd6:	1ad3      	subs	r3, r2, r3
 8001fd8:	4a46      	ldr	r2, [pc, #280]	; (80020f4 <HAL_RCC_OscConfig+0x694>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d901      	bls.n	8001fe2 <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
 8001fde:	2303      	movs	r3, #3
 8001fe0:	e0b4      	b.n	800214c <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001fe2:	4b3f      	ldr	r3, [pc, #252]	; (80020e0 <HAL_RCC_OscConfig+0x680>)
 8001fe4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001fe6:	2380      	movs	r3, #128	; 0x80
 8001fe8:	009b      	lsls	r3, r3, #2
 8001fea:	4013      	ands	r3, r2
 8001fec:	d1ef      	bne.n	8001fce <HAL_RCC_OscConfig+0x56e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001fee:	2323      	movs	r3, #35	; 0x23
 8001ff0:	18fb      	adds	r3, r7, r3
 8001ff2:	781b      	ldrb	r3, [r3, #0]
 8001ff4:	2b01      	cmp	r3, #1
 8001ff6:	d105      	bne.n	8002004 <HAL_RCC_OscConfig+0x5a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ff8:	4b39      	ldr	r3, [pc, #228]	; (80020e0 <HAL_RCC_OscConfig+0x680>)
 8001ffa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001ffc:	4b38      	ldr	r3, [pc, #224]	; (80020e0 <HAL_RCC_OscConfig+0x680>)
 8001ffe:	493e      	ldr	r1, [pc, #248]	; (80020f8 <HAL_RCC_OscConfig+0x698>)
 8002000:	400a      	ands	r2, r1
 8002002:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002008:	2b00      	cmp	r3, #0
 800200a:	d100      	bne.n	800200e <HAL_RCC_OscConfig+0x5ae>
 800200c:	e09d      	b.n	800214a <HAL_RCC_OscConfig+0x6ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800200e:	69fb      	ldr	r3, [r7, #28]
 8002010:	2b0c      	cmp	r3, #12
 8002012:	d100      	bne.n	8002016 <HAL_RCC_OscConfig+0x5b6>
 8002014:	e076      	b.n	8002104 <HAL_RCC_OscConfig+0x6a4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800201a:	2b02      	cmp	r3, #2
 800201c:	d145      	bne.n	80020aa <HAL_RCC_OscConfig+0x64a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800201e:	4b30      	ldr	r3, [pc, #192]	; (80020e0 <HAL_RCC_OscConfig+0x680>)
 8002020:	681a      	ldr	r2, [r3, #0]
 8002022:	4b2f      	ldr	r3, [pc, #188]	; (80020e0 <HAL_RCC_OscConfig+0x680>)
 8002024:	4935      	ldr	r1, [pc, #212]	; (80020fc <HAL_RCC_OscConfig+0x69c>)
 8002026:	400a      	ands	r2, r1
 8002028:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800202a:	f7fe ff11 	bl	8000e50 <HAL_GetTick>
 800202e:	0003      	movs	r3, r0
 8002030:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002032:	e008      	b.n	8002046 <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002034:	f7fe ff0c 	bl	8000e50 <HAL_GetTick>
 8002038:	0002      	movs	r2, r0
 800203a:	697b      	ldr	r3, [r7, #20]
 800203c:	1ad3      	subs	r3, r2, r3
 800203e:	2b02      	cmp	r3, #2
 8002040:	d901      	bls.n	8002046 <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 8002042:	2303      	movs	r3, #3
 8002044:	e082      	b.n	800214c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002046:	4b26      	ldr	r3, [pc, #152]	; (80020e0 <HAL_RCC_OscConfig+0x680>)
 8002048:	681a      	ldr	r2, [r3, #0]
 800204a:	2380      	movs	r3, #128	; 0x80
 800204c:	049b      	lsls	r3, r3, #18
 800204e:	4013      	ands	r3, r2
 8002050:	d1f0      	bne.n	8002034 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002052:	4b23      	ldr	r3, [pc, #140]	; (80020e0 <HAL_RCC_OscConfig+0x680>)
 8002054:	68db      	ldr	r3, [r3, #12]
 8002056:	4a2a      	ldr	r2, [pc, #168]	; (8002100 <HAL_RCC_OscConfig+0x6a0>)
 8002058:	4013      	ands	r3, r2
 800205a:	0019      	movs	r1, r3
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002064:	431a      	orrs	r2, r3
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800206a:	431a      	orrs	r2, r3
 800206c:	4b1c      	ldr	r3, [pc, #112]	; (80020e0 <HAL_RCC_OscConfig+0x680>)
 800206e:	430a      	orrs	r2, r1
 8002070:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002072:	4b1b      	ldr	r3, [pc, #108]	; (80020e0 <HAL_RCC_OscConfig+0x680>)
 8002074:	681a      	ldr	r2, [r3, #0]
 8002076:	4b1a      	ldr	r3, [pc, #104]	; (80020e0 <HAL_RCC_OscConfig+0x680>)
 8002078:	2180      	movs	r1, #128	; 0x80
 800207a:	0449      	lsls	r1, r1, #17
 800207c:	430a      	orrs	r2, r1
 800207e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002080:	f7fe fee6 	bl	8000e50 <HAL_GetTick>
 8002084:	0003      	movs	r3, r0
 8002086:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002088:	e008      	b.n	800209c <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800208a:	f7fe fee1 	bl	8000e50 <HAL_GetTick>
 800208e:	0002      	movs	r2, r0
 8002090:	697b      	ldr	r3, [r7, #20]
 8002092:	1ad3      	subs	r3, r2, r3
 8002094:	2b02      	cmp	r3, #2
 8002096:	d901      	bls.n	800209c <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8002098:	2303      	movs	r3, #3
 800209a:	e057      	b.n	800214c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800209c:	4b10      	ldr	r3, [pc, #64]	; (80020e0 <HAL_RCC_OscConfig+0x680>)
 800209e:	681a      	ldr	r2, [r3, #0]
 80020a0:	2380      	movs	r3, #128	; 0x80
 80020a2:	049b      	lsls	r3, r3, #18
 80020a4:	4013      	ands	r3, r2
 80020a6:	d0f0      	beq.n	800208a <HAL_RCC_OscConfig+0x62a>
 80020a8:	e04f      	b.n	800214a <HAL_RCC_OscConfig+0x6ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020aa:	4b0d      	ldr	r3, [pc, #52]	; (80020e0 <HAL_RCC_OscConfig+0x680>)
 80020ac:	681a      	ldr	r2, [r3, #0]
 80020ae:	4b0c      	ldr	r3, [pc, #48]	; (80020e0 <HAL_RCC_OscConfig+0x680>)
 80020b0:	4912      	ldr	r1, [pc, #72]	; (80020fc <HAL_RCC_OscConfig+0x69c>)
 80020b2:	400a      	ands	r2, r1
 80020b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020b6:	f7fe fecb 	bl	8000e50 <HAL_GetTick>
 80020ba:	0003      	movs	r3, r0
 80020bc:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80020be:	e008      	b.n	80020d2 <HAL_RCC_OscConfig+0x672>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020c0:	f7fe fec6 	bl	8000e50 <HAL_GetTick>
 80020c4:	0002      	movs	r2, r0
 80020c6:	697b      	ldr	r3, [r7, #20]
 80020c8:	1ad3      	subs	r3, r2, r3
 80020ca:	2b02      	cmp	r3, #2
 80020cc:	d901      	bls.n	80020d2 <HAL_RCC_OscConfig+0x672>
          {
            return HAL_TIMEOUT;
 80020ce:	2303      	movs	r3, #3
 80020d0:	e03c      	b.n	800214c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80020d2:	4b03      	ldr	r3, [pc, #12]	; (80020e0 <HAL_RCC_OscConfig+0x680>)
 80020d4:	681a      	ldr	r2, [r3, #0]
 80020d6:	2380      	movs	r3, #128	; 0x80
 80020d8:	049b      	lsls	r3, r3, #18
 80020da:	4013      	ands	r3, r2
 80020dc:	d1f0      	bne.n	80020c0 <HAL_RCC_OscConfig+0x660>
 80020de:	e034      	b.n	800214a <HAL_RCC_OscConfig+0x6ea>
 80020e0:	40021000 	.word	0x40021000
 80020e4:	ffff1fff 	.word	0xffff1fff
 80020e8:	fffffeff 	.word	0xfffffeff
 80020ec:	40007000 	.word	0x40007000
 80020f0:	fffffbff 	.word	0xfffffbff
 80020f4:	00001388 	.word	0x00001388
 80020f8:	efffffff 	.word	0xefffffff
 80020fc:	feffffff 	.word	0xfeffffff
 8002100:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002108:	2b01      	cmp	r3, #1
 800210a:	d101      	bne.n	8002110 <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
 800210c:	2301      	movs	r3, #1
 800210e:	e01d      	b.n	800214c <HAL_RCC_OscConfig+0x6ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002110:	4b10      	ldr	r3, [pc, #64]	; (8002154 <HAL_RCC_OscConfig+0x6f4>)
 8002112:	68db      	ldr	r3, [r3, #12]
 8002114:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002116:	69ba      	ldr	r2, [r7, #24]
 8002118:	2380      	movs	r3, #128	; 0x80
 800211a:	025b      	lsls	r3, r3, #9
 800211c:	401a      	ands	r2, r3
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002122:	429a      	cmp	r2, r3
 8002124:	d10f      	bne.n	8002146 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002126:	69ba      	ldr	r2, [r7, #24]
 8002128:	23f0      	movs	r3, #240	; 0xf0
 800212a:	039b      	lsls	r3, r3, #14
 800212c:	401a      	ands	r2, r3
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002132:	429a      	cmp	r2, r3
 8002134:	d107      	bne.n	8002146 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8002136:	69ba      	ldr	r2, [r7, #24]
 8002138:	23c0      	movs	r3, #192	; 0xc0
 800213a:	041b      	lsls	r3, r3, #16
 800213c:	401a      	ands	r2, r3
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002142:	429a      	cmp	r2, r3
 8002144:	d001      	beq.n	800214a <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_ERROR;
 8002146:	2301      	movs	r3, #1
 8002148:	e000      	b.n	800214c <HAL_RCC_OscConfig+0x6ec>
        }
      }
    }
  }
  return HAL_OK;
 800214a:	2300      	movs	r3, #0
}
 800214c:	0018      	movs	r0, r3
 800214e:	46bd      	mov	sp, r7
 8002150:	b00a      	add	sp, #40	; 0x28
 8002152:	bdb0      	pop	{r4, r5, r7, pc}
 8002154:	40021000 	.word	0x40021000

08002158 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002158:	b5b0      	push	{r4, r5, r7, lr}
 800215a:	b084      	sub	sp, #16
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
 8002160:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d101      	bne.n	800216c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002168:	2301      	movs	r3, #1
 800216a:	e128      	b.n	80023be <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800216c:	4b96      	ldr	r3, [pc, #600]	; (80023c8 <HAL_RCC_ClockConfig+0x270>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	2201      	movs	r2, #1
 8002172:	4013      	ands	r3, r2
 8002174:	683a      	ldr	r2, [r7, #0]
 8002176:	429a      	cmp	r2, r3
 8002178:	d91e      	bls.n	80021b8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800217a:	4b93      	ldr	r3, [pc, #588]	; (80023c8 <HAL_RCC_ClockConfig+0x270>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	2201      	movs	r2, #1
 8002180:	4393      	bics	r3, r2
 8002182:	0019      	movs	r1, r3
 8002184:	4b90      	ldr	r3, [pc, #576]	; (80023c8 <HAL_RCC_ClockConfig+0x270>)
 8002186:	683a      	ldr	r2, [r7, #0]
 8002188:	430a      	orrs	r2, r1
 800218a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800218c:	f7fe fe60 	bl	8000e50 <HAL_GetTick>
 8002190:	0003      	movs	r3, r0
 8002192:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002194:	e009      	b.n	80021aa <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002196:	f7fe fe5b 	bl	8000e50 <HAL_GetTick>
 800219a:	0002      	movs	r2, r0
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	1ad3      	subs	r3, r2, r3
 80021a0:	4a8a      	ldr	r2, [pc, #552]	; (80023cc <HAL_RCC_ClockConfig+0x274>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d901      	bls.n	80021aa <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80021a6:	2303      	movs	r3, #3
 80021a8:	e109      	b.n	80023be <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021aa:	4b87      	ldr	r3, [pc, #540]	; (80023c8 <HAL_RCC_ClockConfig+0x270>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	2201      	movs	r2, #1
 80021b0:	4013      	ands	r3, r2
 80021b2:	683a      	ldr	r2, [r7, #0]
 80021b4:	429a      	cmp	r2, r3
 80021b6:	d1ee      	bne.n	8002196 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	2202      	movs	r2, #2
 80021be:	4013      	ands	r3, r2
 80021c0:	d009      	beq.n	80021d6 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021c2:	4b83      	ldr	r3, [pc, #524]	; (80023d0 <HAL_RCC_ClockConfig+0x278>)
 80021c4:	68db      	ldr	r3, [r3, #12]
 80021c6:	22f0      	movs	r2, #240	; 0xf0
 80021c8:	4393      	bics	r3, r2
 80021ca:	0019      	movs	r1, r3
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	689a      	ldr	r2, [r3, #8]
 80021d0:	4b7f      	ldr	r3, [pc, #508]	; (80023d0 <HAL_RCC_ClockConfig+0x278>)
 80021d2:	430a      	orrs	r2, r1
 80021d4:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	2201      	movs	r2, #1
 80021dc:	4013      	ands	r3, r2
 80021de:	d100      	bne.n	80021e2 <HAL_RCC_ClockConfig+0x8a>
 80021e0:	e089      	b.n	80022f6 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	2b02      	cmp	r3, #2
 80021e8:	d107      	bne.n	80021fa <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80021ea:	4b79      	ldr	r3, [pc, #484]	; (80023d0 <HAL_RCC_ClockConfig+0x278>)
 80021ec:	681a      	ldr	r2, [r3, #0]
 80021ee:	2380      	movs	r3, #128	; 0x80
 80021f0:	029b      	lsls	r3, r3, #10
 80021f2:	4013      	ands	r3, r2
 80021f4:	d120      	bne.n	8002238 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80021f6:	2301      	movs	r3, #1
 80021f8:	e0e1      	b.n	80023be <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	2b03      	cmp	r3, #3
 8002200:	d107      	bne.n	8002212 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002202:	4b73      	ldr	r3, [pc, #460]	; (80023d0 <HAL_RCC_ClockConfig+0x278>)
 8002204:	681a      	ldr	r2, [r3, #0]
 8002206:	2380      	movs	r3, #128	; 0x80
 8002208:	049b      	lsls	r3, r3, #18
 800220a:	4013      	ands	r3, r2
 800220c:	d114      	bne.n	8002238 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800220e:	2301      	movs	r3, #1
 8002210:	e0d5      	b.n	80023be <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	2b01      	cmp	r3, #1
 8002218:	d106      	bne.n	8002228 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800221a:	4b6d      	ldr	r3, [pc, #436]	; (80023d0 <HAL_RCC_ClockConfig+0x278>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	2204      	movs	r2, #4
 8002220:	4013      	ands	r3, r2
 8002222:	d109      	bne.n	8002238 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002224:	2301      	movs	r3, #1
 8002226:	e0ca      	b.n	80023be <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002228:	4b69      	ldr	r3, [pc, #420]	; (80023d0 <HAL_RCC_ClockConfig+0x278>)
 800222a:	681a      	ldr	r2, [r3, #0]
 800222c:	2380      	movs	r3, #128	; 0x80
 800222e:	009b      	lsls	r3, r3, #2
 8002230:	4013      	ands	r3, r2
 8002232:	d101      	bne.n	8002238 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002234:	2301      	movs	r3, #1
 8002236:	e0c2      	b.n	80023be <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002238:	4b65      	ldr	r3, [pc, #404]	; (80023d0 <HAL_RCC_ClockConfig+0x278>)
 800223a:	68db      	ldr	r3, [r3, #12]
 800223c:	2203      	movs	r2, #3
 800223e:	4393      	bics	r3, r2
 8002240:	0019      	movs	r1, r3
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	685a      	ldr	r2, [r3, #4]
 8002246:	4b62      	ldr	r3, [pc, #392]	; (80023d0 <HAL_RCC_ClockConfig+0x278>)
 8002248:	430a      	orrs	r2, r1
 800224a:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800224c:	f7fe fe00 	bl	8000e50 <HAL_GetTick>
 8002250:	0003      	movs	r3, r0
 8002252:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	2b02      	cmp	r3, #2
 800225a:	d111      	bne.n	8002280 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800225c:	e009      	b.n	8002272 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800225e:	f7fe fdf7 	bl	8000e50 <HAL_GetTick>
 8002262:	0002      	movs	r2, r0
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	1ad3      	subs	r3, r2, r3
 8002268:	4a58      	ldr	r2, [pc, #352]	; (80023cc <HAL_RCC_ClockConfig+0x274>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d901      	bls.n	8002272 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 800226e:	2303      	movs	r3, #3
 8002270:	e0a5      	b.n	80023be <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002272:	4b57      	ldr	r3, [pc, #348]	; (80023d0 <HAL_RCC_ClockConfig+0x278>)
 8002274:	68db      	ldr	r3, [r3, #12]
 8002276:	220c      	movs	r2, #12
 8002278:	4013      	ands	r3, r2
 800227a:	2b08      	cmp	r3, #8
 800227c:	d1ef      	bne.n	800225e <HAL_RCC_ClockConfig+0x106>
 800227e:	e03a      	b.n	80022f6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	2b03      	cmp	r3, #3
 8002286:	d111      	bne.n	80022ac <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002288:	e009      	b.n	800229e <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800228a:	f7fe fde1 	bl	8000e50 <HAL_GetTick>
 800228e:	0002      	movs	r2, r0
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	1ad3      	subs	r3, r2, r3
 8002294:	4a4d      	ldr	r2, [pc, #308]	; (80023cc <HAL_RCC_ClockConfig+0x274>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d901      	bls.n	800229e <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 800229a:	2303      	movs	r3, #3
 800229c:	e08f      	b.n	80023be <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800229e:	4b4c      	ldr	r3, [pc, #304]	; (80023d0 <HAL_RCC_ClockConfig+0x278>)
 80022a0:	68db      	ldr	r3, [r3, #12]
 80022a2:	220c      	movs	r2, #12
 80022a4:	4013      	ands	r3, r2
 80022a6:	2b0c      	cmp	r3, #12
 80022a8:	d1ef      	bne.n	800228a <HAL_RCC_ClockConfig+0x132>
 80022aa:	e024      	b.n	80022f6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	2b01      	cmp	r3, #1
 80022b2:	d11b      	bne.n	80022ec <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80022b4:	e009      	b.n	80022ca <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022b6:	f7fe fdcb 	bl	8000e50 <HAL_GetTick>
 80022ba:	0002      	movs	r2, r0
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	1ad3      	subs	r3, r2, r3
 80022c0:	4a42      	ldr	r2, [pc, #264]	; (80023cc <HAL_RCC_ClockConfig+0x274>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d901      	bls.n	80022ca <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 80022c6:	2303      	movs	r3, #3
 80022c8:	e079      	b.n	80023be <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80022ca:	4b41      	ldr	r3, [pc, #260]	; (80023d0 <HAL_RCC_ClockConfig+0x278>)
 80022cc:	68db      	ldr	r3, [r3, #12]
 80022ce:	220c      	movs	r2, #12
 80022d0:	4013      	ands	r3, r2
 80022d2:	2b04      	cmp	r3, #4
 80022d4:	d1ef      	bne.n	80022b6 <HAL_RCC_ClockConfig+0x15e>
 80022d6:	e00e      	b.n	80022f6 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022d8:	f7fe fdba 	bl	8000e50 <HAL_GetTick>
 80022dc:	0002      	movs	r2, r0
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	1ad3      	subs	r3, r2, r3
 80022e2:	4a3a      	ldr	r2, [pc, #232]	; (80023cc <HAL_RCC_ClockConfig+0x274>)
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d901      	bls.n	80022ec <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 80022e8:	2303      	movs	r3, #3
 80022ea:	e068      	b.n	80023be <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80022ec:	4b38      	ldr	r3, [pc, #224]	; (80023d0 <HAL_RCC_ClockConfig+0x278>)
 80022ee:	68db      	ldr	r3, [r3, #12]
 80022f0:	220c      	movs	r2, #12
 80022f2:	4013      	ands	r3, r2
 80022f4:	d1f0      	bne.n	80022d8 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80022f6:	4b34      	ldr	r3, [pc, #208]	; (80023c8 <HAL_RCC_ClockConfig+0x270>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	2201      	movs	r2, #1
 80022fc:	4013      	ands	r3, r2
 80022fe:	683a      	ldr	r2, [r7, #0]
 8002300:	429a      	cmp	r2, r3
 8002302:	d21e      	bcs.n	8002342 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002304:	4b30      	ldr	r3, [pc, #192]	; (80023c8 <HAL_RCC_ClockConfig+0x270>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	2201      	movs	r2, #1
 800230a:	4393      	bics	r3, r2
 800230c:	0019      	movs	r1, r3
 800230e:	4b2e      	ldr	r3, [pc, #184]	; (80023c8 <HAL_RCC_ClockConfig+0x270>)
 8002310:	683a      	ldr	r2, [r7, #0]
 8002312:	430a      	orrs	r2, r1
 8002314:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002316:	f7fe fd9b 	bl	8000e50 <HAL_GetTick>
 800231a:	0003      	movs	r3, r0
 800231c:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800231e:	e009      	b.n	8002334 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002320:	f7fe fd96 	bl	8000e50 <HAL_GetTick>
 8002324:	0002      	movs	r2, r0
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	1ad3      	subs	r3, r2, r3
 800232a:	4a28      	ldr	r2, [pc, #160]	; (80023cc <HAL_RCC_ClockConfig+0x274>)
 800232c:	4293      	cmp	r3, r2
 800232e:	d901      	bls.n	8002334 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8002330:	2303      	movs	r3, #3
 8002332:	e044      	b.n	80023be <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002334:	4b24      	ldr	r3, [pc, #144]	; (80023c8 <HAL_RCC_ClockConfig+0x270>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	2201      	movs	r2, #1
 800233a:	4013      	ands	r3, r2
 800233c:	683a      	ldr	r2, [r7, #0]
 800233e:	429a      	cmp	r2, r3
 8002340:	d1ee      	bne.n	8002320 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	2204      	movs	r2, #4
 8002348:	4013      	ands	r3, r2
 800234a:	d009      	beq.n	8002360 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800234c:	4b20      	ldr	r3, [pc, #128]	; (80023d0 <HAL_RCC_ClockConfig+0x278>)
 800234e:	68db      	ldr	r3, [r3, #12]
 8002350:	4a20      	ldr	r2, [pc, #128]	; (80023d4 <HAL_RCC_ClockConfig+0x27c>)
 8002352:	4013      	ands	r3, r2
 8002354:	0019      	movs	r1, r3
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	68da      	ldr	r2, [r3, #12]
 800235a:	4b1d      	ldr	r3, [pc, #116]	; (80023d0 <HAL_RCC_ClockConfig+0x278>)
 800235c:	430a      	orrs	r2, r1
 800235e:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	2208      	movs	r2, #8
 8002366:	4013      	ands	r3, r2
 8002368:	d00a      	beq.n	8002380 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800236a:	4b19      	ldr	r3, [pc, #100]	; (80023d0 <HAL_RCC_ClockConfig+0x278>)
 800236c:	68db      	ldr	r3, [r3, #12]
 800236e:	4a1a      	ldr	r2, [pc, #104]	; (80023d8 <HAL_RCC_ClockConfig+0x280>)
 8002370:	4013      	ands	r3, r2
 8002372:	0019      	movs	r1, r3
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	691b      	ldr	r3, [r3, #16]
 8002378:	00da      	lsls	r2, r3, #3
 800237a:	4b15      	ldr	r3, [pc, #84]	; (80023d0 <HAL_RCC_ClockConfig+0x278>)
 800237c:	430a      	orrs	r2, r1
 800237e:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002380:	f000 f832 	bl	80023e8 <HAL_RCC_GetSysClockFreq>
 8002384:	0001      	movs	r1, r0
 8002386:	4b12      	ldr	r3, [pc, #72]	; (80023d0 <HAL_RCC_ClockConfig+0x278>)
 8002388:	68db      	ldr	r3, [r3, #12]
 800238a:	091b      	lsrs	r3, r3, #4
 800238c:	220f      	movs	r2, #15
 800238e:	4013      	ands	r3, r2
 8002390:	4a12      	ldr	r2, [pc, #72]	; (80023dc <HAL_RCC_ClockConfig+0x284>)
 8002392:	5cd3      	ldrb	r3, [r2, r3]
 8002394:	000a      	movs	r2, r1
 8002396:	40da      	lsrs	r2, r3
 8002398:	4b11      	ldr	r3, [pc, #68]	; (80023e0 <HAL_RCC_ClockConfig+0x288>)
 800239a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800239c:	4b11      	ldr	r3, [pc, #68]	; (80023e4 <HAL_RCC_ClockConfig+0x28c>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	250b      	movs	r5, #11
 80023a2:	197c      	adds	r4, r7, r5
 80023a4:	0018      	movs	r0, r3
 80023a6:	f7fe fd0d 	bl	8000dc4 <HAL_InitTick>
 80023aa:	0003      	movs	r3, r0
 80023ac:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 80023ae:	197b      	adds	r3, r7, r5
 80023b0:	781b      	ldrb	r3, [r3, #0]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d002      	beq.n	80023bc <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 80023b6:	197b      	adds	r3, r7, r5
 80023b8:	781b      	ldrb	r3, [r3, #0]
 80023ba:	e000      	b.n	80023be <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 80023bc:	2300      	movs	r3, #0
}
 80023be:	0018      	movs	r0, r3
 80023c0:	46bd      	mov	sp, r7
 80023c2:	b004      	add	sp, #16
 80023c4:	bdb0      	pop	{r4, r5, r7, pc}
 80023c6:	46c0      	nop			; (mov r8, r8)
 80023c8:	40022000 	.word	0x40022000
 80023cc:	00001388 	.word	0x00001388
 80023d0:	40021000 	.word	0x40021000
 80023d4:	fffff8ff 	.word	0xfffff8ff
 80023d8:	ffffc7ff 	.word	0xffffc7ff
 80023dc:	080035a0 	.word	0x080035a0
 80023e0:	20000000 	.word	0x20000000
 80023e4:	20000004 	.word	0x20000004

080023e8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023e8:	b5b0      	push	{r4, r5, r7, lr}
 80023ea:	b08e      	sub	sp, #56	; 0x38
 80023ec:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 80023ee:	4b4c      	ldr	r3, [pc, #304]	; (8002520 <HAL_RCC_GetSysClockFreq+0x138>)
 80023f0:	68db      	ldr	r3, [r3, #12]
 80023f2:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80023f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80023f6:	230c      	movs	r3, #12
 80023f8:	4013      	ands	r3, r2
 80023fa:	2b0c      	cmp	r3, #12
 80023fc:	d014      	beq.n	8002428 <HAL_RCC_GetSysClockFreq+0x40>
 80023fe:	d900      	bls.n	8002402 <HAL_RCC_GetSysClockFreq+0x1a>
 8002400:	e07b      	b.n	80024fa <HAL_RCC_GetSysClockFreq+0x112>
 8002402:	2b04      	cmp	r3, #4
 8002404:	d002      	beq.n	800240c <HAL_RCC_GetSysClockFreq+0x24>
 8002406:	2b08      	cmp	r3, #8
 8002408:	d00b      	beq.n	8002422 <HAL_RCC_GetSysClockFreq+0x3a>
 800240a:	e076      	b.n	80024fa <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800240c:	4b44      	ldr	r3, [pc, #272]	; (8002520 <HAL_RCC_GetSysClockFreq+0x138>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	2210      	movs	r2, #16
 8002412:	4013      	ands	r3, r2
 8002414:	d002      	beq.n	800241c <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8002416:	4b43      	ldr	r3, [pc, #268]	; (8002524 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002418:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 800241a:	e07c      	b.n	8002516 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 800241c:	4b42      	ldr	r3, [pc, #264]	; (8002528 <HAL_RCC_GetSysClockFreq+0x140>)
 800241e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002420:	e079      	b.n	8002516 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002422:	4b42      	ldr	r3, [pc, #264]	; (800252c <HAL_RCC_GetSysClockFreq+0x144>)
 8002424:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002426:	e076      	b.n	8002516 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002428:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800242a:	0c9a      	lsrs	r2, r3, #18
 800242c:	230f      	movs	r3, #15
 800242e:	401a      	ands	r2, r3
 8002430:	4b3f      	ldr	r3, [pc, #252]	; (8002530 <HAL_RCC_GetSysClockFreq+0x148>)
 8002432:	5c9b      	ldrb	r3, [r3, r2]
 8002434:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8002436:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002438:	0d9a      	lsrs	r2, r3, #22
 800243a:	2303      	movs	r3, #3
 800243c:	4013      	ands	r3, r2
 800243e:	3301      	adds	r3, #1
 8002440:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002442:	4b37      	ldr	r3, [pc, #220]	; (8002520 <HAL_RCC_GetSysClockFreq+0x138>)
 8002444:	68da      	ldr	r2, [r3, #12]
 8002446:	2380      	movs	r3, #128	; 0x80
 8002448:	025b      	lsls	r3, r3, #9
 800244a:	4013      	ands	r3, r2
 800244c:	d01a      	beq.n	8002484 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800244e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002450:	61bb      	str	r3, [r7, #24]
 8002452:	2300      	movs	r3, #0
 8002454:	61fb      	str	r3, [r7, #28]
 8002456:	4a35      	ldr	r2, [pc, #212]	; (800252c <HAL_RCC_GetSysClockFreq+0x144>)
 8002458:	2300      	movs	r3, #0
 800245a:	69b8      	ldr	r0, [r7, #24]
 800245c:	69f9      	ldr	r1, [r7, #28]
 800245e:	f7fd feff 	bl	8000260 <__aeabi_lmul>
 8002462:	0002      	movs	r2, r0
 8002464:	000b      	movs	r3, r1
 8002466:	0010      	movs	r0, r2
 8002468:	0019      	movs	r1, r3
 800246a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800246c:	613b      	str	r3, [r7, #16]
 800246e:	2300      	movs	r3, #0
 8002470:	617b      	str	r3, [r7, #20]
 8002472:	693a      	ldr	r2, [r7, #16]
 8002474:	697b      	ldr	r3, [r7, #20]
 8002476:	f7fd fed3 	bl	8000220 <__aeabi_uldivmod>
 800247a:	0002      	movs	r2, r0
 800247c:	000b      	movs	r3, r1
 800247e:	0013      	movs	r3, r2
 8002480:	637b      	str	r3, [r7, #52]	; 0x34
 8002482:	e037      	b.n	80024f4 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002484:	4b26      	ldr	r3, [pc, #152]	; (8002520 <HAL_RCC_GetSysClockFreq+0x138>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	2210      	movs	r2, #16
 800248a:	4013      	ands	r3, r2
 800248c:	d01a      	beq.n	80024c4 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 800248e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002490:	60bb      	str	r3, [r7, #8]
 8002492:	2300      	movs	r3, #0
 8002494:	60fb      	str	r3, [r7, #12]
 8002496:	4a23      	ldr	r2, [pc, #140]	; (8002524 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002498:	2300      	movs	r3, #0
 800249a:	68b8      	ldr	r0, [r7, #8]
 800249c:	68f9      	ldr	r1, [r7, #12]
 800249e:	f7fd fedf 	bl	8000260 <__aeabi_lmul>
 80024a2:	0002      	movs	r2, r0
 80024a4:	000b      	movs	r3, r1
 80024a6:	0010      	movs	r0, r2
 80024a8:	0019      	movs	r1, r3
 80024aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ac:	603b      	str	r3, [r7, #0]
 80024ae:	2300      	movs	r3, #0
 80024b0:	607b      	str	r3, [r7, #4]
 80024b2:	683a      	ldr	r2, [r7, #0]
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	f7fd feb3 	bl	8000220 <__aeabi_uldivmod>
 80024ba:	0002      	movs	r2, r0
 80024bc:	000b      	movs	r3, r1
 80024be:	0013      	movs	r3, r2
 80024c0:	637b      	str	r3, [r7, #52]	; 0x34
 80024c2:	e017      	b.n	80024f4 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80024c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024c6:	0018      	movs	r0, r3
 80024c8:	2300      	movs	r3, #0
 80024ca:	0019      	movs	r1, r3
 80024cc:	4a16      	ldr	r2, [pc, #88]	; (8002528 <HAL_RCC_GetSysClockFreq+0x140>)
 80024ce:	2300      	movs	r3, #0
 80024d0:	f7fd fec6 	bl	8000260 <__aeabi_lmul>
 80024d4:	0002      	movs	r2, r0
 80024d6:	000b      	movs	r3, r1
 80024d8:	0010      	movs	r0, r2
 80024da:	0019      	movs	r1, r3
 80024dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024de:	001c      	movs	r4, r3
 80024e0:	2300      	movs	r3, #0
 80024e2:	001d      	movs	r5, r3
 80024e4:	0022      	movs	r2, r4
 80024e6:	002b      	movs	r3, r5
 80024e8:	f7fd fe9a 	bl	8000220 <__aeabi_uldivmod>
 80024ec:	0002      	movs	r2, r0
 80024ee:	000b      	movs	r3, r1
 80024f0:	0013      	movs	r3, r2
 80024f2:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 80024f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024f6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80024f8:	e00d      	b.n	8002516 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80024fa:	4b09      	ldr	r3, [pc, #36]	; (8002520 <HAL_RCC_GetSysClockFreq+0x138>)
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	0b5b      	lsrs	r3, r3, #13
 8002500:	2207      	movs	r2, #7
 8002502:	4013      	ands	r3, r2
 8002504:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002506:	6a3b      	ldr	r3, [r7, #32]
 8002508:	3301      	adds	r3, #1
 800250a:	2280      	movs	r2, #128	; 0x80
 800250c:	0212      	lsls	r2, r2, #8
 800250e:	409a      	lsls	r2, r3
 8002510:	0013      	movs	r3, r2
 8002512:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002514:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002518:	0018      	movs	r0, r3
 800251a:	46bd      	mov	sp, r7
 800251c:	b00e      	add	sp, #56	; 0x38
 800251e:	bdb0      	pop	{r4, r5, r7, pc}
 8002520:	40021000 	.word	0x40021000
 8002524:	003d0900 	.word	0x003d0900
 8002528:	00f42400 	.word	0x00f42400
 800252c:	007a1200 	.word	0x007a1200
 8002530:	080035b0 	.word	0x080035b0

08002534 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b082      	sub	sp, #8
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d101      	bne.n	8002546 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002542:	2301      	movs	r3, #1
 8002544:	e032      	b.n	80025ac <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2239      	movs	r2, #57	; 0x39
 800254a:	5c9b      	ldrb	r3, [r3, r2]
 800254c:	b2db      	uxtb	r3, r3
 800254e:	2b00      	cmp	r3, #0
 8002550:	d107      	bne.n	8002562 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2238      	movs	r2, #56	; 0x38
 8002556:	2100      	movs	r1, #0
 8002558:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	0018      	movs	r0, r3
 800255e:	f7fe fb4d 	bl	8000bfc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2239      	movs	r2, #57	; 0x39
 8002566:	2102      	movs	r1, #2
 8002568:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681a      	ldr	r2, [r3, #0]
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	3304      	adds	r3, #4
 8002572:	0019      	movs	r1, r3
 8002574:	0010      	movs	r0, r2
 8002576:	f000 fc99 	bl	8002eac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	223e      	movs	r2, #62	; 0x3e
 800257e:	2101      	movs	r1, #1
 8002580:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	223a      	movs	r2, #58	; 0x3a
 8002586:	2101      	movs	r1, #1
 8002588:	5499      	strb	r1, [r3, r2]
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	223b      	movs	r2, #59	; 0x3b
 800258e:	2101      	movs	r1, #1
 8002590:	5499      	strb	r1, [r3, r2]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	223c      	movs	r2, #60	; 0x3c
 8002596:	2101      	movs	r1, #1
 8002598:	5499      	strb	r1, [r3, r2]
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	223d      	movs	r2, #61	; 0x3d
 800259e:	2101      	movs	r1, #1
 80025a0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2239      	movs	r2, #57	; 0x39
 80025a6:	2101      	movs	r1, #1
 80025a8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80025aa:	2300      	movs	r3, #0
}
 80025ac:	0018      	movs	r0, r3
 80025ae:	46bd      	mov	sp, r7
 80025b0:	b002      	add	sp, #8
 80025b2:	bd80      	pop	{r7, pc}

080025b4 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b082      	sub	sp, #8
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d101      	bne.n	80025c6 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
 80025c4:	e032      	b.n	800262c <HAL_TIM_IC_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2239      	movs	r2, #57	; 0x39
 80025ca:	5c9b      	ldrb	r3, [r3, r2]
 80025cc:	b2db      	uxtb	r3, r3
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d107      	bne.n	80025e2 <HAL_TIM_IC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2238      	movs	r2, #56	; 0x38
 80025d6:	2100      	movs	r1, #0
 80025d8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	0018      	movs	r0, r3
 80025de:	f000 f829 	bl	8002634 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2239      	movs	r2, #57	; 0x39
 80025e6:	2102      	movs	r1, #2
 80025e8:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681a      	ldr	r2, [r3, #0]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	3304      	adds	r3, #4
 80025f2:	0019      	movs	r1, r3
 80025f4:	0010      	movs	r0, r2
 80025f6:	f000 fc59 	bl	8002eac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	223e      	movs	r2, #62	; 0x3e
 80025fe:	2101      	movs	r1, #1
 8002600:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	223a      	movs	r2, #58	; 0x3a
 8002606:	2101      	movs	r1, #1
 8002608:	5499      	strb	r1, [r3, r2]
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	223b      	movs	r2, #59	; 0x3b
 800260e:	2101      	movs	r1, #1
 8002610:	5499      	strb	r1, [r3, r2]
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	223c      	movs	r2, #60	; 0x3c
 8002616:	2101      	movs	r1, #1
 8002618:	5499      	strb	r1, [r3, r2]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	223d      	movs	r2, #61	; 0x3d
 800261e:	2101      	movs	r1, #1
 8002620:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2239      	movs	r2, #57	; 0x39
 8002626:	2101      	movs	r1, #1
 8002628:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800262a:	2300      	movs	r3, #0
}
 800262c:	0018      	movs	r0, r3
 800262e:	46bd      	mov	sp, r7
 8002630:	b002      	add	sp, #8
 8002632:	bd80      	pop	{r7, pc}

08002634 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b082      	sub	sp, #8
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800263c:	46c0      	nop			; (mov r8, r8)
 800263e:	46bd      	mov	sp, r7
 8002640:	b002      	add	sp, #8
 8002642:	bd80      	pop	{r7, pc}

08002644 <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b084      	sub	sp, #16
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
 800264c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d104      	bne.n	800265e <HAL_TIM_IC_Start+0x1a>
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	223a      	movs	r2, #58	; 0x3a
 8002658:	5c9b      	ldrb	r3, [r3, r2]
 800265a:	b2db      	uxtb	r3, r3
 800265c:	e013      	b.n	8002686 <HAL_TIM_IC_Start+0x42>
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	2b04      	cmp	r3, #4
 8002662:	d104      	bne.n	800266e <HAL_TIM_IC_Start+0x2a>
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	223b      	movs	r2, #59	; 0x3b
 8002668:	5c9b      	ldrb	r3, [r3, r2]
 800266a:	b2db      	uxtb	r3, r3
 800266c:	e00b      	b.n	8002686 <HAL_TIM_IC_Start+0x42>
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	2b08      	cmp	r3, #8
 8002672:	d104      	bne.n	800267e <HAL_TIM_IC_Start+0x3a>
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	223c      	movs	r2, #60	; 0x3c
 8002678:	5c9b      	ldrb	r3, [r3, r2]
 800267a:	b2db      	uxtb	r3, r3
 800267c:	e003      	b.n	8002686 <HAL_TIM_IC_Start+0x42>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	223d      	movs	r2, #61	; 0x3d
 8002682:	5c9b      	ldrb	r3, [r3, r2]
 8002684:	b2db      	uxtb	r3, r3
 8002686:	210f      	movs	r1, #15
 8002688:	187a      	adds	r2, r7, r1
 800268a:	7013      	strb	r3, [r2, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800268c:	187b      	adds	r3, r7, r1
 800268e:	781b      	ldrb	r3, [r3, #0]
 8002690:	2b01      	cmp	r3, #1
 8002692:	d001      	beq.n	8002698 <HAL_TIM_IC_Start+0x54>
  {
    return HAL_ERROR;
 8002694:	2301      	movs	r3, #1
 8002696:	e048      	b.n	800272a <HAL_TIM_IC_Start+0xe6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d104      	bne.n	80026a8 <HAL_TIM_IC_Start+0x64>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	223a      	movs	r2, #58	; 0x3a
 80026a2:	2102      	movs	r1, #2
 80026a4:	5499      	strb	r1, [r3, r2]
 80026a6:	e013      	b.n	80026d0 <HAL_TIM_IC_Start+0x8c>
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	2b04      	cmp	r3, #4
 80026ac:	d104      	bne.n	80026b8 <HAL_TIM_IC_Start+0x74>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	223b      	movs	r2, #59	; 0x3b
 80026b2:	2102      	movs	r1, #2
 80026b4:	5499      	strb	r1, [r3, r2]
 80026b6:	e00b      	b.n	80026d0 <HAL_TIM_IC_Start+0x8c>
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	2b08      	cmp	r3, #8
 80026bc:	d104      	bne.n	80026c8 <HAL_TIM_IC_Start+0x84>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	223c      	movs	r2, #60	; 0x3c
 80026c2:	2102      	movs	r1, #2
 80026c4:	5499      	strb	r1, [r3, r2]
 80026c6:	e003      	b.n	80026d0 <HAL_TIM_IC_Start+0x8c>
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	223d      	movs	r2, #61	; 0x3d
 80026cc:	2102      	movs	r1, #2
 80026ce:	5499      	strb	r1, [r3, r2]

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	6839      	ldr	r1, [r7, #0]
 80026d6:	2201      	movs	r2, #1
 80026d8:	0018      	movs	r0, r3
 80026da:	f000 fe75 	bl	80033c8 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681a      	ldr	r2, [r3, #0]
 80026e2:	2380      	movs	r3, #128	; 0x80
 80026e4:	05db      	lsls	r3, r3, #23
 80026e6:	429a      	cmp	r2, r3
 80026e8:	d004      	beq.n	80026f4 <HAL_TIM_IC_Start+0xb0>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4a11      	ldr	r2, [pc, #68]	; (8002734 <HAL_TIM_IC_Start+0xf0>)
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d111      	bne.n	8002718 <HAL_TIM_IC_Start+0xd4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	689b      	ldr	r3, [r3, #8]
 80026fa:	2207      	movs	r2, #7
 80026fc:	4013      	ands	r3, r2
 80026fe:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002700:	68bb      	ldr	r3, [r7, #8]
 8002702:	2b06      	cmp	r3, #6
 8002704:	d010      	beq.n	8002728 <HAL_TIM_IC_Start+0xe4>
    {
      __HAL_TIM_ENABLE(htim);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	681a      	ldr	r2, [r3, #0]
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	2101      	movs	r1, #1
 8002712:	430a      	orrs	r2, r1
 8002714:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002716:	e007      	b.n	8002728 <HAL_TIM_IC_Start+0xe4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	681a      	ldr	r2, [r3, #0]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	2101      	movs	r1, #1
 8002724:	430a      	orrs	r2, r1
 8002726:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002728:	2300      	movs	r3, #0
}
 800272a:	0018      	movs	r0, r3
 800272c:	46bd      	mov	sp, r7
 800272e:	b004      	add	sp, #16
 8002730:	bd80      	pop	{r7, pc}
 8002732:	46c0      	nop			; (mov r8, r8)
 8002734:	40010800 	.word	0x40010800

08002738 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b084      	sub	sp, #16
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
 8002740:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002742:	230f      	movs	r3, #15
 8002744:	18fb      	adds	r3, r7, r3
 8002746:	2200      	movs	r2, #0
 8002748:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d104      	bne.n	800275a <HAL_TIM_IC_Start_IT+0x22>
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	223a      	movs	r2, #58	; 0x3a
 8002754:	5c9b      	ldrb	r3, [r3, r2]
 8002756:	b2db      	uxtb	r3, r3
 8002758:	e013      	b.n	8002782 <HAL_TIM_IC_Start_IT+0x4a>
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	2b04      	cmp	r3, #4
 800275e:	d104      	bne.n	800276a <HAL_TIM_IC_Start_IT+0x32>
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	223b      	movs	r2, #59	; 0x3b
 8002764:	5c9b      	ldrb	r3, [r3, r2]
 8002766:	b2db      	uxtb	r3, r3
 8002768:	e00b      	b.n	8002782 <HAL_TIM_IC_Start_IT+0x4a>
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	2b08      	cmp	r3, #8
 800276e:	d104      	bne.n	800277a <HAL_TIM_IC_Start_IT+0x42>
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	223c      	movs	r2, #60	; 0x3c
 8002774:	5c9b      	ldrb	r3, [r3, r2]
 8002776:	b2db      	uxtb	r3, r3
 8002778:	e003      	b.n	8002782 <HAL_TIM_IC_Start_IT+0x4a>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	223d      	movs	r2, #61	; 0x3d
 800277e:	5c9b      	ldrb	r3, [r3, r2]
 8002780:	b2db      	uxtb	r3, r3
 8002782:	210e      	movs	r1, #14
 8002784:	187a      	adds	r2, r7, r1
 8002786:	7013      	strb	r3, [r2, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8002788:	187b      	adds	r3, r7, r1
 800278a:	781b      	ldrb	r3, [r3, #0]
 800278c:	2b01      	cmp	r3, #1
 800278e:	d001      	beq.n	8002794 <HAL_TIM_IC_Start_IT+0x5c>
  {
    return HAL_ERROR;
 8002790:	2301      	movs	r3, #1
 8002792:	e08b      	b.n	80028ac <HAL_TIM_IC_Start_IT+0x174>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d104      	bne.n	80027a4 <HAL_TIM_IC_Start_IT+0x6c>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	223a      	movs	r2, #58	; 0x3a
 800279e:	2102      	movs	r1, #2
 80027a0:	5499      	strb	r1, [r3, r2]
 80027a2:	e013      	b.n	80027cc <HAL_TIM_IC_Start_IT+0x94>
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	2b04      	cmp	r3, #4
 80027a8:	d104      	bne.n	80027b4 <HAL_TIM_IC_Start_IT+0x7c>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	223b      	movs	r2, #59	; 0x3b
 80027ae:	2102      	movs	r1, #2
 80027b0:	5499      	strb	r1, [r3, r2]
 80027b2:	e00b      	b.n	80027cc <HAL_TIM_IC_Start_IT+0x94>
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	2b08      	cmp	r3, #8
 80027b8:	d104      	bne.n	80027c4 <HAL_TIM_IC_Start_IT+0x8c>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	223c      	movs	r2, #60	; 0x3c
 80027be:	2102      	movs	r1, #2
 80027c0:	5499      	strb	r1, [r3, r2]
 80027c2:	e003      	b.n	80027cc <HAL_TIM_IC_Start_IT+0x94>
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	223d      	movs	r2, #61	; 0x3d
 80027c8:	2102      	movs	r1, #2
 80027ca:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	2b0c      	cmp	r3, #12
 80027d0:	d02a      	beq.n	8002828 <HAL_TIM_IC_Start_IT+0xf0>
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	2b0c      	cmp	r3, #12
 80027d6:	d830      	bhi.n	800283a <HAL_TIM_IC_Start_IT+0x102>
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	2b08      	cmp	r3, #8
 80027dc:	d01b      	beq.n	8002816 <HAL_TIM_IC_Start_IT+0xde>
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	2b08      	cmp	r3, #8
 80027e2:	d82a      	bhi.n	800283a <HAL_TIM_IC_Start_IT+0x102>
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d003      	beq.n	80027f2 <HAL_TIM_IC_Start_IT+0xba>
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	2b04      	cmp	r3, #4
 80027ee:	d009      	beq.n	8002804 <HAL_TIM_IC_Start_IT+0xcc>
 80027f0:	e023      	b.n	800283a <HAL_TIM_IC_Start_IT+0x102>
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	68da      	ldr	r2, [r3, #12]
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	2102      	movs	r1, #2
 80027fe:	430a      	orrs	r2, r1
 8002800:	60da      	str	r2, [r3, #12]
      break;
 8002802:	e01f      	b.n	8002844 <HAL_TIM_IC_Start_IT+0x10c>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	68da      	ldr	r2, [r3, #12]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	2104      	movs	r1, #4
 8002810:	430a      	orrs	r2, r1
 8002812:	60da      	str	r2, [r3, #12]
      break;
 8002814:	e016      	b.n	8002844 <HAL_TIM_IC_Start_IT+0x10c>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	68da      	ldr	r2, [r3, #12]
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	2108      	movs	r1, #8
 8002822:	430a      	orrs	r2, r1
 8002824:	60da      	str	r2, [r3, #12]
      break;
 8002826:	e00d      	b.n	8002844 <HAL_TIM_IC_Start_IT+0x10c>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	68da      	ldr	r2, [r3, #12]
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	2110      	movs	r1, #16
 8002834:	430a      	orrs	r2, r1
 8002836:	60da      	str	r2, [r3, #12]
      break;
 8002838:	e004      	b.n	8002844 <HAL_TIM_IC_Start_IT+0x10c>
    }

    default:
      status = HAL_ERROR;
 800283a:	230f      	movs	r3, #15
 800283c:	18fb      	adds	r3, r7, r3
 800283e:	2201      	movs	r2, #1
 8002840:	701a      	strb	r2, [r3, #0]
      break;
 8002842:	46c0      	nop			; (mov r8, r8)
  }

  if (status == HAL_OK)
 8002844:	230f      	movs	r3, #15
 8002846:	18fb      	adds	r3, r7, r3
 8002848:	781b      	ldrb	r3, [r3, #0]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d12b      	bne.n	80028a6 <HAL_TIM_IC_Start_IT+0x16e>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	6839      	ldr	r1, [r7, #0]
 8002854:	2201      	movs	r2, #1
 8002856:	0018      	movs	r0, r3
 8002858:	f000 fdb6 	bl	80033c8 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681a      	ldr	r2, [r3, #0]
 8002860:	2380      	movs	r3, #128	; 0x80
 8002862:	05db      	lsls	r3, r3, #23
 8002864:	429a      	cmp	r2, r3
 8002866:	d004      	beq.n	8002872 <HAL_TIM_IC_Start_IT+0x13a>
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a11      	ldr	r2, [pc, #68]	; (80028b4 <HAL_TIM_IC_Start_IT+0x17c>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d111      	bne.n	8002896 <HAL_TIM_IC_Start_IT+0x15e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	689b      	ldr	r3, [r3, #8]
 8002878:	2207      	movs	r2, #7
 800287a:	4013      	ands	r3, r2
 800287c:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800287e:	68bb      	ldr	r3, [r7, #8]
 8002880:	2b06      	cmp	r3, #6
 8002882:	d010      	beq.n	80028a6 <HAL_TIM_IC_Start_IT+0x16e>
      {
        __HAL_TIM_ENABLE(htim);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	681a      	ldr	r2, [r3, #0]
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	2101      	movs	r1, #1
 8002890:	430a      	orrs	r2, r1
 8002892:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002894:	e007      	b.n	80028a6 <HAL_TIM_IC_Start_IT+0x16e>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	681a      	ldr	r2, [r3, #0]
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	2101      	movs	r1, #1
 80028a2:	430a      	orrs	r2, r1
 80028a4:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80028a6:	230f      	movs	r3, #15
 80028a8:	18fb      	adds	r3, r7, r3
 80028aa:	781b      	ldrb	r3, [r3, #0]
}
 80028ac:	0018      	movs	r0, r3
 80028ae:	46bd      	mov	sp, r7
 80028b0:	b004      	add	sp, #16
 80028b2:	bd80      	pop	{r7, pc}
 80028b4:	40010800 	.word	0x40010800

080028b8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b082      	sub	sp, #8
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	691b      	ldr	r3, [r3, #16]
 80028c6:	2202      	movs	r2, #2
 80028c8:	4013      	ands	r3, r2
 80028ca:	2b02      	cmp	r3, #2
 80028cc:	d124      	bne.n	8002918 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	68db      	ldr	r3, [r3, #12]
 80028d4:	2202      	movs	r2, #2
 80028d6:	4013      	ands	r3, r2
 80028d8:	2b02      	cmp	r3, #2
 80028da:	d11d      	bne.n	8002918 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	2203      	movs	r2, #3
 80028e2:	4252      	negs	r2, r2
 80028e4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2201      	movs	r2, #1
 80028ea:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	699b      	ldr	r3, [r3, #24]
 80028f2:	2203      	movs	r2, #3
 80028f4:	4013      	ands	r3, r2
 80028f6:	d004      	beq.n	8002902 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	0018      	movs	r0, r3
 80028fc:	f7fe f8da 	bl	8000ab4 <HAL_TIM_IC_CaptureCallback>
 8002900:	e007      	b.n	8002912 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	0018      	movs	r0, r3
 8002906:	f000 fab9 	bl	8002e7c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	0018      	movs	r0, r3
 800290e:	f000 fabd 	bl	8002e8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2200      	movs	r2, #0
 8002916:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	691b      	ldr	r3, [r3, #16]
 800291e:	2204      	movs	r2, #4
 8002920:	4013      	ands	r3, r2
 8002922:	2b04      	cmp	r3, #4
 8002924:	d125      	bne.n	8002972 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	68db      	ldr	r3, [r3, #12]
 800292c:	2204      	movs	r2, #4
 800292e:	4013      	ands	r3, r2
 8002930:	2b04      	cmp	r3, #4
 8002932:	d11e      	bne.n	8002972 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	2205      	movs	r2, #5
 800293a:	4252      	negs	r2, r2
 800293c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2202      	movs	r2, #2
 8002942:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	699a      	ldr	r2, [r3, #24]
 800294a:	23c0      	movs	r3, #192	; 0xc0
 800294c:	009b      	lsls	r3, r3, #2
 800294e:	4013      	ands	r3, r2
 8002950:	d004      	beq.n	800295c <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	0018      	movs	r0, r3
 8002956:	f7fe f8ad 	bl	8000ab4 <HAL_TIM_IC_CaptureCallback>
 800295a:	e007      	b.n	800296c <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	0018      	movs	r0, r3
 8002960:	f000 fa8c 	bl	8002e7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	0018      	movs	r0, r3
 8002968:	f000 fa90 	bl	8002e8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2200      	movs	r2, #0
 8002970:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	691b      	ldr	r3, [r3, #16]
 8002978:	2208      	movs	r2, #8
 800297a:	4013      	ands	r3, r2
 800297c:	2b08      	cmp	r3, #8
 800297e:	d124      	bne.n	80029ca <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	68db      	ldr	r3, [r3, #12]
 8002986:	2208      	movs	r2, #8
 8002988:	4013      	ands	r3, r2
 800298a:	2b08      	cmp	r3, #8
 800298c:	d11d      	bne.n	80029ca <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	2209      	movs	r2, #9
 8002994:	4252      	negs	r2, r2
 8002996:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2204      	movs	r2, #4
 800299c:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	69db      	ldr	r3, [r3, #28]
 80029a4:	2203      	movs	r2, #3
 80029a6:	4013      	ands	r3, r2
 80029a8:	d004      	beq.n	80029b4 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	0018      	movs	r0, r3
 80029ae:	f7fe f881 	bl	8000ab4 <HAL_TIM_IC_CaptureCallback>
 80029b2:	e007      	b.n	80029c4 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	0018      	movs	r0, r3
 80029b8:	f000 fa60 	bl	8002e7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	0018      	movs	r0, r3
 80029c0:	f000 fa64 	bl	8002e8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2200      	movs	r2, #0
 80029c8:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	691b      	ldr	r3, [r3, #16]
 80029d0:	2210      	movs	r2, #16
 80029d2:	4013      	ands	r3, r2
 80029d4:	2b10      	cmp	r3, #16
 80029d6:	d125      	bne.n	8002a24 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	68db      	ldr	r3, [r3, #12]
 80029de:	2210      	movs	r2, #16
 80029e0:	4013      	ands	r3, r2
 80029e2:	2b10      	cmp	r3, #16
 80029e4:	d11e      	bne.n	8002a24 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	2211      	movs	r2, #17
 80029ec:	4252      	negs	r2, r2
 80029ee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2208      	movs	r2, #8
 80029f4:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	69da      	ldr	r2, [r3, #28]
 80029fc:	23c0      	movs	r3, #192	; 0xc0
 80029fe:	009b      	lsls	r3, r3, #2
 8002a00:	4013      	ands	r3, r2
 8002a02:	d004      	beq.n	8002a0e <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	0018      	movs	r0, r3
 8002a08:	f7fe f854 	bl	8000ab4 <HAL_TIM_IC_CaptureCallback>
 8002a0c:	e007      	b.n	8002a1e <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	0018      	movs	r0, r3
 8002a12:	f000 fa33 	bl	8002e7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	0018      	movs	r0, r3
 8002a1a:	f000 fa37 	bl	8002e8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2200      	movs	r2, #0
 8002a22:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	691b      	ldr	r3, [r3, #16]
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	4013      	ands	r3, r2
 8002a2e:	2b01      	cmp	r3, #1
 8002a30:	d10f      	bne.n	8002a52 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	68db      	ldr	r3, [r3, #12]
 8002a38:	2201      	movs	r2, #1
 8002a3a:	4013      	ands	r3, r2
 8002a3c:	2b01      	cmp	r3, #1
 8002a3e:	d108      	bne.n	8002a52 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	2202      	movs	r2, #2
 8002a46:	4252      	negs	r2, r2
 8002a48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	0018      	movs	r0, r3
 8002a4e:	f000 fa0d 	bl	8002e6c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	691b      	ldr	r3, [r3, #16]
 8002a58:	2240      	movs	r2, #64	; 0x40
 8002a5a:	4013      	ands	r3, r2
 8002a5c:	2b40      	cmp	r3, #64	; 0x40
 8002a5e:	d10f      	bne.n	8002a80 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	68db      	ldr	r3, [r3, #12]
 8002a66:	2240      	movs	r2, #64	; 0x40
 8002a68:	4013      	ands	r3, r2
 8002a6a:	2b40      	cmp	r3, #64	; 0x40
 8002a6c:	d108      	bne.n	8002a80 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	2241      	movs	r2, #65	; 0x41
 8002a74:	4252      	negs	r2, r2
 8002a76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	0018      	movs	r0, r3
 8002a7c:	f000 fa0e 	bl	8002e9c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002a80:	46c0      	nop			; (mov r8, r8)
 8002a82:	46bd      	mov	sp, r7
 8002a84:	b002      	add	sp, #8
 8002a86:	bd80      	pop	{r7, pc}

08002a88 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b086      	sub	sp, #24
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	60f8      	str	r0, [r7, #12]
 8002a90:	60b9      	str	r1, [r7, #8]
 8002a92:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a94:	2317      	movs	r3, #23
 8002a96:	18fb      	adds	r3, r7, r3
 8002a98:	2200      	movs	r2, #0
 8002a9a:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	2238      	movs	r2, #56	; 0x38
 8002aa0:	5c9b      	ldrb	r3, [r3, r2]
 8002aa2:	2b01      	cmp	r3, #1
 8002aa4:	d101      	bne.n	8002aaa <HAL_TIM_IC_ConfigChannel+0x22>
 8002aa6:	2302      	movs	r3, #2
 8002aa8:	e08c      	b.n	8002bc4 <HAL_TIM_IC_ConfigChannel+0x13c>
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	2238      	movs	r2, #56	; 0x38
 8002aae:	2101      	movs	r1, #1
 8002ab0:	5499      	strb	r1, [r3, r2]

  if (Channel == TIM_CHANNEL_1)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d11b      	bne.n	8002af0 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	6818      	ldr	r0, [r3, #0]
 8002abc:	68bb      	ldr	r3, [r7, #8]
 8002abe:	6819      	ldr	r1, [r3, #0]
 8002ac0:	68bb      	ldr	r3, [r7, #8]
 8002ac2:	685a      	ldr	r2, [r3, #4]
 8002ac4:	68bb      	ldr	r3, [r7, #8]
 8002ac6:	68db      	ldr	r3, [r3, #12]
 8002ac8:	f000 facc 	bl	8003064 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	699a      	ldr	r2, [r3, #24]
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	210c      	movs	r1, #12
 8002ad8:	438a      	bics	r2, r1
 8002ada:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	6999      	ldr	r1, [r3, #24]
 8002ae2:	68bb      	ldr	r3, [r7, #8]
 8002ae4:	689a      	ldr	r2, [r3, #8]
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	430a      	orrs	r2, r1
 8002aec:	619a      	str	r2, [r3, #24]
 8002aee:	e062      	b.n	8002bb6 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2b04      	cmp	r3, #4
 8002af4:	d11c      	bne.n	8002b30 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	6818      	ldr	r0, [r3, #0]
 8002afa:	68bb      	ldr	r3, [r7, #8]
 8002afc:	6819      	ldr	r1, [r3, #0]
 8002afe:	68bb      	ldr	r3, [r7, #8]
 8002b00:	685a      	ldr	r2, [r3, #4]
 8002b02:	68bb      	ldr	r3, [r7, #8]
 8002b04:	68db      	ldr	r3, [r3, #12]
 8002b06:	f000 fb2b 	bl	8003160 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	699a      	ldr	r2, [r3, #24]
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	492d      	ldr	r1, [pc, #180]	; (8002bcc <HAL_TIM_IC_ConfigChannel+0x144>)
 8002b16:	400a      	ands	r2, r1
 8002b18:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	6999      	ldr	r1, [r3, #24]
 8002b20:	68bb      	ldr	r3, [r7, #8]
 8002b22:	689b      	ldr	r3, [r3, #8]
 8002b24:	021a      	lsls	r2, r3, #8
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	430a      	orrs	r2, r1
 8002b2c:	619a      	str	r2, [r3, #24]
 8002b2e:	e042      	b.n	8002bb6 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2b08      	cmp	r3, #8
 8002b34:	d11b      	bne.n	8002b6e <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	6818      	ldr	r0, [r3, #0]
 8002b3a:	68bb      	ldr	r3, [r7, #8]
 8002b3c:	6819      	ldr	r1, [r3, #0]
 8002b3e:	68bb      	ldr	r3, [r7, #8]
 8002b40:	685a      	ldr	r2, [r3, #4]
 8002b42:	68bb      	ldr	r3, [r7, #8]
 8002b44:	68db      	ldr	r3, [r3, #12]
 8002b46:	f000 fb7f 	bl	8003248 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	69da      	ldr	r2, [r3, #28]
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	210c      	movs	r1, #12
 8002b56:	438a      	bics	r2, r1
 8002b58:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	69d9      	ldr	r1, [r3, #28]
 8002b60:	68bb      	ldr	r3, [r7, #8]
 8002b62:	689a      	ldr	r2, [r3, #8]
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	430a      	orrs	r2, r1
 8002b6a:	61da      	str	r2, [r3, #28]
 8002b6c:	e023      	b.n	8002bb6 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_4)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2b0c      	cmp	r3, #12
 8002b72:	d11c      	bne.n	8002bae <HAL_TIM_IC_ConfigChannel+0x126>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	6818      	ldr	r0, [r3, #0]
 8002b78:	68bb      	ldr	r3, [r7, #8]
 8002b7a:	6819      	ldr	r1, [r3, #0]
 8002b7c:	68bb      	ldr	r3, [r7, #8]
 8002b7e:	685a      	ldr	r2, [r3, #4]
 8002b80:	68bb      	ldr	r3, [r7, #8]
 8002b82:	68db      	ldr	r3, [r3, #12]
 8002b84:	f000 fba0 	bl	80032c8 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	69da      	ldr	r2, [r3, #28]
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	490e      	ldr	r1, [pc, #56]	; (8002bcc <HAL_TIM_IC_ConfigChannel+0x144>)
 8002b94:	400a      	ands	r2, r1
 8002b96:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	69d9      	ldr	r1, [r3, #28]
 8002b9e:	68bb      	ldr	r3, [r7, #8]
 8002ba0:	689b      	ldr	r3, [r3, #8]
 8002ba2:	021a      	lsls	r2, r3, #8
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	430a      	orrs	r2, r1
 8002baa:	61da      	str	r2, [r3, #28]
 8002bac:	e003      	b.n	8002bb6 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else
  {
    status = HAL_ERROR;
 8002bae:	2317      	movs	r3, #23
 8002bb0:	18fb      	adds	r3, r7, r3
 8002bb2:	2201      	movs	r2, #1
 8002bb4:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(htim);
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	2238      	movs	r2, #56	; 0x38
 8002bba:	2100      	movs	r1, #0
 8002bbc:	5499      	strb	r1, [r3, r2]

  return status;
 8002bbe:	2317      	movs	r3, #23
 8002bc0:	18fb      	adds	r3, r7, r3
 8002bc2:	781b      	ldrb	r3, [r3, #0]
}
 8002bc4:	0018      	movs	r0, r3
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	b006      	add	sp, #24
 8002bca:	bd80      	pop	{r7, pc}
 8002bcc:	fffff3ff 	.word	0xfffff3ff

08002bd0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b084      	sub	sp, #16
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
 8002bd8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002bda:	230f      	movs	r3, #15
 8002bdc:	18fb      	adds	r3, r7, r3
 8002bde:	2200      	movs	r2, #0
 8002be0:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2238      	movs	r2, #56	; 0x38
 8002be6:	5c9b      	ldrb	r3, [r3, r2]
 8002be8:	2b01      	cmp	r3, #1
 8002bea:	d101      	bne.n	8002bf0 <HAL_TIM_ConfigClockSource+0x20>
 8002bec:	2302      	movs	r3, #2
 8002bee:	e0bc      	b.n	8002d6a <HAL_TIM_ConfigClockSource+0x19a>
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2238      	movs	r2, #56	; 0x38
 8002bf4:	2101      	movs	r1, #1
 8002bf6:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2239      	movs	r2, #57	; 0x39
 8002bfc:	2102      	movs	r1, #2
 8002bfe:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	689b      	ldr	r3, [r3, #8]
 8002c06:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002c08:	68bb      	ldr	r3, [r7, #8]
 8002c0a:	2277      	movs	r2, #119	; 0x77
 8002c0c:	4393      	bics	r3, r2
 8002c0e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c10:	68bb      	ldr	r3, [r7, #8]
 8002c12:	4a58      	ldr	r2, [pc, #352]	; (8002d74 <HAL_TIM_ConfigClockSource+0x1a4>)
 8002c14:	4013      	ands	r3, r2
 8002c16:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	68ba      	ldr	r2, [r7, #8]
 8002c1e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	2280      	movs	r2, #128	; 0x80
 8002c26:	0192      	lsls	r2, r2, #6
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d040      	beq.n	8002cae <HAL_TIM_ConfigClockSource+0xde>
 8002c2c:	2280      	movs	r2, #128	; 0x80
 8002c2e:	0192      	lsls	r2, r2, #6
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d900      	bls.n	8002c36 <HAL_TIM_ConfigClockSource+0x66>
 8002c34:	e088      	b.n	8002d48 <HAL_TIM_ConfigClockSource+0x178>
 8002c36:	2280      	movs	r2, #128	; 0x80
 8002c38:	0152      	lsls	r2, r2, #5
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d100      	bne.n	8002c40 <HAL_TIM_ConfigClockSource+0x70>
 8002c3e:	e088      	b.n	8002d52 <HAL_TIM_ConfigClockSource+0x182>
 8002c40:	2280      	movs	r2, #128	; 0x80
 8002c42:	0152      	lsls	r2, r2, #5
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d900      	bls.n	8002c4a <HAL_TIM_ConfigClockSource+0x7a>
 8002c48:	e07e      	b.n	8002d48 <HAL_TIM_ConfigClockSource+0x178>
 8002c4a:	2b70      	cmp	r3, #112	; 0x70
 8002c4c:	d018      	beq.n	8002c80 <HAL_TIM_ConfigClockSource+0xb0>
 8002c4e:	d900      	bls.n	8002c52 <HAL_TIM_ConfigClockSource+0x82>
 8002c50:	e07a      	b.n	8002d48 <HAL_TIM_ConfigClockSource+0x178>
 8002c52:	2b60      	cmp	r3, #96	; 0x60
 8002c54:	d04f      	beq.n	8002cf6 <HAL_TIM_ConfigClockSource+0x126>
 8002c56:	d900      	bls.n	8002c5a <HAL_TIM_ConfigClockSource+0x8a>
 8002c58:	e076      	b.n	8002d48 <HAL_TIM_ConfigClockSource+0x178>
 8002c5a:	2b50      	cmp	r3, #80	; 0x50
 8002c5c:	d03b      	beq.n	8002cd6 <HAL_TIM_ConfigClockSource+0x106>
 8002c5e:	d900      	bls.n	8002c62 <HAL_TIM_ConfigClockSource+0x92>
 8002c60:	e072      	b.n	8002d48 <HAL_TIM_ConfigClockSource+0x178>
 8002c62:	2b40      	cmp	r3, #64	; 0x40
 8002c64:	d057      	beq.n	8002d16 <HAL_TIM_ConfigClockSource+0x146>
 8002c66:	d900      	bls.n	8002c6a <HAL_TIM_ConfigClockSource+0x9a>
 8002c68:	e06e      	b.n	8002d48 <HAL_TIM_ConfigClockSource+0x178>
 8002c6a:	2b30      	cmp	r3, #48	; 0x30
 8002c6c:	d063      	beq.n	8002d36 <HAL_TIM_ConfigClockSource+0x166>
 8002c6e:	d86b      	bhi.n	8002d48 <HAL_TIM_ConfigClockSource+0x178>
 8002c70:	2b20      	cmp	r3, #32
 8002c72:	d060      	beq.n	8002d36 <HAL_TIM_ConfigClockSource+0x166>
 8002c74:	d868      	bhi.n	8002d48 <HAL_TIM_ConfigClockSource+0x178>
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d05d      	beq.n	8002d36 <HAL_TIM_ConfigClockSource+0x166>
 8002c7a:	2b10      	cmp	r3, #16
 8002c7c:	d05b      	beq.n	8002d36 <HAL_TIM_ConfigClockSource+0x166>
 8002c7e:	e063      	b.n	8002d48 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6818      	ldr	r0, [r3, #0]
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	6899      	ldr	r1, [r3, #8]
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	685a      	ldr	r2, [r3, #4]
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	68db      	ldr	r3, [r3, #12]
 8002c90:	f000 fb7a 	bl	8003388 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	689b      	ldr	r3, [r3, #8]
 8002c9a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002c9c:	68bb      	ldr	r3, [r7, #8]
 8002c9e:	2277      	movs	r2, #119	; 0x77
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	68ba      	ldr	r2, [r7, #8]
 8002caa:	609a      	str	r2, [r3, #8]
      break;
 8002cac:	e052      	b.n	8002d54 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6818      	ldr	r0, [r3, #0]
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	6899      	ldr	r1, [r3, #8]
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	685a      	ldr	r2, [r3, #4]
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	68db      	ldr	r3, [r3, #12]
 8002cbe:	f000 fb63 	bl	8003388 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	689a      	ldr	r2, [r3, #8]
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	2180      	movs	r1, #128	; 0x80
 8002cce:	01c9      	lsls	r1, r1, #7
 8002cd0:	430a      	orrs	r2, r1
 8002cd2:	609a      	str	r2, [r3, #8]
      break;
 8002cd4:	e03e      	b.n	8002d54 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6818      	ldr	r0, [r3, #0]
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	6859      	ldr	r1, [r3, #4]
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	68db      	ldr	r3, [r3, #12]
 8002ce2:	001a      	movs	r2, r3
 8002ce4:	f000 fa0e 	bl	8003104 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	2150      	movs	r1, #80	; 0x50
 8002cee:	0018      	movs	r0, r3
 8002cf0:	f000 fb30 	bl	8003354 <TIM_ITRx_SetConfig>
      break;
 8002cf4:	e02e      	b.n	8002d54 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6818      	ldr	r0, [r3, #0]
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	6859      	ldr	r1, [r3, #4]
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	68db      	ldr	r3, [r3, #12]
 8002d02:	001a      	movs	r2, r3
 8002d04:	f000 fa6e 	bl	80031e4 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	2160      	movs	r1, #96	; 0x60
 8002d0e:	0018      	movs	r0, r3
 8002d10:	f000 fb20 	bl	8003354 <TIM_ITRx_SetConfig>
      break;
 8002d14:	e01e      	b.n	8002d54 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6818      	ldr	r0, [r3, #0]
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	6859      	ldr	r1, [r3, #4]
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	68db      	ldr	r3, [r3, #12]
 8002d22:	001a      	movs	r2, r3
 8002d24:	f000 f9ee 	bl	8003104 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	2140      	movs	r1, #64	; 0x40
 8002d2e:	0018      	movs	r0, r3
 8002d30:	f000 fb10 	bl	8003354 <TIM_ITRx_SetConfig>
      break;
 8002d34:	e00e      	b.n	8002d54 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681a      	ldr	r2, [r3, #0]
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	0019      	movs	r1, r3
 8002d40:	0010      	movs	r0, r2
 8002d42:	f000 fb07 	bl	8003354 <TIM_ITRx_SetConfig>
      break;
 8002d46:	e005      	b.n	8002d54 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8002d48:	230f      	movs	r3, #15
 8002d4a:	18fb      	adds	r3, r7, r3
 8002d4c:	2201      	movs	r2, #1
 8002d4e:	701a      	strb	r2, [r3, #0]
      break;
 8002d50:	e000      	b.n	8002d54 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8002d52:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2239      	movs	r2, #57	; 0x39
 8002d58:	2101      	movs	r1, #1
 8002d5a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2238      	movs	r2, #56	; 0x38
 8002d60:	2100      	movs	r1, #0
 8002d62:	5499      	strb	r1, [r3, r2]

  return status;
 8002d64:	230f      	movs	r3, #15
 8002d66:	18fb      	adds	r3, r7, r3
 8002d68:	781b      	ldrb	r3, [r3, #0]
}
 8002d6a:	0018      	movs	r0, r3
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	b004      	add	sp, #16
 8002d70:	bd80      	pop	{r7, pc}
 8002d72:	46c0      	nop			; (mov r8, r8)
 8002d74:	ffff00ff 	.word	0xffff00ff

08002d78 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b082      	sub	sp, #8
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
 8002d80:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2238      	movs	r2, #56	; 0x38
 8002d86:	5c9b      	ldrb	r3, [r3, r2]
 8002d88:	2b01      	cmp	r3, #1
 8002d8a:	d101      	bne.n	8002d90 <HAL_TIM_SlaveConfigSynchro+0x18>
 8002d8c:	2302      	movs	r3, #2
 8002d8e:	e032      	b.n	8002df6 <HAL_TIM_SlaveConfigSynchro+0x7e>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2238      	movs	r2, #56	; 0x38
 8002d94:	2101      	movs	r1, #1
 8002d96:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2239      	movs	r2, #57	; 0x39
 8002d9c:	2102      	movs	r1, #2
 8002d9e:	5499      	strb	r1, [r3, r2]

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8002da0:	683a      	ldr	r2, [r7, #0]
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	0011      	movs	r1, r2
 8002da6:	0018      	movs	r0, r3
 8002da8:	f000 f8ca 	bl	8002f40 <TIM_SlaveTimer_SetConfig>
 8002dac:	1e03      	subs	r3, r0, #0
 8002dae:	d009      	beq.n	8002dc4 <HAL_TIM_SlaveConfigSynchro+0x4c>
  {
    htim->State = HAL_TIM_STATE_READY;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2239      	movs	r2, #57	; 0x39
 8002db4:	2101      	movs	r1, #1
 8002db6:	5499      	strb	r1, [r3, r2]
    __HAL_UNLOCK(htim);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2238      	movs	r2, #56	; 0x38
 8002dbc:	2100      	movs	r1, #0
 8002dbe:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	e018      	b.n	8002df6 <HAL_TIM_SlaveConfigSynchro+0x7e>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	68da      	ldr	r2, [r3, #12]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	2140      	movs	r1, #64	; 0x40
 8002dd0:	438a      	bics	r2, r1
 8002dd2:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	68da      	ldr	r2, [r3, #12]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4908      	ldr	r1, [pc, #32]	; (8002e00 <HAL_TIM_SlaveConfigSynchro+0x88>)
 8002de0:	400a      	ands	r2, r1
 8002de2:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2239      	movs	r2, #57	; 0x39
 8002de8:	2101      	movs	r1, #1
 8002dea:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2238      	movs	r2, #56	; 0x38
 8002df0:	2100      	movs	r1, #0
 8002df2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002df4:	2300      	movs	r3, #0
}
 8002df6:	0018      	movs	r0, r3
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	b002      	add	sp, #8
 8002dfc:	bd80      	pop	{r7, pc}
 8002dfe:	46c0      	nop			; (mov r8, r8)
 8002e00:	ffffbfff 	.word	0xffffbfff

08002e04 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b084      	sub	sp, #16
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
 8002e0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8002e0e:	2300      	movs	r3, #0
 8002e10:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	2b0c      	cmp	r3, #12
 8002e16:	d01e      	beq.n	8002e56 <HAL_TIM_ReadCapturedValue+0x52>
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	2b0c      	cmp	r3, #12
 8002e1c:	d820      	bhi.n	8002e60 <HAL_TIM_ReadCapturedValue+0x5c>
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	2b08      	cmp	r3, #8
 8002e22:	d013      	beq.n	8002e4c <HAL_TIM_ReadCapturedValue+0x48>
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	2b08      	cmp	r3, #8
 8002e28:	d81a      	bhi.n	8002e60 <HAL_TIM_ReadCapturedValue+0x5c>
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d003      	beq.n	8002e38 <HAL_TIM_ReadCapturedValue+0x34>
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	2b04      	cmp	r3, #4
 8002e34:	d005      	beq.n	8002e42 <HAL_TIM_ReadCapturedValue+0x3e>

      break;
    }

    default:
      break;
 8002e36:	e013      	b.n	8002e60 <HAL_TIM_ReadCapturedValue+0x5c>
      tmpreg =  htim->Instance->CCR1;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e3e:	60fb      	str	r3, [r7, #12]
      break;
 8002e40:	e00f      	b.n	8002e62 <HAL_TIM_ReadCapturedValue+0x5e>
      tmpreg =   htim->Instance->CCR2;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e48:	60fb      	str	r3, [r7, #12]
      break;
 8002e4a:	e00a      	b.n	8002e62 <HAL_TIM_ReadCapturedValue+0x5e>
      tmpreg =   htim->Instance->CCR3;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e52:	60fb      	str	r3, [r7, #12]
      break;
 8002e54:	e005      	b.n	8002e62 <HAL_TIM_ReadCapturedValue+0x5e>
      tmpreg =   htim->Instance->CCR4;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e5c:	60fb      	str	r3, [r7, #12]
      break;
 8002e5e:	e000      	b.n	8002e62 <HAL_TIM_ReadCapturedValue+0x5e>
      break;
 8002e60:	46c0      	nop			; (mov r8, r8)
  }

  return tmpreg;
 8002e62:	68fb      	ldr	r3, [r7, #12]
}
 8002e64:	0018      	movs	r0, r3
 8002e66:	46bd      	mov	sp, r7
 8002e68:	b004      	add	sp, #16
 8002e6a:	bd80      	pop	{r7, pc}

08002e6c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b082      	sub	sp, #8
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002e74:	46c0      	nop			; (mov r8, r8)
 8002e76:	46bd      	mov	sp, r7
 8002e78:	b002      	add	sp, #8
 8002e7a:	bd80      	pop	{r7, pc}

08002e7c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b082      	sub	sp, #8
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002e84:	46c0      	nop			; (mov r8, r8)
 8002e86:	46bd      	mov	sp, r7
 8002e88:	b002      	add	sp, #8
 8002e8a:	bd80      	pop	{r7, pc}

08002e8c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b082      	sub	sp, #8
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002e94:	46c0      	nop			; (mov r8, r8)
 8002e96:	46bd      	mov	sp, r7
 8002e98:	b002      	add	sp, #8
 8002e9a:	bd80      	pop	{r7, pc}

08002e9c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b082      	sub	sp, #8
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002ea4:	46c0      	nop			; (mov r8, r8)
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	b002      	add	sp, #8
 8002eaa:	bd80      	pop	{r7, pc}

08002eac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b084      	sub	sp, #16
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
 8002eb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ebc:	687a      	ldr	r2, [r7, #4]
 8002ebe:	2380      	movs	r3, #128	; 0x80
 8002ec0:	05db      	lsls	r3, r3, #23
 8002ec2:	429a      	cmp	r2, r3
 8002ec4:	d003      	beq.n	8002ece <TIM_Base_SetConfig+0x22>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	4a1b      	ldr	r2, [pc, #108]	; (8002f38 <TIM_Base_SetConfig+0x8c>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d108      	bne.n	8002ee0 <TIM_Base_SetConfig+0x34>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	2270      	movs	r2, #112	; 0x70
 8002ed2:	4393      	bics	r3, r2
 8002ed4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	68fa      	ldr	r2, [r7, #12]
 8002edc:	4313      	orrs	r3, r2
 8002ede:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002ee0:	687a      	ldr	r2, [r7, #4]
 8002ee2:	2380      	movs	r3, #128	; 0x80
 8002ee4:	05db      	lsls	r3, r3, #23
 8002ee6:	429a      	cmp	r2, r3
 8002ee8:	d003      	beq.n	8002ef2 <TIM_Base_SetConfig+0x46>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	4a12      	ldr	r2, [pc, #72]	; (8002f38 <TIM_Base_SetConfig+0x8c>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d108      	bne.n	8002f04 <TIM_Base_SetConfig+0x58>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	4a11      	ldr	r2, [pc, #68]	; (8002f3c <TIM_Base_SetConfig+0x90>)
 8002ef6:	4013      	ands	r3, r2
 8002ef8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	68db      	ldr	r3, [r3, #12]
 8002efe:	68fa      	ldr	r2, [r7, #12]
 8002f00:	4313      	orrs	r3, r2
 8002f02:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	2280      	movs	r2, #128	; 0x80
 8002f08:	4393      	bics	r3, r2
 8002f0a:	001a      	movs	r2, r3
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	691b      	ldr	r3, [r3, #16]
 8002f10:	4313      	orrs	r3, r2
 8002f12:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	68fa      	ldr	r2, [r7, #12]
 8002f18:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	689a      	ldr	r2, [r3, #8]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	681a      	ldr	r2, [r3, #0]
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2201      	movs	r2, #1
 8002f2e:	615a      	str	r2, [r3, #20]
}
 8002f30:	46c0      	nop			; (mov r8, r8)
 8002f32:	46bd      	mov	sp, r7
 8002f34:	b004      	add	sp, #16
 8002f36:	bd80      	pop	{r7, pc}
 8002f38:	40010800 	.word	0x40010800
 8002f3c:	fffffcff 	.word	0xfffffcff

08002f40 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b086      	sub	sp, #24
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
 8002f48:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002f4a:	2317      	movs	r3, #23
 8002f4c:	18fb      	adds	r3, r7, r3
 8002f4e:	2200      	movs	r2, #0
 8002f50:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	689b      	ldr	r3, [r3, #8]
 8002f58:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002f5a:	693b      	ldr	r3, [r7, #16]
 8002f5c:	2270      	movs	r2, #112	; 0x70
 8002f5e:	4393      	bics	r3, r2
 8002f60:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	693a      	ldr	r2, [r7, #16]
 8002f68:	4313      	orrs	r3, r2
 8002f6a:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8002f6c:	693b      	ldr	r3, [r7, #16]
 8002f6e:	2207      	movs	r2, #7
 8002f70:	4393      	bics	r3, r2
 8002f72:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	693a      	ldr	r2, [r7, #16]
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	693a      	ldr	r2, [r7, #16]
 8002f84:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	2b70      	cmp	r3, #112	; 0x70
 8002f8c:	d015      	beq.n	8002fba <TIM_SlaveTimer_SetConfig+0x7a>
 8002f8e:	d900      	bls.n	8002f92 <TIM_SlaveTimer_SetConfig+0x52>
 8002f90:	e05b      	b.n	800304a <TIM_SlaveTimer_SetConfig+0x10a>
 8002f92:	2b60      	cmp	r3, #96	; 0x60
 8002f94:	d04f      	beq.n	8003036 <TIM_SlaveTimer_SetConfig+0xf6>
 8002f96:	d858      	bhi.n	800304a <TIM_SlaveTimer_SetConfig+0x10a>
 8002f98:	2b50      	cmp	r3, #80	; 0x50
 8002f9a:	d042      	beq.n	8003022 <TIM_SlaveTimer_SetConfig+0xe2>
 8002f9c:	d855      	bhi.n	800304a <TIM_SlaveTimer_SetConfig+0x10a>
 8002f9e:	2b40      	cmp	r3, #64	; 0x40
 8002fa0:	d016      	beq.n	8002fd0 <TIM_SlaveTimer_SetConfig+0x90>
 8002fa2:	d852      	bhi.n	800304a <TIM_SlaveTimer_SetConfig+0x10a>
 8002fa4:	2b30      	cmp	r3, #48	; 0x30
 8002fa6:	d055      	beq.n	8003054 <TIM_SlaveTimer_SetConfig+0x114>
 8002fa8:	d84f      	bhi.n	800304a <TIM_SlaveTimer_SetConfig+0x10a>
 8002faa:	2b20      	cmp	r3, #32
 8002fac:	d052      	beq.n	8003054 <TIM_SlaveTimer_SetConfig+0x114>
 8002fae:	d84c      	bhi.n	800304a <TIM_SlaveTimer_SetConfig+0x10a>
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d04f      	beq.n	8003054 <TIM_SlaveTimer_SetConfig+0x114>
 8002fb4:	2b10      	cmp	r3, #16
 8002fb6:	d04d      	beq.n	8003054 <TIM_SlaveTimer_SetConfig+0x114>
 8002fb8:	e047      	b.n	800304a <TIM_SlaveTimer_SetConfig+0x10a>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6818      	ldr	r0, [r3, #0]
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	68d9      	ldr	r1, [r3, #12]
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	689a      	ldr	r2, [r3, #8]
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	691b      	ldr	r3, [r3, #16]
 8002fca:	f000 f9dd 	bl	8003388 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 8002fce:	e042      	b.n	8003056 <TIM_SlaveTimer_SetConfig+0x116>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	2b05      	cmp	r3, #5
 8002fd6:	d101      	bne.n	8002fdc <TIM_SlaveTimer_SetConfig+0x9c>
      {
        return HAL_ERROR;
 8002fd8:	2301      	movs	r3, #1
 8002fda:	e03f      	b.n	800305c <TIM_SlaveTimer_SetConfig+0x11c>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	6a1b      	ldr	r3, [r3, #32]
 8002fe2:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	6a1a      	ldr	r2, [r3, #32]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	2101      	movs	r1, #1
 8002ff0:	438a      	bics	r2, r1
 8002ff2:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	699b      	ldr	r3, [r3, #24]
 8002ffa:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002ffc:	68bb      	ldr	r3, [r7, #8]
 8002ffe:	22f0      	movs	r2, #240	; 0xf0
 8003000:	4393      	bics	r3, r2
 8003002:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	691b      	ldr	r3, [r3, #16]
 8003008:	011b      	lsls	r3, r3, #4
 800300a:	68ba      	ldr	r2, [r7, #8]
 800300c:	4313      	orrs	r3, r2
 800300e:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	68ba      	ldr	r2, [r7, #8]
 8003016:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	68fa      	ldr	r2, [r7, #12]
 800301e:	621a      	str	r2, [r3, #32]
      break;
 8003020:	e019      	b.n	8003056 <TIM_SlaveTimer_SetConfig+0x116>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6818      	ldr	r0, [r3, #0]
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	6899      	ldr	r1, [r3, #8]
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	691b      	ldr	r3, [r3, #16]
 800302e:	001a      	movs	r2, r3
 8003030:	f000 f868 	bl	8003104 <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8003034:	e00f      	b.n	8003056 <TIM_SlaveTimer_SetConfig+0x116>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6818      	ldr	r0, [r3, #0]
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	6899      	ldr	r1, [r3, #8]
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	691b      	ldr	r3, [r3, #16]
 8003042:	001a      	movs	r2, r3
 8003044:	f000 f8ce 	bl	80031e4 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8003048:	e005      	b.n	8003056 <TIM_SlaveTimer_SetConfig+0x116>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 800304a:	2317      	movs	r3, #23
 800304c:	18fb      	adds	r3, r7, r3
 800304e:	2201      	movs	r2, #1
 8003050:	701a      	strb	r2, [r3, #0]
      break;
 8003052:	e000      	b.n	8003056 <TIM_SlaveTimer_SetConfig+0x116>
      break;
 8003054:	46c0      	nop			; (mov r8, r8)
  }

  return status;
 8003056:	2317      	movs	r3, #23
 8003058:	18fb      	adds	r3, r7, r3
 800305a:	781b      	ldrb	r3, [r3, #0]
}
 800305c:	0018      	movs	r0, r3
 800305e:	46bd      	mov	sp, r7
 8003060:	b006      	add	sp, #24
 8003062:	bd80      	pop	{r7, pc}

08003064 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b086      	sub	sp, #24
 8003068:	af00      	add	r7, sp, #0
 800306a:	60f8      	str	r0, [r7, #12]
 800306c:	60b9      	str	r1, [r7, #8]
 800306e:	607a      	str	r2, [r7, #4]
 8003070:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	6a1b      	ldr	r3, [r3, #32]
 8003076:	2201      	movs	r2, #1
 8003078:	4393      	bics	r3, r2
 800307a:	001a      	movs	r2, r3
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	699b      	ldr	r3, [r3, #24]
 8003084:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	6a1b      	ldr	r3, [r3, #32]
 800308a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800308c:	68fa      	ldr	r2, [r7, #12]
 800308e:	2380      	movs	r3, #128	; 0x80
 8003090:	05db      	lsls	r3, r3, #23
 8003092:	429a      	cmp	r2, r3
 8003094:	d003      	beq.n	800309e <TIM_TI1_SetConfig+0x3a>
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	4a19      	ldr	r2, [pc, #100]	; (8003100 <TIM_TI1_SetConfig+0x9c>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d101      	bne.n	80030a2 <TIM_TI1_SetConfig+0x3e>
 800309e:	2301      	movs	r3, #1
 80030a0:	e000      	b.n	80030a4 <TIM_TI1_SetConfig+0x40>
 80030a2:	2300      	movs	r3, #0
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d008      	beq.n	80030ba <TIM_TI1_SetConfig+0x56>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80030a8:	697b      	ldr	r3, [r7, #20]
 80030aa:	2203      	movs	r2, #3
 80030ac:	4393      	bics	r3, r2
 80030ae:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80030b0:	697a      	ldr	r2, [r7, #20]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	4313      	orrs	r3, r2
 80030b6:	617b      	str	r3, [r7, #20]
 80030b8:	e003      	b.n	80030c2 <TIM_TI1_SetConfig+0x5e>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80030ba:	697b      	ldr	r3, [r7, #20]
 80030bc:	2201      	movs	r2, #1
 80030be:	4313      	orrs	r3, r2
 80030c0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80030c2:	697b      	ldr	r3, [r7, #20]
 80030c4:	22f0      	movs	r2, #240	; 0xf0
 80030c6:	4393      	bics	r3, r2
 80030c8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	011b      	lsls	r3, r3, #4
 80030ce:	22ff      	movs	r2, #255	; 0xff
 80030d0:	4013      	ands	r3, r2
 80030d2:	697a      	ldr	r2, [r7, #20]
 80030d4:	4313      	orrs	r3, r2
 80030d6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80030d8:	693b      	ldr	r3, [r7, #16]
 80030da:	220a      	movs	r2, #10
 80030dc:	4393      	bics	r3, r2
 80030de:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80030e0:	68bb      	ldr	r3, [r7, #8]
 80030e2:	220a      	movs	r2, #10
 80030e4:	4013      	ands	r3, r2
 80030e6:	693a      	ldr	r2, [r7, #16]
 80030e8:	4313      	orrs	r3, r2
 80030ea:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	697a      	ldr	r2, [r7, #20]
 80030f0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	693a      	ldr	r2, [r7, #16]
 80030f6:	621a      	str	r2, [r3, #32]
}
 80030f8:	46c0      	nop			; (mov r8, r8)
 80030fa:	46bd      	mov	sp, r7
 80030fc:	b006      	add	sp, #24
 80030fe:	bd80      	pop	{r7, pc}
 8003100:	40010800 	.word	0x40010800

08003104 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b086      	sub	sp, #24
 8003108:	af00      	add	r7, sp, #0
 800310a:	60f8      	str	r0, [r7, #12]
 800310c:	60b9      	str	r1, [r7, #8]
 800310e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	6a1b      	ldr	r3, [r3, #32]
 8003114:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	6a1b      	ldr	r3, [r3, #32]
 800311a:	2201      	movs	r2, #1
 800311c:	4393      	bics	r3, r2
 800311e:	001a      	movs	r2, r3
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	699b      	ldr	r3, [r3, #24]
 8003128:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800312a:	693b      	ldr	r3, [r7, #16]
 800312c:	22f0      	movs	r2, #240	; 0xf0
 800312e:	4393      	bics	r3, r2
 8003130:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	011b      	lsls	r3, r3, #4
 8003136:	693a      	ldr	r2, [r7, #16]
 8003138:	4313      	orrs	r3, r2
 800313a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800313c:	697b      	ldr	r3, [r7, #20]
 800313e:	220a      	movs	r2, #10
 8003140:	4393      	bics	r3, r2
 8003142:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003144:	697a      	ldr	r2, [r7, #20]
 8003146:	68bb      	ldr	r3, [r7, #8]
 8003148:	4313      	orrs	r3, r2
 800314a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	693a      	ldr	r2, [r7, #16]
 8003150:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	697a      	ldr	r2, [r7, #20]
 8003156:	621a      	str	r2, [r3, #32]
}
 8003158:	46c0      	nop			; (mov r8, r8)
 800315a:	46bd      	mov	sp, r7
 800315c:	b006      	add	sp, #24
 800315e:	bd80      	pop	{r7, pc}

08003160 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b086      	sub	sp, #24
 8003164:	af00      	add	r7, sp, #0
 8003166:	60f8      	str	r0, [r7, #12]
 8003168:	60b9      	str	r1, [r7, #8]
 800316a:	607a      	str	r2, [r7, #4]
 800316c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	6a1b      	ldr	r3, [r3, #32]
 8003172:	2210      	movs	r2, #16
 8003174:	4393      	bics	r3, r2
 8003176:	001a      	movs	r2, r3
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	699b      	ldr	r3, [r3, #24]
 8003180:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	6a1b      	ldr	r3, [r3, #32]
 8003186:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8003188:	697b      	ldr	r3, [r7, #20]
 800318a:	4a14      	ldr	r2, [pc, #80]	; (80031dc <TIM_TI2_SetConfig+0x7c>)
 800318c:	4013      	ands	r3, r2
 800318e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	021b      	lsls	r3, r3, #8
 8003194:	697a      	ldr	r2, [r7, #20]
 8003196:	4313      	orrs	r3, r2
 8003198:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800319a:	697b      	ldr	r3, [r7, #20]
 800319c:	4a10      	ldr	r2, [pc, #64]	; (80031e0 <TIM_TI2_SetConfig+0x80>)
 800319e:	4013      	ands	r3, r2
 80031a0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	031b      	lsls	r3, r3, #12
 80031a6:	041b      	lsls	r3, r3, #16
 80031a8:	0c1b      	lsrs	r3, r3, #16
 80031aa:	697a      	ldr	r2, [r7, #20]
 80031ac:	4313      	orrs	r3, r2
 80031ae:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80031b0:	693b      	ldr	r3, [r7, #16]
 80031b2:	22a0      	movs	r2, #160	; 0xa0
 80031b4:	4393      	bics	r3, r2
 80031b6:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80031b8:	68bb      	ldr	r3, [r7, #8]
 80031ba:	011b      	lsls	r3, r3, #4
 80031bc:	22a0      	movs	r2, #160	; 0xa0
 80031be:	4013      	ands	r3, r2
 80031c0:	693a      	ldr	r2, [r7, #16]
 80031c2:	4313      	orrs	r3, r2
 80031c4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	697a      	ldr	r2, [r7, #20]
 80031ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	693a      	ldr	r2, [r7, #16]
 80031d0:	621a      	str	r2, [r3, #32]
}
 80031d2:	46c0      	nop			; (mov r8, r8)
 80031d4:	46bd      	mov	sp, r7
 80031d6:	b006      	add	sp, #24
 80031d8:	bd80      	pop	{r7, pc}
 80031da:	46c0      	nop			; (mov r8, r8)
 80031dc:	fffffcff 	.word	0xfffffcff
 80031e0:	ffff0fff 	.word	0xffff0fff

080031e4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b086      	sub	sp, #24
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	60f8      	str	r0, [r7, #12]
 80031ec:	60b9      	str	r1, [r7, #8]
 80031ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	6a1b      	ldr	r3, [r3, #32]
 80031f4:	2210      	movs	r2, #16
 80031f6:	4393      	bics	r3, r2
 80031f8:	001a      	movs	r2, r3
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	699b      	ldr	r3, [r3, #24]
 8003202:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	6a1b      	ldr	r3, [r3, #32]
 8003208:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800320a:	697b      	ldr	r3, [r7, #20]
 800320c:	4a0d      	ldr	r2, [pc, #52]	; (8003244 <TIM_TI2_ConfigInputStage+0x60>)
 800320e:	4013      	ands	r3, r2
 8003210:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	031b      	lsls	r3, r3, #12
 8003216:	697a      	ldr	r2, [r7, #20]
 8003218:	4313      	orrs	r3, r2
 800321a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800321c:	693b      	ldr	r3, [r7, #16]
 800321e:	22a0      	movs	r2, #160	; 0xa0
 8003220:	4393      	bics	r3, r2
 8003222:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003224:	68bb      	ldr	r3, [r7, #8]
 8003226:	011b      	lsls	r3, r3, #4
 8003228:	693a      	ldr	r2, [r7, #16]
 800322a:	4313      	orrs	r3, r2
 800322c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	697a      	ldr	r2, [r7, #20]
 8003232:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	693a      	ldr	r2, [r7, #16]
 8003238:	621a      	str	r2, [r3, #32]
}
 800323a:	46c0      	nop			; (mov r8, r8)
 800323c:	46bd      	mov	sp, r7
 800323e:	b006      	add	sp, #24
 8003240:	bd80      	pop	{r7, pc}
 8003242:	46c0      	nop			; (mov r8, r8)
 8003244:	ffff0fff 	.word	0xffff0fff

08003248 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b086      	sub	sp, #24
 800324c:	af00      	add	r7, sp, #0
 800324e:	60f8      	str	r0, [r7, #12]
 8003250:	60b9      	str	r1, [r7, #8]
 8003252:	607a      	str	r2, [r7, #4]
 8003254:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	6a1b      	ldr	r3, [r3, #32]
 800325a:	4a19      	ldr	r2, [pc, #100]	; (80032c0 <TIM_TI3_SetConfig+0x78>)
 800325c:	401a      	ands	r2, r3
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	69db      	ldr	r3, [r3, #28]
 8003266:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	6a1b      	ldr	r3, [r3, #32]
 800326c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800326e:	697b      	ldr	r3, [r7, #20]
 8003270:	2203      	movs	r2, #3
 8003272:	4393      	bics	r3, r2
 8003274:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8003276:	697a      	ldr	r2, [r7, #20]
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	4313      	orrs	r3, r2
 800327c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800327e:	697b      	ldr	r3, [r7, #20]
 8003280:	22f0      	movs	r2, #240	; 0xf0
 8003282:	4393      	bics	r3, r2
 8003284:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	011b      	lsls	r3, r3, #4
 800328a:	22ff      	movs	r2, #255	; 0xff
 800328c:	4013      	ands	r3, r2
 800328e:	697a      	ldr	r2, [r7, #20]
 8003290:	4313      	orrs	r3, r2
 8003292:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8003294:	693b      	ldr	r3, [r7, #16]
 8003296:	4a0b      	ldr	r2, [pc, #44]	; (80032c4 <TIM_TI3_SetConfig+0x7c>)
 8003298:	4013      	ands	r3, r2
 800329a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800329c:	68bb      	ldr	r3, [r7, #8]
 800329e:	021a      	lsls	r2, r3, #8
 80032a0:	23a0      	movs	r3, #160	; 0xa0
 80032a2:	011b      	lsls	r3, r3, #4
 80032a4:	4013      	ands	r3, r2
 80032a6:	693a      	ldr	r2, [r7, #16]
 80032a8:	4313      	orrs	r3, r2
 80032aa:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	697a      	ldr	r2, [r7, #20]
 80032b0:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	693a      	ldr	r2, [r7, #16]
 80032b6:	621a      	str	r2, [r3, #32]
}
 80032b8:	46c0      	nop			; (mov r8, r8)
 80032ba:	46bd      	mov	sp, r7
 80032bc:	b006      	add	sp, #24
 80032be:	bd80      	pop	{r7, pc}
 80032c0:	fffffeff 	.word	0xfffffeff
 80032c4:	fffff5ff 	.word	0xfffff5ff

080032c8 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b086      	sub	sp, #24
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	60f8      	str	r0, [r7, #12]
 80032d0:	60b9      	str	r1, [r7, #8]
 80032d2:	607a      	str	r2, [r7, #4]
 80032d4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	6a1b      	ldr	r3, [r3, #32]
 80032da:	4a1a      	ldr	r2, [pc, #104]	; (8003344 <TIM_TI4_SetConfig+0x7c>)
 80032dc:	401a      	ands	r2, r3
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	69db      	ldr	r3, [r3, #28]
 80032e6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	6a1b      	ldr	r3, [r3, #32]
 80032ec:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80032ee:	697b      	ldr	r3, [r7, #20]
 80032f0:	4a15      	ldr	r2, [pc, #84]	; (8003348 <TIM_TI4_SetConfig+0x80>)
 80032f2:	4013      	ands	r3, r2
 80032f4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	021b      	lsls	r3, r3, #8
 80032fa:	697a      	ldr	r2, [r7, #20]
 80032fc:	4313      	orrs	r3, r2
 80032fe:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003300:	697b      	ldr	r3, [r7, #20]
 8003302:	4a12      	ldr	r2, [pc, #72]	; (800334c <TIM_TI4_SetConfig+0x84>)
 8003304:	4013      	ands	r3, r2
 8003306:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	031b      	lsls	r3, r3, #12
 800330c:	041b      	lsls	r3, r3, #16
 800330e:	0c1b      	lsrs	r3, r3, #16
 8003310:	697a      	ldr	r2, [r7, #20]
 8003312:	4313      	orrs	r3, r2
 8003314:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8003316:	693b      	ldr	r3, [r7, #16]
 8003318:	4a0d      	ldr	r2, [pc, #52]	; (8003350 <TIM_TI4_SetConfig+0x88>)
 800331a:	4013      	ands	r3, r2
 800331c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800331e:	68bb      	ldr	r3, [r7, #8]
 8003320:	031a      	lsls	r2, r3, #12
 8003322:	23a0      	movs	r3, #160	; 0xa0
 8003324:	021b      	lsls	r3, r3, #8
 8003326:	4013      	ands	r3, r2
 8003328:	693a      	ldr	r2, [r7, #16]
 800332a:	4313      	orrs	r3, r2
 800332c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	697a      	ldr	r2, [r7, #20]
 8003332:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	693a      	ldr	r2, [r7, #16]
 8003338:	621a      	str	r2, [r3, #32]
}
 800333a:	46c0      	nop			; (mov r8, r8)
 800333c:	46bd      	mov	sp, r7
 800333e:	b006      	add	sp, #24
 8003340:	bd80      	pop	{r7, pc}
 8003342:	46c0      	nop			; (mov r8, r8)
 8003344:	ffffefff 	.word	0xffffefff
 8003348:	fffffcff 	.word	0xfffffcff
 800334c:	ffff0fff 	.word	0xffff0fff
 8003350:	ffff5fff 	.word	0xffff5fff

08003354 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b084      	sub	sp, #16
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
 800335c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	689b      	ldr	r3, [r3, #8]
 8003362:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	2270      	movs	r2, #112	; 0x70
 8003368:	4393      	bics	r3, r2
 800336a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800336c:	683a      	ldr	r2, [r7, #0]
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	4313      	orrs	r3, r2
 8003372:	2207      	movs	r2, #7
 8003374:	4313      	orrs	r3, r2
 8003376:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	68fa      	ldr	r2, [r7, #12]
 800337c:	609a      	str	r2, [r3, #8]
}
 800337e:	46c0      	nop			; (mov r8, r8)
 8003380:	46bd      	mov	sp, r7
 8003382:	b004      	add	sp, #16
 8003384:	bd80      	pop	{r7, pc}
	...

08003388 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b086      	sub	sp, #24
 800338c:	af00      	add	r7, sp, #0
 800338e:	60f8      	str	r0, [r7, #12]
 8003390:	60b9      	str	r1, [r7, #8]
 8003392:	607a      	str	r2, [r7, #4]
 8003394:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	689b      	ldr	r3, [r3, #8]
 800339a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800339c:	697b      	ldr	r3, [r7, #20]
 800339e:	4a09      	ldr	r2, [pc, #36]	; (80033c4 <TIM_ETR_SetConfig+0x3c>)
 80033a0:	4013      	ands	r3, r2
 80033a2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	021a      	lsls	r2, r3, #8
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	431a      	orrs	r2, r3
 80033ac:	68bb      	ldr	r3, [r7, #8]
 80033ae:	4313      	orrs	r3, r2
 80033b0:	697a      	ldr	r2, [r7, #20]
 80033b2:	4313      	orrs	r3, r2
 80033b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	697a      	ldr	r2, [r7, #20]
 80033ba:	609a      	str	r2, [r3, #8]
}
 80033bc:	46c0      	nop			; (mov r8, r8)
 80033be:	46bd      	mov	sp, r7
 80033c0:	b006      	add	sp, #24
 80033c2:	bd80      	pop	{r7, pc}
 80033c4:	ffff00ff 	.word	0xffff00ff

080033c8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b086      	sub	sp, #24
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	60f8      	str	r0, [r7, #12]
 80033d0:	60b9      	str	r1, [r7, #8]
 80033d2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80033d4:	68bb      	ldr	r3, [r7, #8]
 80033d6:	221f      	movs	r2, #31
 80033d8:	4013      	ands	r3, r2
 80033da:	2201      	movs	r2, #1
 80033dc:	409a      	lsls	r2, r3
 80033de:	0013      	movs	r3, r2
 80033e0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	6a1b      	ldr	r3, [r3, #32]
 80033e6:	697a      	ldr	r2, [r7, #20]
 80033e8:	43d2      	mvns	r2, r2
 80033ea:	401a      	ands	r2, r3
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	6a1a      	ldr	r2, [r3, #32]
 80033f4:	68bb      	ldr	r3, [r7, #8]
 80033f6:	211f      	movs	r1, #31
 80033f8:	400b      	ands	r3, r1
 80033fa:	6879      	ldr	r1, [r7, #4]
 80033fc:	4099      	lsls	r1, r3
 80033fe:	000b      	movs	r3, r1
 8003400:	431a      	orrs	r2, r3
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	621a      	str	r2, [r3, #32]
}
 8003406:	46c0      	nop			; (mov r8, r8)
 8003408:	46bd      	mov	sp, r7
 800340a:	b006      	add	sp, #24
 800340c:	bd80      	pop	{r7, pc}
	...

08003410 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b084      	sub	sp, #16
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
 8003418:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2238      	movs	r2, #56	; 0x38
 800341e:	5c9b      	ldrb	r3, [r3, r2]
 8003420:	2b01      	cmp	r3, #1
 8003422:	d101      	bne.n	8003428 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003424:	2302      	movs	r3, #2
 8003426:	e03d      	b.n	80034a4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2238      	movs	r2, #56	; 0x38
 800342c:	2101      	movs	r1, #1
 800342e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2239      	movs	r2, #57	; 0x39
 8003434:	2102      	movs	r1, #2
 8003436:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	685b      	ldr	r3, [r3, #4]
 800343e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	689b      	ldr	r3, [r3, #8]
 8003446:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	2270      	movs	r2, #112	; 0x70
 800344c:	4393      	bics	r3, r2
 800344e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	68fa      	ldr	r2, [r7, #12]
 8003456:	4313      	orrs	r3, r2
 8003458:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	68fa      	ldr	r2, [r7, #12]
 8003460:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681a      	ldr	r2, [r3, #0]
 8003466:	2380      	movs	r3, #128	; 0x80
 8003468:	05db      	lsls	r3, r3, #23
 800346a:	429a      	cmp	r2, r3
 800346c:	d004      	beq.n	8003478 <HAL_TIMEx_MasterConfigSynchronization+0x68>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4a0e      	ldr	r2, [pc, #56]	; (80034ac <HAL_TIMEx_MasterConfigSynchronization+0x9c>)
 8003474:	4293      	cmp	r3, r2
 8003476:	d10c      	bne.n	8003492 <HAL_TIMEx_MasterConfigSynchronization+0x82>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003478:	68bb      	ldr	r3, [r7, #8]
 800347a:	2280      	movs	r2, #128	; 0x80
 800347c:	4393      	bics	r3, r2
 800347e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	68ba      	ldr	r2, [r7, #8]
 8003486:	4313      	orrs	r3, r2
 8003488:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	68ba      	ldr	r2, [r7, #8]
 8003490:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2239      	movs	r2, #57	; 0x39
 8003496:	2101      	movs	r1, #1
 8003498:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2238      	movs	r2, #56	; 0x38
 800349e:	2100      	movs	r1, #0
 80034a0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80034a2:	2300      	movs	r3, #0
}
 80034a4:	0018      	movs	r0, r3
 80034a6:	46bd      	mov	sp, r7
 80034a8:	b004      	add	sp, #16
 80034aa:	bd80      	pop	{r7, pc}
 80034ac:	40010800 	.word	0x40010800

080034b0 <__libc_init_array>:
 80034b0:	b570      	push	{r4, r5, r6, lr}
 80034b2:	2600      	movs	r6, #0
 80034b4:	4d0c      	ldr	r5, [pc, #48]	; (80034e8 <__libc_init_array+0x38>)
 80034b6:	4c0d      	ldr	r4, [pc, #52]	; (80034ec <__libc_init_array+0x3c>)
 80034b8:	1b64      	subs	r4, r4, r5
 80034ba:	10a4      	asrs	r4, r4, #2
 80034bc:	42a6      	cmp	r6, r4
 80034be:	d109      	bne.n	80034d4 <__libc_init_array+0x24>
 80034c0:	2600      	movs	r6, #0
 80034c2:	f000 f821 	bl	8003508 <_init>
 80034c6:	4d0a      	ldr	r5, [pc, #40]	; (80034f0 <__libc_init_array+0x40>)
 80034c8:	4c0a      	ldr	r4, [pc, #40]	; (80034f4 <__libc_init_array+0x44>)
 80034ca:	1b64      	subs	r4, r4, r5
 80034cc:	10a4      	asrs	r4, r4, #2
 80034ce:	42a6      	cmp	r6, r4
 80034d0:	d105      	bne.n	80034de <__libc_init_array+0x2e>
 80034d2:	bd70      	pop	{r4, r5, r6, pc}
 80034d4:	00b3      	lsls	r3, r6, #2
 80034d6:	58eb      	ldr	r3, [r5, r3]
 80034d8:	4798      	blx	r3
 80034da:	3601      	adds	r6, #1
 80034dc:	e7ee      	b.n	80034bc <__libc_init_array+0xc>
 80034de:	00b3      	lsls	r3, r6, #2
 80034e0:	58eb      	ldr	r3, [r5, r3]
 80034e2:	4798      	blx	r3
 80034e4:	3601      	adds	r6, #1
 80034e6:	e7f2      	b.n	80034ce <__libc_init_array+0x1e>
 80034e8:	080035c4 	.word	0x080035c4
 80034ec:	080035c4 	.word	0x080035c4
 80034f0:	080035c4 	.word	0x080035c4
 80034f4:	080035c8 	.word	0x080035c8

080034f8 <memset>:
 80034f8:	0003      	movs	r3, r0
 80034fa:	1882      	adds	r2, r0, r2
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d100      	bne.n	8003502 <memset+0xa>
 8003500:	4770      	bx	lr
 8003502:	7019      	strb	r1, [r3, #0]
 8003504:	3301      	adds	r3, #1
 8003506:	e7f9      	b.n	80034fc <memset+0x4>

08003508 <_init>:
 8003508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800350a:	46c0      	nop			; (mov r8, r8)
 800350c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800350e:	bc08      	pop	{r3}
 8003510:	469e      	mov	lr, r3
 8003512:	4770      	bx	lr

08003514 <_fini>:
 8003514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003516:	46c0      	nop			; (mov r8, r8)
 8003518:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800351a:	bc08      	pop	{r3}
 800351c:	469e      	mov	lr, r3
 800351e:	4770      	bx	lr
